using System;
namespace OpenGL;
extension GL
{
	private static function void*(StringView) s_getProcAddress;

	private const CallingConventionAttribute.Kind CallConv = .Stdcall;

	private typealias glCullFace_t = function void(CullFaceMode mode);
	private static glCullFace_t p_glCullFace;
	[CallingConvention(GL.CallConv)]
	public static void glCullFace(CullFaceMode mode) => p_glCullFace(mode);

	private typealias glFrontFace_t = function void(FrontFaceDirection mode);
	private static glFrontFace_t p_glFrontFace;
	[CallingConvention(GL.CallConv)]
	public static void glFrontFace(FrontFaceDirection mode) => p_glFrontFace(mode);

	private typealias glHint_t = function void(HintTarget target, HintMode mode);
	private static glHint_t p_glHint;
	[CallingConvention(GL.CallConv)]
	public static void glHint(HintTarget target, HintMode mode) => p_glHint(target, mode);

	private typealias glLineWidth_t = function void(float width);
	private static glLineWidth_t p_glLineWidth;
	[CallingConvention(GL.CallConv)]
	public static void glLineWidth(float width) => p_glLineWidth(width);

	private typealias glPointSize_t = function void(float size);
	private static glPointSize_t p_glPointSize;
	[CallingConvention(GL.CallConv)]
	public static void glPointSize(float size) => p_glPointSize(size);

	private typealias glPolygonMode_t = function void(MaterialFace face, PolygonMode mode);
	private static glPolygonMode_t p_glPolygonMode;
	[CallingConvention(GL.CallConv)]
	public static void glPolygonMode(MaterialFace face, PolygonMode mode) => p_glPolygonMode(face, mode);

	private typealias glScissor_t = function void(int32 x, int32 y, int32 width, int32 height);
	private static glScissor_t p_glScissor;
	[CallingConvention(GL.CallConv)]
	public static void glScissor(int32 x, int32 y, int32 width, int32 height) => p_glScissor(x, y, width, height);

	private typealias glTexParameterf_t = function void(TextureTarget target, TextureParameterName pname, float param);
	private static glTexParameterf_t p_glTexParameterf;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterf(TextureTarget target, TextureParameterName pname, float param) => p_glTexParameterf(target, pname, param);

	private typealias glTexParameterfv_t = function void(TextureTarget target, TextureParameterName pname, float* @params);
	private static glTexParameterfv_t p_glTexParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterfv(TextureTarget target, TextureParameterName pname, float* @params) => p_glTexParameterfv(target, pname, @params);

	private typealias glTexParameteri_t = function void(TextureTarget target, TextureParameterName pname, int32 param);
	private static glTexParameteri_t p_glTexParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameteri(TextureTarget target, TextureParameterName pname, int32 param) => p_glTexParameteri(target, pname, param);

	private typealias glTexParameteriv_t = function void(TextureTarget target, TextureParameterName pname, int32* @params);
	private static glTexParameteriv_t p_glTexParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameteriv(TextureTarget target, TextureParameterName pname, int32* @params) => p_glTexParameteriv(target, pname, @params);

	private typealias glTexImage1D_t = function void(TextureTarget target, int32 level, int32 internalformat, int32 width, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTexImage1D_t p_glTexImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage1D(TextureTarget target, int32 level, int32 internalformat, int32 width, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);

	private typealias glTexImage2D_t = function void(TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTexImage2D_t p_glTexImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage2D(TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

	private typealias glDrawBuffer_t = function void(DrawBufferMode buf);
	private static glDrawBuffer_t p_glDrawBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glDrawBuffer(DrawBufferMode buf) => p_glDrawBuffer(buf);

	private typealias glClear_t = function void(uint32 mask);
	private static glClear_t p_glClear;
	[CallingConvention(GL.CallConv)]
	public static void glClear(uint32 mask) => p_glClear(mask);

	private typealias glClearColor_t = function void(float red, float green, float blue, float alpha);
	private static glClearColor_t p_glClearColor;
	[CallingConvention(GL.CallConv)]
	public static void glClearColor(float red, float green, float blue, float alpha) => p_glClearColor(red, green, blue, alpha);

	private typealias glClearStencil_t = function void(int32 s);
	private static glClearStencil_t p_glClearStencil;
	[CallingConvention(GL.CallConv)]
	public static void glClearStencil(int32 s) => p_glClearStencil(s);

	private typealias glClearDepth_t = function void(double depth);
	private static glClearDepth_t p_glClearDepth;
	[CallingConvention(GL.CallConv)]
	public static void glClearDepth(double depth) => p_glClearDepth(depth);

	private typealias glStencilMask_t = function void(uint32 mask);
	private static glStencilMask_t p_glStencilMask;
	[CallingConvention(GL.CallConv)]
	public static void glStencilMask(uint32 mask) => p_glStencilMask(mask);

	private typealias glColorMask_t = function void(bool red, bool green, bool blue, bool alpha);
	private static glColorMask_t p_glColorMask;
	[CallingConvention(GL.CallConv)]
	public static void glColorMask(bool red, bool green, bool blue, bool alpha) => p_glColorMask(red, green, blue, alpha);

	private typealias glDepthMask_t = function void(bool flag);
	private static glDepthMask_t p_glDepthMask;
	[CallingConvention(GL.CallConv)]
	public static void glDepthMask(bool flag) => p_glDepthMask(flag);

	private typealias glDisable_t = function void(EnableCap cap);
	private static glDisable_t p_glDisable;
	[CallingConvention(GL.CallConv)]
	public static void glDisable(EnableCap cap) => p_glDisable(cap);

	private typealias glEnable_t = function void(EnableCap cap);
	private static glEnable_t p_glEnable;
	[CallingConvention(GL.CallConv)]
	public static void glEnable(EnableCap cap) => p_glEnable(cap);

	private typealias glFinish_t = function void();
	private static glFinish_t p_glFinish;
	[CallingConvention(GL.CallConv)]
	public static void glFinish() => p_glFinish();

	private typealias glFlush_t = function void();
	private static glFlush_t p_glFlush;
	[CallingConvention(GL.CallConv)]
	public static void glFlush() => p_glFlush();

	private typealias glBlendFunc_t = function void(BlendingFactor sfactor, BlendingFactor dfactor);
	private static glBlendFunc_t p_glBlendFunc;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFunc(BlendingFactor sfactor, BlendingFactor dfactor) => p_glBlendFunc(sfactor, dfactor);

	private typealias glLogicOp_t = function void(LogicOp opcode);
	private static glLogicOp_t p_glLogicOp;
	[CallingConvention(GL.CallConv)]
	public static void glLogicOp(LogicOp opcode) => p_glLogicOp(opcode);

	private typealias glStencilFunc_t = function void(StencilFunction func, int32 @ref, uint32 mask);
	private static glStencilFunc_t p_glStencilFunc;
	[CallingConvention(GL.CallConv)]
	public static void glStencilFunc(StencilFunction func, int32 @ref, uint32 mask) => p_glStencilFunc(func, @ref, mask);

	private typealias glStencilOp_t = function void(StencilOp fail, StencilOp zfail, StencilOp zpass);
	private static glStencilOp_t p_glStencilOp;
	[CallingConvention(GL.CallConv)]
	public static void glStencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass) => p_glStencilOp(fail, zfail, zpass);

	private typealias glDepthFunc_t = function void(DepthFunction func);
	private static glDepthFunc_t p_glDepthFunc;
	[CallingConvention(GL.CallConv)]
	public static void glDepthFunc(DepthFunction func) => p_glDepthFunc(func);

	private typealias glPixelStoref_t = function void(PixelStoreParameter pname, float param);
	private static glPixelStoref_t p_glPixelStoref;
	[CallingConvention(GL.CallConv)]
	public static void glPixelStoref(PixelStoreParameter pname, float param) => p_glPixelStoref(pname, param);

	private typealias glPixelStorei_t = function void(PixelStoreParameter pname, int32 param);
	private static glPixelStorei_t p_glPixelStorei;
	[CallingConvention(GL.CallConv)]
	public static void glPixelStorei(PixelStoreParameter pname, int32 param) => p_glPixelStorei(pname, param);

	private typealias glReadBuffer_t = function void(ReadBufferMode src);
	private static glReadBuffer_t p_glReadBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glReadBuffer(ReadBufferMode src) => p_glReadBuffer(src);

	private typealias glReadPixels_t = function void(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels);
	private static glReadPixels_t p_glReadPixels;
	[CallingConvention(GL.CallConv)]
	public static void glReadPixels(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels) => p_glReadPixels(x, y, width, height, format, type, pixels);

	private typealias glGetBooleanv_t = function void(GetPName pname, bool* data);
	private static glGetBooleanv_t p_glGetBooleanv;
	[CallingConvention(GL.CallConv)]
	public static void glGetBooleanv(GetPName pname, bool* data) => p_glGetBooleanv(pname, data);

	private typealias glGetDoublev_t = function void(GetPName pname, double* data);
	private static glGetDoublev_t p_glGetDoublev;
	[CallingConvention(GL.CallConv)]
	public static void glGetDoublev(GetPName pname, double* data) => p_glGetDoublev(pname, data);

	private typealias glGetError_t = function ErrorCode();
	private static glGetError_t p_glGetError;
	[CallingConvention(GL.CallConv)]
	public static ErrorCode glGetError() => p_glGetError();

	private typealias glGetFloatv_t = function void(GetPName pname, float* data);
	private static glGetFloatv_t p_glGetFloatv;
	[CallingConvention(GL.CallConv)]
	public static void glGetFloatv(GetPName pname, float* data) => p_glGetFloatv(pname, data);

	private typealias glGetIntegerv_t = function void(GetPName pname, int32* data);
	private static glGetIntegerv_t p_glGetIntegerv;
	[CallingConvention(GL.CallConv)]
	public static void glGetIntegerv(GetPName pname, int32* data) => p_glGetIntegerv(pname, data);

	private typealias glGetString_t = function uint8*(StringName name);
	private static glGetString_t p_glGetString;
	[CallingConvention(GL.CallConv)]
	public static uint8* glGetString(StringName name) => p_glGetString(name);

	private typealias glGetTexImage_t = function void(TextureTarget target, int32 level, PixelFormat format, PixelType type, void* pixels);
	private static glGetTexImage_t p_glGetTexImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexImage(TextureTarget target, int32 level, PixelFormat format, PixelType type, void* pixels) => p_glGetTexImage(target, level, format, type, pixels);

	private typealias glGetTexParameterfv_t = function void(TextureTarget target, GetTextureParameter pname, float* @params);
	private static glGetTexParameterfv_t p_glGetTexParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterfv(TextureTarget target, GetTextureParameter pname, float* @params) => p_glGetTexParameterfv(target, pname, @params);

	private typealias glGetTexParameteriv_t = function void(TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetTexParameteriv_t p_glGetTexParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameteriv(TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetTexParameteriv(target, pname, @params);

	private typealias glGetTexLevelParameterfv_t = function void(TextureTarget target, int32 level, GetTextureParameter pname, float* @params);
	private static glGetTexLevelParameterfv_t p_glGetTexLevelParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexLevelParameterfv(TextureTarget target, int32 level, GetTextureParameter pname, float* @params) => p_glGetTexLevelParameterfv(target, level, pname, @params);

	private typealias glGetTexLevelParameteriv_t = function void(TextureTarget target, int32 level, GetTextureParameter pname, int32* @params);
	private static glGetTexLevelParameteriv_t p_glGetTexLevelParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexLevelParameteriv(TextureTarget target, int32 level, GetTextureParameter pname, int32* @params) => p_glGetTexLevelParameteriv(target, level, pname, @params);

	private typealias glIsEnabled_t = function bool(EnableCap cap);
	private static glIsEnabled_t p_glIsEnabled;
	[CallingConvention(GL.CallConv)]
	public static bool glIsEnabled(EnableCap cap) => p_glIsEnabled(cap);

	private typealias glDepthRange_t = function void(double n, double f);
	private static glDepthRange_t p_glDepthRange;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRange(double n, double f) => p_glDepthRange(n, f);

	private typealias glViewport_t = function void(int32 x, int32 y, int32 width, int32 height);
	private static glViewport_t p_glViewport;
	[CallingConvention(GL.CallConv)]
	public static void glViewport(int32 x, int32 y, int32 width, int32 height) => p_glViewport(x, y, width, height);

	private typealias glDrawArrays_t = function void(PrimitiveType mode, int32 first, int32 count);
	private static glDrawArrays_t p_glDrawArrays;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArrays(PrimitiveType mode, int32 first, int32 count) => p_glDrawArrays(mode, first, count);

	private typealias glDrawElements_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices);
	private static glDrawElements_t p_glDrawElements;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElements(PrimitiveType mode, int32 count, DrawElementsType type, void* indices) => p_glDrawElements(mode, count, type, indices);

	private typealias glPolygonOffset_t = function void(float factor, float units);
	private static glPolygonOffset_t p_glPolygonOffset;
	[CallingConvention(GL.CallConv)]
	public static void glPolygonOffset(float factor, float units) => p_glPolygonOffset(factor, units);

	private typealias glCopyTexImage1D_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border);
	private static glCopyTexImage1D_t p_glCopyTexImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexImage1D(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border) => p_glCopyTexImage1D(target, level, internalformat, x, y, width, border);

	private typealias glCopyTexImage2D_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border);
	private static glCopyTexImage2D_t p_glCopyTexImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexImage2D(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border) => p_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);

	private typealias glCopyTexSubImage1D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width);
	private static glCopyTexSubImage1D_t p_glCopyTexSubImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexSubImage1D(TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width) => p_glCopyTexSubImage1D(target, level, xoffset, x, y, width);

	private typealias glCopyTexSubImage2D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTexSubImage2D_t p_glCopyTexSubImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexSubImage2D(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);

	private typealias glTexSubImage1D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage1D_t p_glTexSubImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage1D(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);

	private typealias glTexSubImage2D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage2D_t p_glTexSubImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage2D(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

	private typealias glBindTexture_t = function void(TextureTarget target, uint32 texture);
	private static glBindTexture_t p_glBindTexture;
	[CallingConvention(GL.CallConv)]
	public static void glBindTexture(TextureTarget target, uint32 texture) => p_glBindTexture(target, texture);

	private typealias glDeleteTextures_t = function void(int32 n, uint32* textures);
	private static glDeleteTextures_t p_glDeleteTextures;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteTextures(int32 n, uint32* textures) => p_glDeleteTextures(n, textures);

	private typealias glGenTextures_t = function void(int32 n, uint32* textures);
	private static glGenTextures_t p_glGenTextures;
	[CallingConvention(GL.CallConv)]
	public static void glGenTextures(int32 n, uint32* textures) => p_glGenTextures(n, textures);

	private typealias glIsTexture_t = function bool(uint32 texture);
	private static glIsTexture_t p_glIsTexture;
	[CallingConvention(GL.CallConv)]
	public static bool glIsTexture(uint32 texture) => p_glIsTexture(texture);

	private typealias glDrawRangeElements_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices);
	private static glDrawRangeElements_t p_glDrawRangeElements;
	[CallingConvention(GL.CallConv)]
	public static void glDrawRangeElements(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices) => p_glDrawRangeElements(mode, start, end, count, type, indices);

	private typealias glTexImage3D_t = function void(TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTexImage3D_t p_glTexImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage3D(TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

	private typealias glTexSubImage3D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage3D_t p_glTexSubImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage3D(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

	private typealias glCopyTexSubImage3D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTexSubImage3D_t p_glCopyTexSubImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexSubImage3D(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);

	private typealias glActiveTexture_t = function void(TextureUnit texture);
	private static glActiveTexture_t p_glActiveTexture;
	[CallingConvention(GL.CallConv)]
	public static void glActiveTexture(TextureUnit texture) => p_glActiveTexture(texture);

	private typealias glSampleCoverage_t = function void(float value, bool invert);
	private static glSampleCoverage_t p_glSampleCoverage;
	[CallingConvention(GL.CallConv)]
	public static void glSampleCoverage(float value, bool invert) => p_glSampleCoverage(value, invert);

	private typealias glCompressedTexImage3D_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* data);
	private static glCompressedTexImage3D_t p_glCompressedTexImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexImage3D(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* data) => p_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);

	private typealias glCompressedTexImage2D_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* data);
	private static glCompressedTexImage2D_t p_glCompressedTexImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexImage2D(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* data) => p_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

	private typealias glCompressedTexImage1D_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* data);
	private static glCompressedTexImage1D_t p_glCompressedTexImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexImage1D(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* data) => p_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);

	private typealias glCompressedTexSubImage3D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTexSubImage3D_t p_glCompressedTexSubImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexSubImage3D(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

	private typealias glCompressedTexSubImage2D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTexSubImage2D_t p_glCompressedTexSubImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexSubImage2D(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

	private typealias glCompressedTexSubImage1D_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTexSubImage1D_t p_glCompressedTexSubImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexSubImage1D(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);

	private typealias glGetCompressedTexImage_t = function void(TextureTarget target, int32 level, void* img);
	private static glGetCompressedTexImage_t p_glGetCompressedTexImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetCompressedTexImage(TextureTarget target, int32 level, void* img) => p_glGetCompressedTexImage(target, level, img);

	private typealias glBlendFuncSeparate_t = function void(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
	private static glBlendFuncSeparate_t p_glBlendFuncSeparate;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) => p_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

	private typealias glMultiDrawArrays_t = function void(PrimitiveType mode, int32* first, int32* count, int32 drawcount);
	private static glMultiDrawArrays_t p_glMultiDrawArrays;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArrays(PrimitiveType mode, int32* first, int32* count, int32 drawcount) => p_glMultiDrawArrays(mode, first, count, drawcount);

	private typealias glMultiDrawElements_t = function void(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 drawcount);
	private static glMultiDrawElements_t p_glMultiDrawElements;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElements(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 drawcount) => p_glMultiDrawElements(mode, count, type, indices, drawcount);

	private typealias glPointParameterf_t = function void(uint32 pname, float param);
	private static glPointParameterf_t p_glPointParameterf;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterf(uint32 pname, float param) => p_glPointParameterf(pname, param);

	private typealias glPointParameterfv_t = function void(uint32 pname, float* @params);
	private static glPointParameterfv_t p_glPointParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterfv(uint32 pname, float* @params) => p_glPointParameterfv(pname, @params);

	private typealias glPointParameteri_t = function void(uint32 pname, int32 param);
	private static glPointParameteri_t p_glPointParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameteri(uint32 pname, int32 param) => p_glPointParameteri(pname, param);

	private typealias glPointParameteriv_t = function void(uint32 pname, int32* @params);
	private static glPointParameteriv_t p_glPointParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameteriv(uint32 pname, int32* @params) => p_glPointParameteriv(pname, @params);

	private typealias glBlendColor_t = function void(float red, float green, float blue, float alpha);
	private static glBlendColor_t p_glBlendColor;
	[CallingConvention(GL.CallConv)]
	public static void glBlendColor(float red, float green, float blue, float alpha) => p_glBlendColor(red, green, blue, alpha);

	private typealias glBlendEquation_t = function void(BlendEquationModeEXT mode);
	private static glBlendEquation_t p_glBlendEquation;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquation(BlendEquationModeEXT mode) => p_glBlendEquation(mode);

	private typealias glGenQueries_t = function void(int32 n, uint32* ids);
	private static glGenQueries_t p_glGenQueries;
	[CallingConvention(GL.CallConv)]
	public static void glGenQueries(int32 n, uint32* ids) => p_glGenQueries(n, ids);

	private typealias glDeleteQueries_t = function void(int32 n, uint32* ids);
	private static glDeleteQueries_t p_glDeleteQueries;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteQueries(int32 n, uint32* ids) => p_glDeleteQueries(n, ids);

	private typealias glIsQuery_t = function bool(uint32 id);
	private static glIsQuery_t p_glIsQuery;
	[CallingConvention(GL.CallConv)]
	public static bool glIsQuery(uint32 id) => p_glIsQuery(id);

	private typealias glBeginQuery_t = function void(QueryTarget target, uint32 id);
	private static glBeginQuery_t p_glBeginQuery;
	[CallingConvention(GL.CallConv)]
	public static void glBeginQuery(QueryTarget target, uint32 id) => p_glBeginQuery(target, id);

	private typealias glEndQuery_t = function void(QueryTarget target);
	private static glEndQuery_t p_glEndQuery;
	[CallingConvention(GL.CallConv)]
	public static void glEndQuery(QueryTarget target) => p_glEndQuery(target);

	private typealias glGetQueryiv_t = function void(QueryTarget target, QueryParameterName pname, int32* @params);
	private static glGetQueryiv_t p_glGetQueryiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryiv(QueryTarget target, QueryParameterName pname, int32* @params) => p_glGetQueryiv(target, pname, @params);

	private typealias glGetQueryObjectiv_t = function void(uint32 id, QueryObjectParameterName pname, int32* @params);
	private static glGetQueryObjectiv_t p_glGetQueryObjectiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectiv(uint32 id, QueryObjectParameterName pname, int32* @params) => p_glGetQueryObjectiv(id, pname, @params);

	private typealias glGetQueryObjectuiv_t = function void(uint32 id, QueryObjectParameterName pname, uint32* @params);
	private static glGetQueryObjectuiv_t p_glGetQueryObjectuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectuiv(uint32 id, QueryObjectParameterName pname, uint32* @params) => p_glGetQueryObjectuiv(id, pname, @params);

	private typealias glBindBuffer_t = function void(BufferTargetARB target, uint32 buffer);
	private static glBindBuffer_t p_glBindBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glBindBuffer(BufferTargetARB target, uint32 buffer) => p_glBindBuffer(target, buffer);

	private typealias glDeleteBuffers_t = function void(int32 n, uint32* buffers);
	private static glDeleteBuffers_t p_glDeleteBuffers;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteBuffers(int32 n, uint32* buffers) => p_glDeleteBuffers(n, buffers);

	private typealias glGenBuffers_t = function void(int32 n, uint32* buffers);
	private static glGenBuffers_t p_glGenBuffers;
	[CallingConvention(GL.CallConv)]
	public static void glGenBuffers(int32 n, uint32* buffers) => p_glGenBuffers(n, buffers);

	private typealias glIsBuffer_t = function bool(uint32 buffer);
	private static glIsBuffer_t p_glIsBuffer;
	[CallingConvention(GL.CallConv)]
	public static bool glIsBuffer(uint32 buffer) => p_glIsBuffer(buffer);

	private typealias glBufferData_t = function void(BufferTargetARB target, int32 size, void* data, BufferUsageARB usage);
	private static glBufferData_t p_glBufferData;
	[CallingConvention(GL.CallConv)]
	public static void glBufferData(BufferTargetARB target, int32 size, void* data, BufferUsageARB usage) => p_glBufferData(target, size, data, usage);

	private typealias glBufferSubData_t = function void(BufferTargetARB target, void* offset, int32 size, void* data);
	private static glBufferSubData_t p_glBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glBufferSubData(BufferTargetARB target, void* offset, int32 size, void* data) => p_glBufferSubData(target, offset, size, data);

	private typealias glGetBufferSubData_t = function void(BufferTargetARB target, void* offset, int32 size, void* data);
	private static glGetBufferSubData_t p_glGetBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferSubData(BufferTargetARB target, void* offset, int32 size, void* data) => p_glGetBufferSubData(target, offset, size, data);

	private typealias glMapBuffer_t = function void*(BufferTargetARB target, BufferAccessARB access);
	private static glMapBuffer_t p_glMapBuffer;
	[CallingConvention(GL.CallConv)]
	public static void* glMapBuffer(BufferTargetARB target, BufferAccessARB access) => p_glMapBuffer(target, access);

	private typealias glUnmapBuffer_t = function bool(BufferTargetARB target);
	private static glUnmapBuffer_t p_glUnmapBuffer;
	[CallingConvention(GL.CallConv)]
	public static bool glUnmapBuffer(BufferTargetARB target) => p_glUnmapBuffer(target);

	private typealias glGetBufferParameteriv_t = function void(BufferTargetARB target, uint32 pname, int32* @params);
	private static glGetBufferParameteriv_t p_glGetBufferParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferParameteriv(BufferTargetARB target, uint32 pname, int32* @params) => p_glGetBufferParameteriv(target, pname, @params);

	private typealias glGetBufferPointerv_t = function void(BufferTargetARB target, uint32 pname, void** @params);
	private static glGetBufferPointerv_t p_glGetBufferPointerv;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferPointerv(BufferTargetARB target, uint32 pname, void** @params) => p_glGetBufferPointerv(target, pname, @params);

	private typealias glBlendEquationSeparate_t = function void(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparate_t p_glBlendEquationSeparate;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparate(modeRGB, modeAlpha);

	private typealias glDrawBuffers_t = function void(int32 n, uint32* bufs);
	private static glDrawBuffers_t p_glDrawBuffers;
	[CallingConvention(GL.CallConv)]
	public static void glDrawBuffers(int32 n, uint32* bufs) => p_glDrawBuffers(n, bufs);

	private typealias glStencilOpSeparate_t = function void(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
	private static glStencilOpSeparate_t p_glStencilOpSeparate;
	[CallingConvention(GL.CallConv)]
	public static void glStencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass) => p_glStencilOpSeparate(face, sfail, dpfail, dppass);

	private typealias glStencilFuncSeparate_t = function void(StencilFaceDirection face, StencilFunction func, int32 @ref, uint32 mask);
	private static glStencilFuncSeparate_t p_glStencilFuncSeparate;
	[CallingConvention(GL.CallConv)]
	public static void glStencilFuncSeparate(StencilFaceDirection face, StencilFunction func, int32 @ref, uint32 mask) => p_glStencilFuncSeparate(face, func, @ref, mask);

	private typealias glStencilMaskSeparate_t = function void(StencilFaceDirection face, uint32 mask);
	private static glStencilMaskSeparate_t p_glStencilMaskSeparate;
	[CallingConvention(GL.CallConv)]
	public static void glStencilMaskSeparate(StencilFaceDirection face, uint32 mask) => p_glStencilMaskSeparate(face, mask);

	private typealias glAttachShader_t = function void(uint32 program, uint32 shader);
	private static glAttachShader_t p_glAttachShader;
	[CallingConvention(GL.CallConv)]
	public static void glAttachShader(uint32 program, uint32 shader) => p_glAttachShader(program, shader);

	private typealias glBindAttribLocation_t = function void(uint32 program, uint32 index, char8* name);
	private static glBindAttribLocation_t p_glBindAttribLocation;
	[CallingConvention(GL.CallConv)]
	public static void glBindAttribLocation(uint32 program, uint32 index, char8* name) => p_glBindAttribLocation(program, index, name);

	private typealias glCompileShader_t = function void(uint32 shader);
	private static glCompileShader_t p_glCompileShader;
	[CallingConvention(GL.CallConv)]
	public static void glCompileShader(uint32 shader) => p_glCompileShader(shader);

	private typealias glCreateProgram_t = function uint32();
	private static glCreateProgram_t p_glCreateProgram;
	[CallingConvention(GL.CallConv)]
	public static uint32 glCreateProgram() => p_glCreateProgram();

	private typealias glCreateShader_t = function uint32(ShaderType type);
	private static glCreateShader_t p_glCreateShader;
	[CallingConvention(GL.CallConv)]
	public static uint32 glCreateShader(ShaderType type) => p_glCreateShader(type);

	private typealias glDeleteProgram_t = function void(uint32 program);
	private static glDeleteProgram_t p_glDeleteProgram;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteProgram(uint32 program) => p_glDeleteProgram(program);

	private typealias glDeleteShader_t = function void(uint32 shader);
	private static glDeleteShader_t p_glDeleteShader;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteShader(uint32 shader) => p_glDeleteShader(shader);

	private typealias glDetachShader_t = function void(uint32 program, uint32 shader);
	private static glDetachShader_t p_glDetachShader;
	[CallingConvention(GL.CallConv)]
	public static void glDetachShader(uint32 program, uint32 shader) => p_glDetachShader(program, shader);

	private typealias glDisableVertexAttribArray_t = function void(uint32 index);
	private static glDisableVertexAttribArray_t p_glDisableVertexAttribArray;
	[CallingConvention(GL.CallConv)]
	public static void glDisableVertexAttribArray(uint32 index) => p_glDisableVertexAttribArray(index);

	private typealias glEnableVertexAttribArray_t = function void(uint32 index);
	private static glEnableVertexAttribArray_t p_glEnableVertexAttribArray;
	[CallingConvention(GL.CallConv)]
	public static void glEnableVertexAttribArray(uint32 index) => p_glEnableVertexAttribArray(index);

	private typealias glGetActiveAttrib_t = function void(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name);
	private static glGetActiveAttrib_t p_glGetActiveAttrib;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveAttrib(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name) => p_glGetActiveAttrib(program, index, bufSize, length, size, type, name);

	private typealias glGetActiveUniform_t = function void(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name);
	private static glGetActiveUniform_t p_glGetActiveUniform;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveUniform(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name) => p_glGetActiveUniform(program, index, bufSize, length, size, type, name);

	private typealias glGetAttachedShaders_t = function void(uint32 program, int32 maxCount, int32* count, uint32* shaders);
	private static glGetAttachedShaders_t p_glGetAttachedShaders;
	[CallingConvention(GL.CallConv)]
	public static void glGetAttachedShaders(uint32 program, int32 maxCount, int32* count, uint32* shaders) => p_glGetAttachedShaders(program, maxCount, count, shaders);

	private typealias glGetAttribLocation_t = function int32(uint32 program, char8* name);
	private static glGetAttribLocation_t p_glGetAttribLocation;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetAttribLocation(uint32 program, char8* name) => p_glGetAttribLocation(program, name);

	private typealias glGetProgramiv_t = function void(uint32 program, ProgramPropertyARB pname, int32* @params);
	private static glGetProgramiv_t p_glGetProgramiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramiv(uint32 program, ProgramPropertyARB pname, int32* @params) => p_glGetProgramiv(program, pname, @params);

	private typealias glGetProgramInfoLog_t = function void(uint32 program, int32 bufSize, int32* length, char8* infoLog);
	private static glGetProgramInfoLog_t p_glGetProgramInfoLog;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramInfoLog(uint32 program, int32 bufSize, int32* length, char8* infoLog) => p_glGetProgramInfoLog(program, bufSize, length, infoLog);

	private typealias glGetShaderiv_t = function void(uint32 shader, ShaderParameterName pname, int32* @params);
	private static glGetShaderiv_t p_glGetShaderiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetShaderiv(uint32 shader, ShaderParameterName pname, int32* @params) => p_glGetShaderiv(shader, pname, @params);

	private typealias glGetShaderInfoLog_t = function void(uint32 shader, int32 bufSize, int32* length, char8* infoLog);
	private static glGetShaderInfoLog_t p_glGetShaderInfoLog;
	[CallingConvention(GL.CallConv)]
	public static void glGetShaderInfoLog(uint32 shader, int32 bufSize, int32* length, char8* infoLog) => p_glGetShaderInfoLog(shader, bufSize, length, infoLog);

	private typealias glGetShaderSource_t = function void(uint32 shader, int32 bufSize, int32* length, char8* source);
	private static glGetShaderSource_t p_glGetShaderSource;
	[CallingConvention(GL.CallConv)]
	public static void glGetShaderSource(uint32 shader, int32 bufSize, int32* length, char8* source) => p_glGetShaderSource(shader, bufSize, length, source);

	private typealias glGetUniformLocation_t = function int32(uint32 program, char8* name);
	private static glGetUniformLocation_t p_glGetUniformLocation;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetUniformLocation(uint32 program, char8* name) => p_glGetUniformLocation(program, name);

	private typealias glGetUniformfv_t = function void(uint32 program, int32 location, float* @params);
	private static glGetUniformfv_t p_glGetUniformfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformfv(uint32 program, int32 location, float* @params) => p_glGetUniformfv(program, location, @params);

	private typealias glGetUniformiv_t = function void(uint32 program, int32 location, int32* @params);
	private static glGetUniformiv_t p_glGetUniformiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformiv(uint32 program, int32 location, int32* @params) => p_glGetUniformiv(program, location, @params);

	private typealias glGetVertexAttribdv_t = function void(uint32 index, uint32 pname, double* @params);
	private static glGetVertexAttribdv_t p_glGetVertexAttribdv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribdv(uint32 index, uint32 pname, double* @params) => p_glGetVertexAttribdv(index, pname, @params);

	private typealias glGetVertexAttribfv_t = function void(uint32 index, uint32 pname, float* @params);
	private static glGetVertexAttribfv_t p_glGetVertexAttribfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribfv(uint32 index, uint32 pname, float* @params) => p_glGetVertexAttribfv(index, pname, @params);

	private typealias glGetVertexAttribiv_t = function void(uint32 index, uint32 pname, int32* @params);
	private static glGetVertexAttribiv_t p_glGetVertexAttribiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribiv(uint32 index, uint32 pname, int32* @params) => p_glGetVertexAttribiv(index, pname, @params);

	private typealias glGetVertexAttribPointerv_t = function void(uint32 index, uint32 pname, void** pointer);
	private static glGetVertexAttribPointerv_t p_glGetVertexAttribPointerv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribPointerv(uint32 index, uint32 pname, void** pointer) => p_glGetVertexAttribPointerv(index, pname, pointer);

	private typealias glIsProgram_t = function bool(uint32 program);
	private static glIsProgram_t p_glIsProgram;
	[CallingConvention(GL.CallConv)]
	public static bool glIsProgram(uint32 program) => p_glIsProgram(program);

	private typealias glIsShader_t = function bool(uint32 shader);
	private static glIsShader_t p_glIsShader;
	[CallingConvention(GL.CallConv)]
	public static bool glIsShader(uint32 shader) => p_glIsShader(shader);

	private typealias glLinkProgram_t = function void(uint32 program);
	private static glLinkProgram_t p_glLinkProgram;
	[CallingConvention(GL.CallConv)]
	public static void glLinkProgram(uint32 program) => p_glLinkProgram(program);

	private typealias glShaderSource_t = function void(uint32 shader, int32 count, void* @string, int32* length);
	private static glShaderSource_t p_glShaderSource;
	[CallingConvention(GL.CallConv)]
	public static void glShaderSource(uint32 shader, int32 count, void* @string, int32* length) => p_glShaderSource(shader, count, @string, length);

	private typealias glUseProgram_t = function void(uint32 program);
	private static glUseProgram_t p_glUseProgram;
	[CallingConvention(GL.CallConv)]
	public static void glUseProgram(uint32 program) => p_glUseProgram(program);

	private typealias glUniform1f_t = function void(int32 location, float v0);
	private static glUniform1f_t p_glUniform1f;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1f(int32 location, float v0) => p_glUniform1f(location, v0);

	private typealias glUniform2f_t = function void(int32 location, float v0, float v1);
	private static glUniform2f_t p_glUniform2f;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2f(int32 location, float v0, float v1) => p_glUniform2f(location, v0, v1);

	private typealias glUniform3f_t = function void(int32 location, float v0, float v1, float v2);
	private static glUniform3f_t p_glUniform3f;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3f(int32 location, float v0, float v1, float v2) => p_glUniform3f(location, v0, v1, v2);

	private typealias glUniform4f_t = function void(int32 location, float v0, float v1, float v2, float v3);
	private static glUniform4f_t p_glUniform4f;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4f(int32 location, float v0, float v1, float v2, float v3) => p_glUniform4f(location, v0, v1, v2, v3);

	private typealias glUniform1i_t = function void(int32 location, int32 v0);
	private static glUniform1i_t p_glUniform1i;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1i(int32 location, int32 v0) => p_glUniform1i(location, v0);

	private typealias glUniform2i_t = function void(int32 location, int32 v0, int32 v1);
	private static glUniform2i_t p_glUniform2i;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2i(int32 location, int32 v0, int32 v1) => p_glUniform2i(location, v0, v1);

	private typealias glUniform3i_t = function void(int32 location, int32 v0, int32 v1, int32 v2);
	private static glUniform3i_t p_glUniform3i;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3i(int32 location, int32 v0, int32 v1, int32 v2) => p_glUniform3i(location, v0, v1, v2);

	private typealias glUniform4i_t = function void(int32 location, int32 v0, int32 v1, int32 v2, int32 v3);
	private static glUniform4i_t p_glUniform4i;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4i(int32 location, int32 v0, int32 v1, int32 v2, int32 v3) => p_glUniform4i(location, v0, v1, v2, v3);

	private typealias glUniform1fv_t = function void(int32 location, int32 count, float* value);
	private static glUniform1fv_t p_glUniform1fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1fv(int32 location, int32 count, float* value) => p_glUniform1fv(location, count, value);

	private typealias glUniform2fv_t = function void(int32 location, int32 count, float* value);
	private static glUniform2fv_t p_glUniform2fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2fv(int32 location, int32 count, float* value) => p_glUniform2fv(location, count, value);

	private typealias glUniform3fv_t = function void(int32 location, int32 count, float* value);
	private static glUniform3fv_t p_glUniform3fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3fv(int32 location, int32 count, float* value) => p_glUniform3fv(location, count, value);

	private typealias glUniform4fv_t = function void(int32 location, int32 count, float* value);
	private static glUniform4fv_t p_glUniform4fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4fv(int32 location, int32 count, float* value) => p_glUniform4fv(location, count, value);

	private typealias glUniform1iv_t = function void(int32 location, int32 count, int32* value);
	private static glUniform1iv_t p_glUniform1iv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1iv(int32 location, int32 count, int32* value) => p_glUniform1iv(location, count, value);

	private typealias glUniform2iv_t = function void(int32 location, int32 count, int32* value);
	private static glUniform2iv_t p_glUniform2iv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2iv(int32 location, int32 count, int32* value) => p_glUniform2iv(location, count, value);

	private typealias glUniform3iv_t = function void(int32 location, int32 count, int32* value);
	private static glUniform3iv_t p_glUniform3iv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3iv(int32 location, int32 count, int32* value) => p_glUniform3iv(location, count, value);

	private typealias glUniform4iv_t = function void(int32 location, int32 count, int32* value);
	private static glUniform4iv_t p_glUniform4iv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4iv(int32 location, int32 count, int32* value) => p_glUniform4iv(location, count, value);

	private typealias glUniformMatrix2fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix2fv_t p_glUniformMatrix2fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix2fv(location, count, transpose, value);

	private typealias glUniformMatrix3fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix3fv_t p_glUniformMatrix3fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix3fv(location, count, transpose, value);

	private typealias glUniformMatrix4fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix4fv_t p_glUniformMatrix4fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix4fv(location, count, transpose, value);

	private typealias glValidateProgram_t = function void(uint32 program);
	private static glValidateProgram_t p_glValidateProgram;
	[CallingConvention(GL.CallConv)]
	public static void glValidateProgram(uint32 program) => p_glValidateProgram(program);

	private typealias glVertexAttrib1d_t = function void(uint32 index, double x);
	private static glVertexAttrib1d_t p_glVertexAttrib1d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1d(uint32 index, double x) => p_glVertexAttrib1d(index, x);

	private typealias glVertexAttrib1dv_t = function void(uint32 index, double* v);
	private static glVertexAttrib1dv_t p_glVertexAttrib1dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1dv(uint32 index, double* v) => p_glVertexAttrib1dv(index, v);

	private typealias glVertexAttrib1f_t = function void(uint32 index, float x);
	private static glVertexAttrib1f_t p_glVertexAttrib1f;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1f(uint32 index, float x) => p_glVertexAttrib1f(index, x);

	private typealias glVertexAttrib1fv_t = function void(uint32 index, float* v);
	private static glVertexAttrib1fv_t p_glVertexAttrib1fv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1fv(uint32 index, float* v) => p_glVertexAttrib1fv(index, v);

	private typealias glVertexAttrib1s_t = function void(uint32 index, int16 x);
	private static glVertexAttrib1s_t p_glVertexAttrib1s;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1s(uint32 index, int16 x) => p_glVertexAttrib1s(index, x);

	private typealias glVertexAttrib1sv_t = function void(uint32 index, int16* v);
	private static glVertexAttrib1sv_t p_glVertexAttrib1sv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1sv(uint32 index, int16* v) => p_glVertexAttrib1sv(index, v);

	private typealias glVertexAttrib2d_t = function void(uint32 index, double x, double y);
	private static glVertexAttrib2d_t p_glVertexAttrib2d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2d(uint32 index, double x, double y) => p_glVertexAttrib2d(index, x, y);

	private typealias glVertexAttrib2dv_t = function void(uint32 index, double* v);
	private static glVertexAttrib2dv_t p_glVertexAttrib2dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2dv(uint32 index, double* v) => p_glVertexAttrib2dv(index, v);

	private typealias glVertexAttrib2f_t = function void(uint32 index, float x, float y);
	private static glVertexAttrib2f_t p_glVertexAttrib2f;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2f(uint32 index, float x, float y) => p_glVertexAttrib2f(index, x, y);

	private typealias glVertexAttrib2fv_t = function void(uint32 index, float* v);
	private static glVertexAttrib2fv_t p_glVertexAttrib2fv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2fv(uint32 index, float* v) => p_glVertexAttrib2fv(index, v);

	private typealias glVertexAttrib2s_t = function void(uint32 index, int16 x, int16 y);
	private static glVertexAttrib2s_t p_glVertexAttrib2s;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2s(uint32 index, int16 x, int16 y) => p_glVertexAttrib2s(index, x, y);

	private typealias glVertexAttrib2sv_t = function void(uint32 index, int16* v);
	private static glVertexAttrib2sv_t p_glVertexAttrib2sv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2sv(uint32 index, int16* v) => p_glVertexAttrib2sv(index, v);

	private typealias glVertexAttrib3d_t = function void(uint32 index, double x, double y, double z);
	private static glVertexAttrib3d_t p_glVertexAttrib3d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3d(uint32 index, double x, double y, double z) => p_glVertexAttrib3d(index, x, y, z);

	private typealias glVertexAttrib3dv_t = function void(uint32 index, double* v);
	private static glVertexAttrib3dv_t p_glVertexAttrib3dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3dv(uint32 index, double* v) => p_glVertexAttrib3dv(index, v);

	private typealias glVertexAttrib3f_t = function void(uint32 index, float x, float y, float z);
	private static glVertexAttrib3f_t p_glVertexAttrib3f;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3f(uint32 index, float x, float y, float z) => p_glVertexAttrib3f(index, x, y, z);

	private typealias glVertexAttrib3fv_t = function void(uint32 index, float* v);
	private static glVertexAttrib3fv_t p_glVertexAttrib3fv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3fv(uint32 index, float* v) => p_glVertexAttrib3fv(index, v);

	private typealias glVertexAttrib3s_t = function void(uint32 index, int16 x, int16 y, int16 z);
	private static glVertexAttrib3s_t p_glVertexAttrib3s;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3s(uint32 index, int16 x, int16 y, int16 z) => p_glVertexAttrib3s(index, x, y, z);

	private typealias glVertexAttrib3sv_t = function void(uint32 index, int16* v);
	private static glVertexAttrib3sv_t p_glVertexAttrib3sv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3sv(uint32 index, int16* v) => p_glVertexAttrib3sv(index, v);

	private typealias glVertexAttrib4Nbv_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4Nbv_t p_glVertexAttrib4Nbv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4Nbv(uint32 index, uint8* v) => p_glVertexAttrib4Nbv(index, v);

	private typealias glVertexAttrib4Niv_t = function void(uint32 index, int32* v);
	private static glVertexAttrib4Niv_t p_glVertexAttrib4Niv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4Niv(uint32 index, int32* v) => p_glVertexAttrib4Niv(index, v);

	private typealias glVertexAttrib4Nsv_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4Nsv_t p_glVertexAttrib4Nsv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4Nsv(uint32 index, int16* v) => p_glVertexAttrib4Nsv(index, v);

	private typealias glVertexAttrib4Nub_t = function void(uint32 index, uint8 x, uint8 y, uint8 z, uint8 w);
	private static glVertexAttrib4Nub_t p_glVertexAttrib4Nub;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4Nub(uint32 index, uint8 x, uint8 y, uint8 z, uint8 w) => p_glVertexAttrib4Nub(index, x, y, z, w);

	private typealias glVertexAttrib4Nubv_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4Nubv_t p_glVertexAttrib4Nubv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4Nubv(uint32 index, uint8* v) => p_glVertexAttrib4Nubv(index, v);

	private typealias glVertexAttrib4Nuiv_t = function void(uint32 index, uint32* v);
	private static glVertexAttrib4Nuiv_t p_glVertexAttrib4Nuiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4Nuiv(uint32 index, uint32* v) => p_glVertexAttrib4Nuiv(index, v);

	private typealias glVertexAttrib4Nusv_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4Nusv_t p_glVertexAttrib4Nusv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4Nusv(uint32 index, int16* v) => p_glVertexAttrib4Nusv(index, v);

	private typealias glVertexAttrib4bv_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4bv_t p_glVertexAttrib4bv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4bv(uint32 index, uint8* v) => p_glVertexAttrib4bv(index, v);

	private typealias glVertexAttrib4d_t = function void(uint32 index, double x, double y, double z, double w);
	private static glVertexAttrib4d_t p_glVertexAttrib4d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4d(uint32 index, double x, double y, double z, double w) => p_glVertexAttrib4d(index, x, y, z, w);

	private typealias glVertexAttrib4dv_t = function void(uint32 index, double* v);
	private static glVertexAttrib4dv_t p_glVertexAttrib4dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4dv(uint32 index, double* v) => p_glVertexAttrib4dv(index, v);

	private typealias glVertexAttrib4f_t = function void(uint32 index, float x, float y, float z, float w);
	private static glVertexAttrib4f_t p_glVertexAttrib4f;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4f(uint32 index, float x, float y, float z, float w) => p_glVertexAttrib4f(index, x, y, z, w);

	private typealias glVertexAttrib4fv_t = function void(uint32 index, float* v);
	private static glVertexAttrib4fv_t p_glVertexAttrib4fv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4fv(uint32 index, float* v) => p_glVertexAttrib4fv(index, v);

	private typealias glVertexAttrib4iv_t = function void(uint32 index, int32* v);
	private static glVertexAttrib4iv_t p_glVertexAttrib4iv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4iv(uint32 index, int32* v) => p_glVertexAttrib4iv(index, v);

	private typealias glVertexAttrib4s_t = function void(uint32 index, int16 x, int16 y, int16 z, int16 w);
	private static glVertexAttrib4s_t p_glVertexAttrib4s;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4s(uint32 index, int16 x, int16 y, int16 z, int16 w) => p_glVertexAttrib4s(index, x, y, z, w);

	private typealias glVertexAttrib4sv_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4sv_t p_glVertexAttrib4sv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4sv(uint32 index, int16* v) => p_glVertexAttrib4sv(index, v);

	private typealias glVertexAttrib4ubv_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4ubv_t p_glVertexAttrib4ubv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4ubv(uint32 index, uint8* v) => p_glVertexAttrib4ubv(index, v);

	private typealias glVertexAttrib4uiv_t = function void(uint32 index, uint32* v);
	private static glVertexAttrib4uiv_t p_glVertexAttrib4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4uiv(uint32 index, uint32* v) => p_glVertexAttrib4uiv(index, v);

	private typealias glVertexAttrib4usv_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4usv_t p_glVertexAttrib4usv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4usv(uint32 index, int16* v) => p_glVertexAttrib4usv(index, v);

	private typealias glVertexAttribPointer_t = function void(uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, void* pointer);
	private static glVertexAttribPointer_t p_glVertexAttribPointer;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribPointer(uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, void* pointer) => p_glVertexAttribPointer(index, size, type, normalized, stride, pointer);

	private typealias glUniformMatrix2x3fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix2x3fv_t p_glUniformMatrix2x3fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2x3fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix2x3fv(location, count, transpose, value);

	private typealias glUniformMatrix3x2fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix3x2fv_t p_glUniformMatrix3x2fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3x2fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix3x2fv(location, count, transpose, value);

	private typealias glUniformMatrix2x4fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix2x4fv_t p_glUniformMatrix2x4fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2x4fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix2x4fv(location, count, transpose, value);

	private typealias glUniformMatrix4x2fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix4x2fv_t p_glUniformMatrix4x2fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4x2fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix4x2fv(location, count, transpose, value);

	private typealias glUniformMatrix3x4fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix3x4fv_t p_glUniformMatrix3x4fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3x4fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix3x4fv(location, count, transpose, value);

	private typealias glUniformMatrix4x3fv_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix4x3fv_t p_glUniformMatrix4x3fv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4x3fv(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix4x3fv(location, count, transpose, value);

	private typealias glColorMaski_t = function void(uint32 index, bool r, bool g, bool b, bool a);
	private static glColorMaski_t p_glColorMaski;
	[CallingConvention(GL.CallConv)]
	public static void glColorMaski(uint32 index, bool r, bool g, bool b, bool a) => p_glColorMaski(index, r, g, b, a);

	private typealias glGetBooleani_v_t = function void(BufferTargetARB target, uint32 index, bool* data);
	private static glGetBooleani_v_t p_glGetBooleani_v;
	[CallingConvention(GL.CallConv)]
	public static void glGetBooleani_v(BufferTargetARB target, uint32 index, bool* data) => p_glGetBooleani_v(target, index, data);

	private typealias glGetIntegeri_v_t = function void(TypeEnum target, uint32 index, int32* data);
	private static glGetIntegeri_v_t p_glGetIntegeri_v;
	[CallingConvention(GL.CallConv)]
	public static void glGetIntegeri_v(TypeEnum target, uint32 index, int32* data) => p_glGetIntegeri_v(target, index, data);

	private typealias glEnablei_t = function void(EnableCap target, uint32 index);
	private static glEnablei_t p_glEnablei;
	[CallingConvention(GL.CallConv)]
	public static void glEnablei(EnableCap target, uint32 index) => p_glEnablei(target, index);

	private typealias glDisablei_t = function void(EnableCap target, uint32 index);
	private static glDisablei_t p_glDisablei;
	[CallingConvention(GL.CallConv)]
	public static void glDisablei(EnableCap target, uint32 index) => p_glDisablei(target, index);

	private typealias glIsEnabledi_t = function bool(EnableCap target, uint32 index);
	private static glIsEnabledi_t p_glIsEnabledi;
	[CallingConvention(GL.CallConv)]
	public static bool glIsEnabledi(EnableCap target, uint32 index) => p_glIsEnabledi(target, index);

	private typealias glBeginTransformFeedback_t = function void(PrimitiveType primitiveMode);
	private static glBeginTransformFeedback_t p_glBeginTransformFeedback;
	[CallingConvention(GL.CallConv)]
	public static void glBeginTransformFeedback(PrimitiveType primitiveMode) => p_glBeginTransformFeedback(primitiveMode);

	private typealias glEndTransformFeedback_t = function void();
	private static glEndTransformFeedback_t p_glEndTransformFeedback;
	[CallingConvention(GL.CallConv)]
	public static void glEndTransformFeedback() => p_glEndTransformFeedback();

	private typealias glBindBufferRange_t = function void(BufferTargetARB target, uint32 index, uint32 buffer, void* offset, int32 size);
	private static glBindBufferRange_t p_glBindBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferRange(BufferTargetARB target, uint32 index, uint32 buffer, void* offset, int32 size) => p_glBindBufferRange(target, index, buffer, offset, size);

	private typealias glBindBufferBase_t = function void(BufferTargetARB target, uint32 index, uint32 buffer);
	private static glBindBufferBase_t p_glBindBufferBase;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferBase(BufferTargetARB target, uint32 index, uint32 buffer) => p_glBindBufferBase(target, index, buffer);

	private typealias glTransformFeedbackVaryings_t = function void(uint32 program, int32 count, void* varyings, uint32 bufferMode);
	private static glTransformFeedbackVaryings_t p_glTransformFeedbackVaryings;
	[CallingConvention(GL.CallConv)]
	public static void glTransformFeedbackVaryings(uint32 program, int32 count, void* varyings, uint32 bufferMode) => p_glTransformFeedbackVaryings(program, count, varyings, bufferMode);

	private typealias glGetTransformFeedbackVarying_t = function void(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name);
	private static glGetTransformFeedbackVarying_t p_glGetTransformFeedbackVarying;
	[CallingConvention(GL.CallConv)]
	public static void glGetTransformFeedbackVarying(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name) => p_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);

	private typealias glClampColor_t = function void(uint32 target, uint32 clamp);
	private static glClampColor_t p_glClampColor;
	[CallingConvention(GL.CallConv)]
	public static void glClampColor(uint32 target, uint32 clamp) => p_glClampColor(target, clamp);

	private typealias glBeginConditionalRender_t = function void(uint32 id, TypeEnum mode);
	private static glBeginConditionalRender_t p_glBeginConditionalRender;
	[CallingConvention(GL.CallConv)]
	public static void glBeginConditionalRender(uint32 id, TypeEnum mode) => p_glBeginConditionalRender(id, mode);

	private typealias glEndConditionalRender_t = function void();
	private static glEndConditionalRender_t p_glEndConditionalRender;
	[CallingConvention(GL.CallConv)]
	public static void glEndConditionalRender() => p_glEndConditionalRender();

	private typealias glVertexAttribIPointer_t = function void(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer);
	private static glVertexAttribIPointer_t p_glVertexAttribIPointer;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribIPointer(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer) => p_glVertexAttribIPointer(index, size, type, stride, pointer);

	private typealias glGetVertexAttribIiv_t = function void(uint32 index, VertexAttribEnum pname, int32* @params);
	private static glGetVertexAttribIiv_t p_glGetVertexAttribIiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribIiv(uint32 index, VertexAttribEnum pname, int32* @params) => p_glGetVertexAttribIiv(index, pname, @params);

	private typealias glGetVertexAttribIuiv_t = function void(uint32 index, VertexAttribEnum pname, uint32* @params);
	private static glGetVertexAttribIuiv_t p_glGetVertexAttribIuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribIuiv(uint32 index, VertexAttribEnum pname, uint32* @params) => p_glGetVertexAttribIuiv(index, pname, @params);

	private typealias glVertexAttribI1i_t = function void(uint32 index, int32 x);
	private static glVertexAttribI1i_t p_glVertexAttribI1i;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1i(uint32 index, int32 x) => p_glVertexAttribI1i(index, x);

	private typealias glVertexAttribI2i_t = function void(uint32 index, int32 x, int32 y);
	private static glVertexAttribI2i_t p_glVertexAttribI2i;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2i(uint32 index, int32 x, int32 y) => p_glVertexAttribI2i(index, x, y);

	private typealias glVertexAttribI3i_t = function void(uint32 index, int32 x, int32 y, int32 z);
	private static glVertexAttribI3i_t p_glVertexAttribI3i;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3i(uint32 index, int32 x, int32 y, int32 z) => p_glVertexAttribI3i(index, x, y, z);

	private typealias glVertexAttribI4i_t = function void(uint32 index, int32 x, int32 y, int32 z, int32 w);
	private static glVertexAttribI4i_t p_glVertexAttribI4i;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4i(uint32 index, int32 x, int32 y, int32 z, int32 w) => p_glVertexAttribI4i(index, x, y, z, w);

	private typealias glVertexAttribI1ui_t = function void(uint32 index, uint32 x);
	private static glVertexAttribI1ui_t p_glVertexAttribI1ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1ui(uint32 index, uint32 x) => p_glVertexAttribI1ui(index, x);

	private typealias glVertexAttribI2ui_t = function void(uint32 index, uint32 x, uint32 y);
	private static glVertexAttribI2ui_t p_glVertexAttribI2ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2ui(uint32 index, uint32 x, uint32 y) => p_glVertexAttribI2ui(index, x, y);

	private typealias glVertexAttribI3ui_t = function void(uint32 index, uint32 x, uint32 y, uint32 z);
	private static glVertexAttribI3ui_t p_glVertexAttribI3ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3ui(uint32 index, uint32 x, uint32 y, uint32 z) => p_glVertexAttribI3ui(index, x, y, z);

	private typealias glVertexAttribI4ui_t = function void(uint32 index, uint32 x, uint32 y, uint32 z, uint32 w);
	private static glVertexAttribI4ui_t p_glVertexAttribI4ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4ui(uint32 index, uint32 x, uint32 y, uint32 z, uint32 w) => p_glVertexAttribI4ui(index, x, y, z, w);

	private typealias glVertexAttribI1iv_t = function void(uint32 index, int32* v);
	private static glVertexAttribI1iv_t p_glVertexAttribI1iv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1iv(uint32 index, int32* v) => p_glVertexAttribI1iv(index, v);

	private typealias glVertexAttribI2iv_t = function void(uint32 index, int32* v);
	private static glVertexAttribI2iv_t p_glVertexAttribI2iv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2iv(uint32 index, int32* v) => p_glVertexAttribI2iv(index, v);

	private typealias glVertexAttribI3iv_t = function void(uint32 index, int32* v);
	private static glVertexAttribI3iv_t p_glVertexAttribI3iv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3iv(uint32 index, int32* v) => p_glVertexAttribI3iv(index, v);

	private typealias glVertexAttribI4iv_t = function void(uint32 index, int32* v);
	private static glVertexAttribI4iv_t p_glVertexAttribI4iv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4iv(uint32 index, int32* v) => p_glVertexAttribI4iv(index, v);

	private typealias glVertexAttribI1uiv_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI1uiv_t p_glVertexAttribI1uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1uiv(uint32 index, uint32* v) => p_glVertexAttribI1uiv(index, v);

	private typealias glVertexAttribI2uiv_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI2uiv_t p_glVertexAttribI2uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2uiv(uint32 index, uint32* v) => p_glVertexAttribI2uiv(index, v);

	private typealias glVertexAttribI3uiv_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI3uiv_t p_glVertexAttribI3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3uiv(uint32 index, uint32* v) => p_glVertexAttribI3uiv(index, v);

	private typealias glVertexAttribI4uiv_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI4uiv_t p_glVertexAttribI4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4uiv(uint32 index, uint32* v) => p_glVertexAttribI4uiv(index, v);

	private typealias glVertexAttribI4bv_t = function void(uint32 index, uint8* v);
	private static glVertexAttribI4bv_t p_glVertexAttribI4bv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4bv(uint32 index, uint8* v) => p_glVertexAttribI4bv(index, v);

	private typealias glVertexAttribI4sv_t = function void(uint32 index, int16* v);
	private static glVertexAttribI4sv_t p_glVertexAttribI4sv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4sv(uint32 index, int16* v) => p_glVertexAttribI4sv(index, v);

	private typealias glVertexAttribI4ubv_t = function void(uint32 index, uint8* v);
	private static glVertexAttribI4ubv_t p_glVertexAttribI4ubv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4ubv(uint32 index, uint8* v) => p_glVertexAttribI4ubv(index, v);

	private typealias glVertexAttribI4usv_t = function void(uint32 index, int16* v);
	private static glVertexAttribI4usv_t p_glVertexAttribI4usv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4usv(uint32 index, int16* v) => p_glVertexAttribI4usv(index, v);

	private typealias glGetUniformuiv_t = function void(uint32 program, int32 location, uint32* @params);
	private static glGetUniformuiv_t p_glGetUniformuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformuiv(uint32 program, int32 location, uint32* @params) => p_glGetUniformuiv(program, location, @params);

	private typealias glBindFragDataLocation_t = function void(uint32 program, uint32 color, char8* name);
	private static glBindFragDataLocation_t p_glBindFragDataLocation;
	[CallingConvention(GL.CallConv)]
	public static void glBindFragDataLocation(uint32 program, uint32 color, char8* name) => p_glBindFragDataLocation(program, color, name);

	private typealias glGetFragDataLocation_t = function int32(uint32 program, char8* name);
	private static glGetFragDataLocation_t p_glGetFragDataLocation;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetFragDataLocation(uint32 program, char8* name) => p_glGetFragDataLocation(program, name);

	private typealias glUniform1ui_t = function void(int32 location, uint32 v0);
	private static glUniform1ui_t p_glUniform1ui;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1ui(int32 location, uint32 v0) => p_glUniform1ui(location, v0);

	private typealias glUniform2ui_t = function void(int32 location, uint32 v0, uint32 v1);
	private static glUniform2ui_t p_glUniform2ui;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2ui(int32 location, uint32 v0, uint32 v1) => p_glUniform2ui(location, v0, v1);

	private typealias glUniform3ui_t = function void(int32 location, uint32 v0, uint32 v1, uint32 v2);
	private static glUniform3ui_t p_glUniform3ui;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3ui(int32 location, uint32 v0, uint32 v1, uint32 v2) => p_glUniform3ui(location, v0, v1, v2);

	private typealias glUniform4ui_t = function void(int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3);
	private static glUniform4ui_t p_glUniform4ui;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4ui(int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3) => p_glUniform4ui(location, v0, v1, v2, v3);

	private typealias glUniform1uiv_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform1uiv_t p_glUniform1uiv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1uiv(int32 location, int32 count, uint32* value) => p_glUniform1uiv(location, count, value);

	private typealias glUniform2uiv_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform2uiv_t p_glUniform2uiv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2uiv(int32 location, int32 count, uint32* value) => p_glUniform2uiv(location, count, value);

	private typealias glUniform3uiv_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform3uiv_t p_glUniform3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3uiv(int32 location, int32 count, uint32* value) => p_glUniform3uiv(location, count, value);

	private typealias glUniform4uiv_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform4uiv_t p_glUniform4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4uiv(int32 location, int32 count, uint32* value) => p_glUniform4uiv(location, count, value);

	private typealias glTexParameterIiv_t = function void(TextureTarget target, TextureParameterName pname, int32* @params);
	private static glTexParameterIiv_t p_glTexParameterIiv;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterIiv(TextureTarget target, TextureParameterName pname, int32* @params) => p_glTexParameterIiv(target, pname, @params);

	private typealias glTexParameterIuiv_t = function void(TextureTarget target, TextureParameterName pname, uint32* @params);
	private static glTexParameterIuiv_t p_glTexParameterIuiv;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterIuiv(TextureTarget target, TextureParameterName pname, uint32* @params) => p_glTexParameterIuiv(target, pname, @params);

	private typealias glGetTexParameterIiv_t = function void(TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetTexParameterIiv_t p_glGetTexParameterIiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterIiv(TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetTexParameterIiv(target, pname, @params);

	private typealias glGetTexParameterIuiv_t = function void(TextureTarget target, GetTextureParameter pname, uint32* @params);
	private static glGetTexParameterIuiv_t p_glGetTexParameterIuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, uint32* @params) => p_glGetTexParameterIuiv(target, pname, @params);

	private typealias glClearBufferiv_t = function void(Buffer buffer, int32 drawbuffer, int32* value);
	private static glClearBufferiv_t p_glClearBufferiv;
	[CallingConvention(GL.CallConv)]
	public static void glClearBufferiv(Buffer buffer, int32 drawbuffer, int32* value) => p_glClearBufferiv(buffer, drawbuffer, value);

	private typealias glClearBufferuiv_t = function void(Buffer buffer, int32 drawbuffer, uint32* value);
	private static glClearBufferuiv_t p_glClearBufferuiv;
	[CallingConvention(GL.CallConv)]
	public static void glClearBufferuiv(Buffer buffer, int32 drawbuffer, uint32* value) => p_glClearBufferuiv(buffer, drawbuffer, value);

	private typealias glClearBufferfv_t = function void(Buffer buffer, int32 drawbuffer, float* value);
	private static glClearBufferfv_t p_glClearBufferfv;
	[CallingConvention(GL.CallConv)]
	public static void glClearBufferfv(Buffer buffer, int32 drawbuffer, float* value) => p_glClearBufferfv(buffer, drawbuffer, value);

	private typealias glClearBufferfi_t = function void(Buffer buffer, int32 drawbuffer, float depth, int32 stencil);
	private static glClearBufferfi_t p_glClearBufferfi;
	[CallingConvention(GL.CallConv)]
	public static void glClearBufferfi(Buffer buffer, int32 drawbuffer, float depth, int32 stencil) => p_glClearBufferfi(buffer, drawbuffer, depth, stencil);

	private typealias glGetStringi_t = function uint8*(StringName name, uint32 index);
	private static glGetStringi_t p_glGetStringi;
	[CallingConvention(GL.CallConv)]
	public static uint8* glGetStringi(StringName name, uint32 index) => p_glGetStringi(name, index);

	private typealias glIsRenderbuffer_t = function bool(uint32 renderbuffer);
	private static glIsRenderbuffer_t p_glIsRenderbuffer;
	[CallingConvention(GL.CallConv)]
	public static bool glIsRenderbuffer(uint32 renderbuffer) => p_glIsRenderbuffer(renderbuffer);

	private typealias glBindRenderbuffer_t = function void(RenderbufferTarget target, uint32 renderbuffer);
	private static glBindRenderbuffer_t p_glBindRenderbuffer;
	[CallingConvention(GL.CallConv)]
	public static void glBindRenderbuffer(RenderbufferTarget target, uint32 renderbuffer) => p_glBindRenderbuffer(target, renderbuffer);

	private typealias glDeleteRenderbuffers_t = function void(int32 n, uint32* renderbuffers);
	private static glDeleteRenderbuffers_t p_glDeleteRenderbuffers;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteRenderbuffers(int32 n, uint32* renderbuffers) => p_glDeleteRenderbuffers(n, renderbuffers);

	private typealias glGenRenderbuffers_t = function void(int32 n, uint32* renderbuffers);
	private static glGenRenderbuffers_t p_glGenRenderbuffers;
	[CallingConvention(GL.CallConv)]
	public static void glGenRenderbuffers(int32 n, uint32* renderbuffers) => p_glGenRenderbuffers(n, renderbuffers);

	private typealias glRenderbufferStorage_t = function void(RenderbufferTarget target, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorage_t p_glRenderbufferStorage;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorage(target, internalformat, width, height);

	private typealias glGetRenderbufferParameteriv_t = function void(RenderbufferTarget target, RenderbufferParameterName pname, int32* @params);
	private static glGetRenderbufferParameteriv_t p_glGetRenderbufferParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, int32* @params) => p_glGetRenderbufferParameteriv(target, pname, @params);

	private typealias glIsFramebuffer_t = function bool(uint32 framebuffer);
	private static glIsFramebuffer_t p_glIsFramebuffer;
	[CallingConvention(GL.CallConv)]
	public static bool glIsFramebuffer(uint32 framebuffer) => p_glIsFramebuffer(framebuffer);

	private typealias glBindFramebuffer_t = function void(FramebufferTarget target, uint32 framebuffer);
	private static glBindFramebuffer_t p_glBindFramebuffer;
	[CallingConvention(GL.CallConv)]
	public static void glBindFramebuffer(FramebufferTarget target, uint32 framebuffer) => p_glBindFramebuffer(target, framebuffer);

	private typealias glDeleteFramebuffers_t = function void(int32 n, uint32* framebuffers);
	private static glDeleteFramebuffers_t p_glDeleteFramebuffers;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteFramebuffers(int32 n, uint32* framebuffers) => p_glDeleteFramebuffers(n, framebuffers);

	private typealias glGenFramebuffers_t = function void(int32 n, uint32* framebuffers);
	private static glGenFramebuffers_t p_glGenFramebuffers;
	[CallingConvention(GL.CallConv)]
	public static void glGenFramebuffers(int32 n, uint32* framebuffers) => p_glGenFramebuffers(n, framebuffers);

	private typealias glCheckFramebufferStatus_t = function FramebufferStatus(FramebufferTarget target);
	private static glCheckFramebufferStatus_t p_glCheckFramebufferStatus;
	[CallingConvention(GL.CallConv)]
	public static FramebufferStatus glCheckFramebufferStatus(FramebufferTarget target) => p_glCheckFramebufferStatus(target);

	private typealias glFramebufferTexture1D_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level);
	private static glFramebufferTexture1D_t p_glFramebufferTexture1D;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level) => p_glFramebufferTexture1D(target, attachment, textarget, texture, level);

	private typealias glFramebufferTexture2D_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level);
	private static glFramebufferTexture2D_t p_glFramebufferTexture2D;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level) => p_glFramebufferTexture2D(target, attachment, textarget, texture, level);

	private typealias glFramebufferTexture3D_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset);
	private static glFramebufferTexture3D_t p_glFramebufferTexture3D;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset) => p_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);

	private typealias glFramebufferRenderbuffer_t = function void(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer);
	private static glFramebufferRenderbuffer_t p_glFramebufferRenderbuffer;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer) => p_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);

	private typealias glGetFramebufferAttachmentParameteriv_t = function void(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params);
	private static glGetFramebufferAttachmentParameteriv_t p_glGetFramebufferAttachmentParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params) => p_glGetFramebufferAttachmentParameteriv(target, attachment, pname, @params);

	private typealias glGenerateMipmap_t = function void(TextureTarget target);
	private static glGenerateMipmap_t p_glGenerateMipmap;
	[CallingConvention(GL.CallConv)]
	public static void glGenerateMipmap(TextureTarget target) => p_glGenerateMipmap(target);

	private typealias glBlitFramebuffer_t = function void(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter);
	private static glBlitFramebuffer_t p_glBlitFramebuffer;
	[CallingConvention(GL.CallConv)]
	public static void glBlitFramebuffer(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter) => p_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

	private typealias glRenderbufferStorageMultisample_t = function void(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisample_t p_glRenderbufferStorageMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisample(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);

	private typealias glFramebufferTextureLayer_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer);
	private static glFramebufferTextureLayer_t p_glFramebufferTextureLayer;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer) => p_glFramebufferTextureLayer(target, attachment, texture, level, layer);

	private typealias glMapBufferRange_t = function void*(BufferTargetARB target, void* offset, int32 length, uint32 access);
	private static glMapBufferRange_t p_glMapBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void* glMapBufferRange(BufferTargetARB target, void* offset, int32 length, uint32 access) => p_glMapBufferRange(target, offset, length, access);

	private typealias glFlushMappedBufferRange_t = function void(BufferTargetARB target, void* offset, int32 length);
	private static glFlushMappedBufferRange_t p_glFlushMappedBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void glFlushMappedBufferRange(BufferTargetARB target, void* offset, int32 length) => p_glFlushMappedBufferRange(target, offset, length);

	private typealias glBindVertexArray_t = function void(uint32 array);
	private static glBindVertexArray_t p_glBindVertexArray;
	[CallingConvention(GL.CallConv)]
	public static void glBindVertexArray(uint32 array) => p_glBindVertexArray(array);

	private typealias glDeleteVertexArrays_t = function void(int32 n, uint32* arrays);
	private static glDeleteVertexArrays_t p_glDeleteVertexArrays;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteVertexArrays(int32 n, uint32* arrays) => p_glDeleteVertexArrays(n, arrays);

	private typealias glGenVertexArrays_t = function void(int32 n, uint32* arrays);
	private static glGenVertexArrays_t p_glGenVertexArrays;
	[CallingConvention(GL.CallConv)]
	public static void glGenVertexArrays(int32 n, uint32* arrays) => p_glGenVertexArrays(n, arrays);

	private typealias glIsVertexArray_t = function bool(uint32 array);
	private static glIsVertexArray_t p_glIsVertexArray;
	[CallingConvention(GL.CallConv)]
	public static bool glIsVertexArray(uint32 array) => p_glIsVertexArray(array);

	private typealias glDrawArraysInstanced_t = function void(PrimitiveType mode, int32 first, int32 count, int32 instancecount);
	private static glDrawArraysInstanced_t p_glDrawArraysInstanced;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysInstanced(PrimitiveType mode, int32 first, int32 count, int32 instancecount) => p_glDrawArraysInstanced(mode, first, count, instancecount);

	private typealias glDrawElementsInstanced_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount);
	private static glDrawElementsInstanced_t p_glDrawElementsInstanced;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstanced(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount) => p_glDrawElementsInstanced(mode, count, type, indices, instancecount);

	private typealias glTexBuffer_t = function void(TextureTarget target, InternalFormat internalformat, uint32 buffer);
	private static glTexBuffer_t p_glTexBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glTexBuffer(TextureTarget target, InternalFormat internalformat, uint32 buffer) => p_glTexBuffer(target, internalformat, buffer);

	private typealias glPrimitiveRestartIndex_t = function void(uint32 index);
	private static glPrimitiveRestartIndex_t p_glPrimitiveRestartIndex;
	[CallingConvention(GL.CallConv)]
	public static void glPrimitiveRestartIndex(uint32 index) => p_glPrimitiveRestartIndex(index);

	private typealias glCopyBufferSubData_t = function void(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, void* readOffset, void* writeOffset, int32 size);
	private static glCopyBufferSubData_t p_glCopyBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glCopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, void* readOffset, void* writeOffset, int32 size) => p_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);

	private typealias glGetUniformIndices_t = function void(uint32 program, int32 uniformCount, void* uniformNames, uint32* uniformIndices);
	private static glGetUniformIndices_t p_glGetUniformIndices;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformIndices(uint32 program, int32 uniformCount, void* uniformNames, uint32* uniformIndices) => p_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);

	private typealias glGetActiveUniformsiv_t = function void(uint32 program, int32 uniformCount, uint32* uniformIndices, UniformPName pname, int32* @params);
	private static glGetActiveUniformsiv_t p_glGetActiveUniformsiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveUniformsiv(uint32 program, int32 uniformCount, uint32* uniformIndices, UniformPName pname, int32* @params) => p_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, @params);

	private typealias glGetActiveUniformName_t = function void(uint32 program, uint32 uniformIndex, int32 bufSize, int32* length, char8* uniformName);
	private static glGetActiveUniformName_t p_glGetActiveUniformName;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveUniformName(uint32 program, uint32 uniformIndex, int32 bufSize, int32* length, char8* uniformName) => p_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);

	private typealias glGetUniformBlockIndex_t = function uint32(uint32 program, char8* uniformBlockName);
	private static glGetUniformBlockIndex_t p_glGetUniformBlockIndex;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetUniformBlockIndex(uint32 program, char8* uniformBlockName) => p_glGetUniformBlockIndex(program, uniformBlockName);

	private typealias glGetActiveUniformBlockiv_t = function void(uint32 program, uint32 uniformBlockIndex, UniformBlockPName pname, int32* @params);
	private static glGetActiveUniformBlockiv_t p_glGetActiveUniformBlockiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveUniformBlockiv(uint32 program, uint32 uniformBlockIndex, UniformBlockPName pname, int32* @params) => p_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, @params);

	private typealias glGetActiveUniformBlockName_t = function void(uint32 program, uint32 uniformBlockIndex, int32 bufSize, int32* length, char8* uniformBlockName);
	private static glGetActiveUniformBlockName_t p_glGetActiveUniformBlockName;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveUniformBlockName(uint32 program, uint32 uniformBlockIndex, int32 bufSize, int32* length, char8* uniformBlockName) => p_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);

	private typealias glUniformBlockBinding_t = function void(uint32 program, uint32 uniformBlockIndex, uint32 uniformBlockBinding);
	private static glUniformBlockBinding_t p_glUniformBlockBinding;
	[CallingConvention(GL.CallConv)]
	public static void glUniformBlockBinding(uint32 program, uint32 uniformBlockIndex, uint32 uniformBlockBinding) => p_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);

	private typealias glDrawElementsBaseVertex_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 basevertex);
	private static glDrawElementsBaseVertex_t p_glDrawElementsBaseVertex;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsBaseVertex(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 basevertex) => p_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);

	private typealias glDrawRangeElementsBaseVertex_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices, int32 basevertex);
	private static glDrawRangeElementsBaseVertex_t p_glDrawRangeElementsBaseVertex;
	[CallingConvention(GL.CallConv)]
	public static void glDrawRangeElementsBaseVertex(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices, int32 basevertex) => p_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

	private typealias glDrawElementsInstancedBaseVertex_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex);
	private static glDrawElementsInstancedBaseVertex_t p_glDrawElementsInstancedBaseVertex;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedBaseVertex(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex) => p_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);

	private typealias glMultiDrawElementsBaseVertex_t = function void(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 drawcount, int32* basevertex);
	private static glMultiDrawElementsBaseVertex_t p_glMultiDrawElementsBaseVertex;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsBaseVertex(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 drawcount, int32* basevertex) => p_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

	private typealias glProvokingVertex_t = function void(VertexProvokingMode mode);
	private static glProvokingVertex_t p_glProvokingVertex;
	[CallingConvention(GL.CallConv)]
	public static void glProvokingVertex(VertexProvokingMode mode) => p_glProvokingVertex(mode);

	private typealias glFenceSync_t = function void*(SyncCondition condition, uint32 flags);
	private static glFenceSync_t p_glFenceSync;
	[CallingConvention(GL.CallConv)]
	public static void* glFenceSync(SyncCondition condition, uint32 flags) => p_glFenceSync(condition, flags);

	private typealias glIsSync_t = function bool(void* sync);
	private static glIsSync_t p_glIsSync;
	[CallingConvention(GL.CallConv)]
	public static bool glIsSync(void* sync) => p_glIsSync(sync);

	private typealias glDeleteSync_t = function void(void* sync);
	private static glDeleteSync_t p_glDeleteSync;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteSync(void* sync) => p_glDeleteSync(sync);

	private typealias glClientWaitSync_t = function SyncStatus(void* sync, uint32 flags, uint64 timeout);
	private static glClientWaitSync_t p_glClientWaitSync;
	[CallingConvention(GL.CallConv)]
	public static SyncStatus glClientWaitSync(void* sync, uint32 flags, uint64 timeout) => p_glClientWaitSync(sync, flags, timeout);

	private typealias glWaitSync_t = function void(void* sync, uint32 flags, uint64 timeout);
	private static glWaitSync_t p_glWaitSync;
	[CallingConvention(GL.CallConv)]
	public static void glWaitSync(void* sync, uint32 flags, uint64 timeout) => p_glWaitSync(sync, flags, timeout);

	private typealias glGetInteger64v_t = function void(GetPName pname, int64* data);
	private static glGetInteger64v_t p_glGetInteger64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetInteger64v(GetPName pname, int64* data) => p_glGetInteger64v(pname, data);

	private typealias glGetSynciv_t = function void(void* sync, SyncParameterName pname, int32 bufSize, int32* length, int32* values);
	private static glGetSynciv_t p_glGetSynciv;
	[CallingConvention(GL.CallConv)]
	public static void glGetSynciv(void* sync, SyncParameterName pname, int32 bufSize, int32* length, int32* values) => p_glGetSynciv(sync, pname, bufSize, length, values);

	private typealias glGetInteger64i_v_t = function void(TypeEnum target, uint32 index, int64* data);
	private static glGetInteger64i_v_t p_glGetInteger64i_v;
	[CallingConvention(GL.CallConv)]
	public static void glGetInteger64i_v(TypeEnum target, uint32 index, int64* data) => p_glGetInteger64i_v(target, index, data);

	private typealias glGetBufferParameteri64v_t = function void(BufferTargetARB target, uint32 pname, int64* @params);
	private static glGetBufferParameteri64v_t p_glGetBufferParameteri64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferParameteri64v(BufferTargetARB target, uint32 pname, int64* @params) => p_glGetBufferParameteri64v(target, pname, @params);

	private typealias glFramebufferTexture_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level);
	private static glFramebufferTexture_t p_glFramebufferTexture;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level) => p_glFramebufferTexture(target, attachment, texture, level);

	private typealias glTexImage2DMultisample_t = function void(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations);
	private static glTexImage2DMultisample_t p_glTexImage2DMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage2DMultisample(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations) => p_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);

	private typealias glTexImage3DMultisample_t = function void(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations);
	private static glTexImage3DMultisample_t p_glTexImage3DMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage3DMultisample(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations) => p_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);

	private typealias glGetMultisamplefv_t = function void(uint32 pname, uint32 index, float* val);
	private static glGetMultisamplefv_t p_glGetMultisamplefv;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultisamplefv(uint32 pname, uint32 index, float* val) => p_glGetMultisamplefv(pname, index, val);

	private typealias glSampleMaski_t = function void(uint32 maskNumber, uint32 mask);
	private static glSampleMaski_t p_glSampleMaski;
	[CallingConvention(GL.CallConv)]
	public static void glSampleMaski(uint32 maskNumber, uint32 mask) => p_glSampleMaski(maskNumber, mask);

	private typealias glBindFragDataLocationIndexed_t = function void(uint32 program, uint32 colorNumber, uint32 index, char8* name);
	private static glBindFragDataLocationIndexed_t p_glBindFragDataLocationIndexed;
	[CallingConvention(GL.CallConv)]
	public static void glBindFragDataLocationIndexed(uint32 program, uint32 colorNumber, uint32 index, char8* name) => p_glBindFragDataLocationIndexed(program, colorNumber, index, name);

	private typealias glGetFragDataIndex_t = function int32(uint32 program, char8* name);
	private static glGetFragDataIndex_t p_glGetFragDataIndex;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetFragDataIndex(uint32 program, char8* name) => p_glGetFragDataIndex(program, name);

	private typealias glGenSamplers_t = function void(int32 count, uint32* samplers);
	private static glGenSamplers_t p_glGenSamplers;
	[CallingConvention(GL.CallConv)]
	public static void glGenSamplers(int32 count, uint32* samplers) => p_glGenSamplers(count, samplers);

	private typealias glDeleteSamplers_t = function void(int32 count, uint32* samplers);
	private static glDeleteSamplers_t p_glDeleteSamplers;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteSamplers(int32 count, uint32* samplers) => p_glDeleteSamplers(count, samplers);

	private typealias glIsSampler_t = function bool(uint32 sampler);
	private static glIsSampler_t p_glIsSampler;
	[CallingConvention(GL.CallConv)]
	public static bool glIsSampler(uint32 sampler) => p_glIsSampler(sampler);

	private typealias glBindSampler_t = function void(uint32 unit, uint32 sampler);
	private static glBindSampler_t p_glBindSampler;
	[CallingConvention(GL.CallConv)]
	public static void glBindSampler(uint32 unit, uint32 sampler) => p_glBindSampler(unit, sampler);

	private typealias glSamplerParameteri_t = function void(uint32 sampler, SamplerParameterName pname, int32 param);
	private static glSamplerParameteri_t p_glSamplerParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameteri(uint32 sampler, SamplerParameterName pname, int32 param) => p_glSamplerParameteri(sampler, pname, param);

	private typealias glSamplerParameteriv_t = function void(uint32 sampler, SamplerParameterName pname, int32* param);
	private static glSamplerParameteriv_t p_glSamplerParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameteriv(uint32 sampler, SamplerParameterName pname, int32* param) => p_glSamplerParameteriv(sampler, pname, param);

	private typealias glSamplerParameterf_t = function void(uint32 sampler, SamplerParameterName pname, float param);
	private static glSamplerParameterf_t p_glSamplerParameterf;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterf(uint32 sampler, SamplerParameterName pname, float param) => p_glSamplerParameterf(sampler, pname, param);

	private typealias glSamplerParameterfv_t = function void(uint32 sampler, SamplerParameterName pname, float* param);
	private static glSamplerParameterfv_t p_glSamplerParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterfv(uint32 sampler, SamplerParameterName pname, float* param) => p_glSamplerParameterfv(sampler, pname, param);

	private typealias glSamplerParameterIiv_t = function void(uint32 sampler, SamplerParameterName pname, int32* param);
	private static glSamplerParameterIiv_t p_glSamplerParameterIiv;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterIiv(uint32 sampler, SamplerParameterName pname, int32* param) => p_glSamplerParameterIiv(sampler, pname, param);

	private typealias glSamplerParameterIuiv_t = function void(uint32 sampler, SamplerParameterName pname, uint32* param);
	private static glSamplerParameterIuiv_t p_glSamplerParameterIuiv;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterIuiv(uint32 sampler, SamplerParameterName pname, uint32* param) => p_glSamplerParameterIuiv(sampler, pname, param);

	private typealias glGetSamplerParameteriv_t = function void(uint32 sampler, SamplerParameterName pname, int32* @params);
	private static glGetSamplerParameteriv_t p_glGetSamplerParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameteriv(uint32 sampler, SamplerParameterName pname, int32* @params) => p_glGetSamplerParameteriv(sampler, pname, @params);

	private typealias glGetSamplerParameterIiv_t = function void(uint32 sampler, SamplerParameterName pname, int32* @params);
	private static glGetSamplerParameterIiv_t p_glGetSamplerParameterIiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameterIiv(uint32 sampler, SamplerParameterName pname, int32* @params) => p_glGetSamplerParameterIiv(sampler, pname, @params);

	private typealias glGetSamplerParameterfv_t = function void(uint32 sampler, SamplerParameterName pname, float* @params);
	private static glGetSamplerParameterfv_t p_glGetSamplerParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameterfv(uint32 sampler, SamplerParameterName pname, float* @params) => p_glGetSamplerParameterfv(sampler, pname, @params);

	private typealias glGetSamplerParameterIuiv_t = function void(uint32 sampler, SamplerParameterName pname, uint32* @params);
	private static glGetSamplerParameterIuiv_t p_glGetSamplerParameterIuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameterIuiv(uint32 sampler, SamplerParameterName pname, uint32* @params) => p_glGetSamplerParameterIuiv(sampler, pname, @params);

	private typealias glQueryCounter_t = function void(uint32 id, QueryCounterTarget target);
	private static glQueryCounter_t p_glQueryCounter;
	[CallingConvention(GL.CallConv)]
	public static void glQueryCounter(uint32 id, QueryCounterTarget target) => p_glQueryCounter(id, target);

	private typealias glGetQueryObjecti64v_t = function void(uint32 id, QueryObjectParameterName pname, int64* @params);
	private static glGetQueryObjecti64v_t p_glGetQueryObjecti64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjecti64v(uint32 id, QueryObjectParameterName pname, int64* @params) => p_glGetQueryObjecti64v(id, pname, @params);

	private typealias glGetQueryObjectui64v_t = function void(uint32 id, QueryObjectParameterName pname, uint64* @params);
	private static glGetQueryObjectui64v_t p_glGetQueryObjectui64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectui64v(uint32 id, QueryObjectParameterName pname, uint64* @params) => p_glGetQueryObjectui64v(id, pname, @params);

	private typealias glVertexAttribDivisor_t = function void(uint32 index, uint32 divisor);
	private static glVertexAttribDivisor_t p_glVertexAttribDivisor;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribDivisor(uint32 index, uint32 divisor) => p_glVertexAttribDivisor(index, divisor);

	private typealias glVertexAttribP1ui_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value);
	private static glVertexAttribP1ui_t p_glVertexAttribP1ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP1ui(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value) => p_glVertexAttribP1ui(index, type, normalized, value);

	private typealias glVertexAttribP1uiv_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value);
	private static glVertexAttribP1uiv_t p_glVertexAttribP1uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP1uiv(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value) => p_glVertexAttribP1uiv(index, type, normalized, value);

	private typealias glVertexAttribP2ui_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value);
	private static glVertexAttribP2ui_t p_glVertexAttribP2ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP2ui(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value) => p_glVertexAttribP2ui(index, type, normalized, value);

	private typealias glVertexAttribP2uiv_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value);
	private static glVertexAttribP2uiv_t p_glVertexAttribP2uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP2uiv(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value) => p_glVertexAttribP2uiv(index, type, normalized, value);

	private typealias glVertexAttribP3ui_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value);
	private static glVertexAttribP3ui_t p_glVertexAttribP3ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP3ui(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value) => p_glVertexAttribP3ui(index, type, normalized, value);

	private typealias glVertexAttribP3uiv_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value);
	private static glVertexAttribP3uiv_t p_glVertexAttribP3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP3uiv(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value) => p_glVertexAttribP3uiv(index, type, normalized, value);

	private typealias glVertexAttribP4ui_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value);
	private static glVertexAttribP4ui_t p_glVertexAttribP4ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP4ui(uint32 index, VertexAttribPointerType type, bool normalized, uint32 value) => p_glVertexAttribP4ui(index, type, normalized, value);

	private typealias glVertexAttribP4uiv_t = function void(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value);
	private static glVertexAttribP4uiv_t p_glVertexAttribP4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribP4uiv(uint32 index, VertexAttribPointerType type, bool normalized, uint32* value) => p_glVertexAttribP4uiv(index, type, normalized, value);

	private typealias glVertexP2ui_t = function void(VertexPointerType type, uint32 value);
	private static glVertexP2ui_t p_glVertexP2ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexP2ui(VertexPointerType type, uint32 value) => p_glVertexP2ui(type, value);

	private typealias glVertexP2uiv_t = function void(VertexPointerType type, uint32* value);
	private static glVertexP2uiv_t p_glVertexP2uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexP2uiv(VertexPointerType type, uint32* value) => p_glVertexP2uiv(type, value);

	private typealias glVertexP3ui_t = function void(VertexPointerType type, uint32 value);
	private static glVertexP3ui_t p_glVertexP3ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexP3ui(VertexPointerType type, uint32 value) => p_glVertexP3ui(type, value);

	private typealias glVertexP3uiv_t = function void(VertexPointerType type, uint32* value);
	private static glVertexP3uiv_t p_glVertexP3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexP3uiv(VertexPointerType type, uint32* value) => p_glVertexP3uiv(type, value);

	private typealias glVertexP4ui_t = function void(VertexPointerType type, uint32 value);
	private static glVertexP4ui_t p_glVertexP4ui;
	[CallingConvention(GL.CallConv)]
	public static void glVertexP4ui(VertexPointerType type, uint32 value) => p_glVertexP4ui(type, value);

	private typealias glVertexP4uiv_t = function void(VertexPointerType type, uint32* value);
	private static glVertexP4uiv_t p_glVertexP4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexP4uiv(VertexPointerType type, uint32* value) => p_glVertexP4uiv(type, value);

	private typealias glTexCoordP1ui_t = function void(TexCoordPointerType type, uint32 coords);
	private static glTexCoordP1ui_t p_glTexCoordP1ui;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP1ui(TexCoordPointerType type, uint32 coords) => p_glTexCoordP1ui(type, coords);

	private typealias glTexCoordP1uiv_t = function void(TexCoordPointerType type, uint32* coords);
	private static glTexCoordP1uiv_t p_glTexCoordP1uiv;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP1uiv(TexCoordPointerType type, uint32* coords) => p_glTexCoordP1uiv(type, coords);

	private typealias glTexCoordP2ui_t = function void(TexCoordPointerType type, uint32 coords);
	private static glTexCoordP2ui_t p_glTexCoordP2ui;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP2ui(TexCoordPointerType type, uint32 coords) => p_glTexCoordP2ui(type, coords);

	private typealias glTexCoordP2uiv_t = function void(TexCoordPointerType type, uint32* coords);
	private static glTexCoordP2uiv_t p_glTexCoordP2uiv;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP2uiv(TexCoordPointerType type, uint32* coords) => p_glTexCoordP2uiv(type, coords);

	private typealias glTexCoordP3ui_t = function void(TexCoordPointerType type, uint32 coords);
	private static glTexCoordP3ui_t p_glTexCoordP3ui;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP3ui(TexCoordPointerType type, uint32 coords) => p_glTexCoordP3ui(type, coords);

	private typealias glTexCoordP3uiv_t = function void(TexCoordPointerType type, uint32* coords);
	private static glTexCoordP3uiv_t p_glTexCoordP3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP3uiv(TexCoordPointerType type, uint32* coords) => p_glTexCoordP3uiv(type, coords);

	private typealias glTexCoordP4ui_t = function void(TexCoordPointerType type, uint32 coords);
	private static glTexCoordP4ui_t p_glTexCoordP4ui;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP4ui(TexCoordPointerType type, uint32 coords) => p_glTexCoordP4ui(type, coords);

	private typealias glTexCoordP4uiv_t = function void(TexCoordPointerType type, uint32* coords);
	private static glTexCoordP4uiv_t p_glTexCoordP4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordP4uiv(TexCoordPointerType type, uint32* coords) => p_glTexCoordP4uiv(type, coords);

	private typealias glMultiTexCoordP1ui_t = function void(TextureUnit texture, TexCoordPointerType type, uint32 coords);
	private static glMultiTexCoordP1ui_t p_glMultiTexCoordP1ui;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint32 coords) => p_glMultiTexCoordP1ui(texture, type, coords);

	private typealias glMultiTexCoordP1uiv_t = function void(TextureUnit texture, TexCoordPointerType type, uint32* coords);
	private static glMultiTexCoordP1uiv_t p_glMultiTexCoordP1uiv;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP1uiv(TextureUnit texture, TexCoordPointerType type, uint32* coords) => p_glMultiTexCoordP1uiv(texture, type, coords);

	private typealias glMultiTexCoordP2ui_t = function void(TextureUnit texture, TexCoordPointerType type, uint32 coords);
	private static glMultiTexCoordP2ui_t p_glMultiTexCoordP2ui;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint32 coords) => p_glMultiTexCoordP2ui(texture, type, coords);

	private typealias glMultiTexCoordP2uiv_t = function void(TextureUnit texture, TexCoordPointerType type, uint32* coords);
	private static glMultiTexCoordP2uiv_t p_glMultiTexCoordP2uiv;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP2uiv(TextureUnit texture, TexCoordPointerType type, uint32* coords) => p_glMultiTexCoordP2uiv(texture, type, coords);

	private typealias glMultiTexCoordP3ui_t = function void(TextureUnit texture, TexCoordPointerType type, uint32 coords);
	private static glMultiTexCoordP3ui_t p_glMultiTexCoordP3ui;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint32 coords) => p_glMultiTexCoordP3ui(texture, type, coords);

	private typealias glMultiTexCoordP3uiv_t = function void(TextureUnit texture, TexCoordPointerType type, uint32* coords);
	private static glMultiTexCoordP3uiv_t p_glMultiTexCoordP3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP3uiv(TextureUnit texture, TexCoordPointerType type, uint32* coords) => p_glMultiTexCoordP3uiv(texture, type, coords);

	private typealias glMultiTexCoordP4ui_t = function void(TextureUnit texture, TexCoordPointerType type, uint32 coords);
	private static glMultiTexCoordP4ui_t p_glMultiTexCoordP4ui;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint32 coords) => p_glMultiTexCoordP4ui(texture, type, coords);

	private typealias glMultiTexCoordP4uiv_t = function void(TextureUnit texture, TexCoordPointerType type, uint32* coords);
	private static glMultiTexCoordP4uiv_t p_glMultiTexCoordP4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordP4uiv(TextureUnit texture, TexCoordPointerType type, uint32* coords) => p_glMultiTexCoordP4uiv(texture, type, coords);

	private typealias glNormalP3ui_t = function void(NormalPointerType type, uint32 coords);
	private static glNormalP3ui_t p_glNormalP3ui;
	[CallingConvention(GL.CallConv)]
	public static void glNormalP3ui(NormalPointerType type, uint32 coords) => p_glNormalP3ui(type, coords);

	private typealias glNormalP3uiv_t = function void(NormalPointerType type, uint32* coords);
	private static glNormalP3uiv_t p_glNormalP3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glNormalP3uiv(NormalPointerType type, uint32* coords) => p_glNormalP3uiv(type, coords);

	private typealias glColorP3ui_t = function void(ColorPointerType type, uint32 color);
	private static glColorP3ui_t p_glColorP3ui;
	[CallingConvention(GL.CallConv)]
	public static void glColorP3ui(ColorPointerType type, uint32 color) => p_glColorP3ui(type, color);

	private typealias glColorP3uiv_t = function void(ColorPointerType type, uint32* color);
	private static glColorP3uiv_t p_glColorP3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glColorP3uiv(ColorPointerType type, uint32* color) => p_glColorP3uiv(type, color);

	private typealias glColorP4ui_t = function void(ColorPointerType type, uint32 color);
	private static glColorP4ui_t p_glColorP4ui;
	[CallingConvention(GL.CallConv)]
	public static void glColorP4ui(ColorPointerType type, uint32 color) => p_glColorP4ui(type, color);

	private typealias glColorP4uiv_t = function void(ColorPointerType type, uint32* color);
	private static glColorP4uiv_t p_glColorP4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glColorP4uiv(ColorPointerType type, uint32* color) => p_glColorP4uiv(type, color);

	private typealias glSecondaryColorP3ui_t = function void(ColorPointerType type, uint32 color);
	private static glSecondaryColorP3ui_t p_glSecondaryColorP3ui;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColorP3ui(ColorPointerType type, uint32 color) => p_glSecondaryColorP3ui(type, color);

	private typealias glSecondaryColorP3uiv_t = function void(ColorPointerType type, uint32* color);
	private static glSecondaryColorP3uiv_t p_glSecondaryColorP3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColorP3uiv(ColorPointerType type, uint32* color) => p_glSecondaryColorP3uiv(type, color);

	private typealias glMinSampleShading_t = function void(float value);
	private static glMinSampleShading_t p_glMinSampleShading;
	[CallingConvention(GL.CallConv)]
	public static void glMinSampleShading(float value) => p_glMinSampleShading(value);

	private typealias glBlendEquationi_t = function void(uint32 buf, BlendEquationModeEXT mode);
	private static glBlendEquationi_t p_glBlendEquationi;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationi(uint32 buf, BlendEquationModeEXT mode) => p_glBlendEquationi(buf, mode);

	private typealias glBlendEquationSeparatei_t = function void(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparatei_t p_glBlendEquationSeparatei;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparatei(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);

	private typealias glBlendFunci_t = function void(uint32 buf, BlendingFactor src, BlendingFactor dst);
	private static glBlendFunci_t p_glBlendFunci;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFunci(uint32 buf, BlendingFactor src, BlendingFactor dst) => p_glBlendFunci(buf, src, dst);

	private typealias glBlendFuncSeparatei_t = function void(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
	private static glBlendFuncSeparatei_t p_glBlendFuncSeparatei;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparatei(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) => p_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

	private typealias glDrawArraysIndirect_t = function void(PrimitiveType mode, void* indirect);
	private static glDrawArraysIndirect_t p_glDrawArraysIndirect;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysIndirect(PrimitiveType mode, void* indirect) => p_glDrawArraysIndirect(mode, indirect);

	private typealias glDrawElementsIndirect_t = function void(PrimitiveType mode, DrawElementsType type, void* indirect);
	private static glDrawElementsIndirect_t p_glDrawElementsIndirect;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, void* indirect) => p_glDrawElementsIndirect(mode, type, indirect);

	private typealias glUniform1d_t = function void(int32 location, double x);
	private static glUniform1d_t p_glUniform1d;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1d(int32 location, double x) => p_glUniform1d(location, x);

	private typealias glUniform2d_t = function void(int32 location, double x, double y);
	private static glUniform2d_t p_glUniform2d;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2d(int32 location, double x, double y) => p_glUniform2d(location, x, y);

	private typealias glUniform3d_t = function void(int32 location, double x, double y, double z);
	private static glUniform3d_t p_glUniform3d;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3d(int32 location, double x, double y, double z) => p_glUniform3d(location, x, y, z);

	private typealias glUniform4d_t = function void(int32 location, double x, double y, double z, double w);
	private static glUniform4d_t p_glUniform4d;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4d(int32 location, double x, double y, double z, double w) => p_glUniform4d(location, x, y, z, w);

	private typealias glUniform1dv_t = function void(int32 location, int32 count, double* value);
	private static glUniform1dv_t p_glUniform1dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1dv(int32 location, int32 count, double* value) => p_glUniform1dv(location, count, value);

	private typealias glUniform2dv_t = function void(int32 location, int32 count, double* value);
	private static glUniform2dv_t p_glUniform2dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2dv(int32 location, int32 count, double* value) => p_glUniform2dv(location, count, value);

	private typealias glUniform3dv_t = function void(int32 location, int32 count, double* value);
	private static glUniform3dv_t p_glUniform3dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3dv(int32 location, int32 count, double* value) => p_glUniform3dv(location, count, value);

	private typealias glUniform4dv_t = function void(int32 location, int32 count, double* value);
	private static glUniform4dv_t p_glUniform4dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4dv(int32 location, int32 count, double* value) => p_glUniform4dv(location, count, value);

	private typealias glUniformMatrix2dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix2dv_t p_glUniformMatrix2dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix2dv(location, count, transpose, value);

	private typealias glUniformMatrix3dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix3dv_t p_glUniformMatrix3dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix3dv(location, count, transpose, value);

	private typealias glUniformMatrix4dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix4dv_t p_glUniformMatrix4dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix4dv(location, count, transpose, value);

	private typealias glUniformMatrix2x3dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix2x3dv_t p_glUniformMatrix2x3dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2x3dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix2x3dv(location, count, transpose, value);

	private typealias glUniformMatrix2x4dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix2x4dv_t p_glUniformMatrix2x4dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2x4dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix2x4dv(location, count, transpose, value);

	private typealias glUniformMatrix3x2dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix3x2dv_t p_glUniformMatrix3x2dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3x2dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix3x2dv(location, count, transpose, value);

	private typealias glUniformMatrix3x4dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix3x4dv_t p_glUniformMatrix3x4dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3x4dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix3x4dv(location, count, transpose, value);

	private typealias glUniformMatrix4x2dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix4x2dv_t p_glUniformMatrix4x2dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4x2dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix4x2dv(location, count, transpose, value);

	private typealias glUniformMatrix4x3dv_t = function void(int32 location, int32 count, bool transpose, double* value);
	private static glUniformMatrix4x3dv_t p_glUniformMatrix4x3dv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4x3dv(int32 location, int32 count, bool transpose, double* value) => p_glUniformMatrix4x3dv(location, count, transpose, value);

	private typealias glGetUniformdv_t = function void(uint32 program, int32 location, double* @params);
	private static glGetUniformdv_t p_glGetUniformdv;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformdv(uint32 program, int32 location, double* @params) => p_glGetUniformdv(program, location, @params);

	private typealias glGetSubroutineUniformLocation_t = function int32(uint32 program, ShaderType shadertype, char8* name);
	private static glGetSubroutineUniformLocation_t p_glGetSubroutineUniformLocation;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetSubroutineUniformLocation(uint32 program, ShaderType shadertype, char8* name) => p_glGetSubroutineUniformLocation(program, shadertype, name);

	private typealias glGetSubroutineIndex_t = function uint32(uint32 program, ShaderType shadertype, char8* name);
	private static glGetSubroutineIndex_t p_glGetSubroutineIndex;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetSubroutineIndex(uint32 program, ShaderType shadertype, char8* name) => p_glGetSubroutineIndex(program, shadertype, name);

	private typealias glGetActiveSubroutineUniformiv_t = function void(uint32 program, ShaderType shadertype, uint32 index, SubroutineParameterName pname, int32* values);
	private static glGetActiveSubroutineUniformiv_t p_glGetActiveSubroutineUniformiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveSubroutineUniformiv(uint32 program, ShaderType shadertype, uint32 index, SubroutineParameterName pname, int32* values) => p_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);

	private typealias glGetActiveSubroutineUniformName_t = function void(uint32 program, ShaderType shadertype, uint32 index, int32 bufsize, int32* length, char8* name);
	private static glGetActiveSubroutineUniformName_t p_glGetActiveSubroutineUniformName;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveSubroutineUniformName(uint32 program, ShaderType shadertype, uint32 index, int32 bufsize, int32* length, char8* name) => p_glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);

	private typealias glGetActiveSubroutineName_t = function void(uint32 program, ShaderType shadertype, uint32 index, int32 bufsize, int32* length, char8* name);
	private static glGetActiveSubroutineName_t p_glGetActiveSubroutineName;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveSubroutineName(uint32 program, ShaderType shadertype, uint32 index, int32 bufsize, int32* length, char8* name) => p_glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);

	private typealias glUniformSubroutinesuiv_t = function void(ShaderType shadertype, int32 count, uint32* indices);
	private static glUniformSubroutinesuiv_t p_glUniformSubroutinesuiv;
	[CallingConvention(GL.CallConv)]
	public static void glUniformSubroutinesuiv(ShaderType shadertype, int32 count, uint32* indices) => p_glUniformSubroutinesuiv(shadertype, count, indices);

	private typealias glGetUniformSubroutineuiv_t = function void(ShaderType shadertype, int32 location, uint32* @params);
	private static glGetUniformSubroutineuiv_t p_glGetUniformSubroutineuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformSubroutineuiv(ShaderType shadertype, int32 location, uint32* @params) => p_glGetUniformSubroutineuiv(shadertype, location, @params);

	private typealias glGetProgramStageiv_t = function void(uint32 program, ShaderType shadertype, ProgramStagePName pname, int32* values);
	private static glGetProgramStageiv_t p_glGetProgramStageiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramStageiv(uint32 program, ShaderType shadertype, ProgramStagePName pname, int32* values) => p_glGetProgramStageiv(program, shadertype, pname, values);

	private typealias glPatchParameteri_t = function void(PatchParameterName pname, int32 value);
	private static glPatchParameteri_t p_glPatchParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glPatchParameteri(PatchParameterName pname, int32 value) => p_glPatchParameteri(pname, value);

	private typealias glPatchParameterfv_t = function void(PatchParameterName pname, float* values);
	private static glPatchParameterfv_t p_glPatchParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glPatchParameterfv(PatchParameterName pname, float* values) => p_glPatchParameterfv(pname, values);

	private typealias glBindTransformFeedback_t = function void(BindTransformFeedbackTarget target, uint32 id);
	private static glBindTransformFeedback_t p_glBindTransformFeedback;
	[CallingConvention(GL.CallConv)]
	public static void glBindTransformFeedback(BindTransformFeedbackTarget target, uint32 id) => p_glBindTransformFeedback(target, id);

	private typealias glDeleteTransformFeedbacks_t = function void(int32 n, uint32* ids);
	private static glDeleteTransformFeedbacks_t p_glDeleteTransformFeedbacks;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteTransformFeedbacks(int32 n, uint32* ids) => p_glDeleteTransformFeedbacks(n, ids);

	private typealias glGenTransformFeedbacks_t = function void(int32 n, uint32* ids);
	private static glGenTransformFeedbacks_t p_glGenTransformFeedbacks;
	[CallingConvention(GL.CallConv)]
	public static void glGenTransformFeedbacks(int32 n, uint32* ids) => p_glGenTransformFeedbacks(n, ids);

	private typealias glIsTransformFeedback_t = function bool(uint32 id);
	private static glIsTransformFeedback_t p_glIsTransformFeedback;
	[CallingConvention(GL.CallConv)]
	public static bool glIsTransformFeedback(uint32 id) => p_glIsTransformFeedback(id);

	private typealias glPauseTransformFeedback_t = function void();
	private static glPauseTransformFeedback_t p_glPauseTransformFeedback;
	[CallingConvention(GL.CallConv)]
	public static void glPauseTransformFeedback() => p_glPauseTransformFeedback();

	private typealias glResumeTransformFeedback_t = function void();
	private static glResumeTransformFeedback_t p_glResumeTransformFeedback;
	[CallingConvention(GL.CallConv)]
	public static void glResumeTransformFeedback() => p_glResumeTransformFeedback();

	private typealias glDrawTransformFeedback_t = function void(PrimitiveType mode, uint32 id);
	private static glDrawTransformFeedback_t p_glDrawTransformFeedback;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTransformFeedback(PrimitiveType mode, uint32 id) => p_glDrawTransformFeedback(mode, id);

	private typealias glDrawTransformFeedbackStream_t = function void(PrimitiveType mode, uint32 id, uint32 stream);
	private static glDrawTransformFeedbackStream_t p_glDrawTransformFeedbackStream;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTransformFeedbackStream(PrimitiveType mode, uint32 id, uint32 stream) => p_glDrawTransformFeedbackStream(mode, id, stream);

	private typealias glBeginQueryIndexed_t = function void(QueryTarget target, uint32 index, uint32 id);
	private static glBeginQueryIndexed_t p_glBeginQueryIndexed;
	[CallingConvention(GL.CallConv)]
	public static void glBeginQueryIndexed(QueryTarget target, uint32 index, uint32 id) => p_glBeginQueryIndexed(target, index, id);

	private typealias glEndQueryIndexed_t = function void(QueryTarget target, uint32 index);
	private static glEndQueryIndexed_t p_glEndQueryIndexed;
	[CallingConvention(GL.CallConv)]
	public static void glEndQueryIndexed(QueryTarget target, uint32 index) => p_glEndQueryIndexed(target, index);

	private typealias glGetQueryIndexediv_t = function void(uint32 target, uint32 index, QueryParameterName pname, int32* @params);
	private static glGetQueryIndexediv_t p_glGetQueryIndexediv;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryIndexediv(uint32 target, uint32 index, QueryParameterName pname, int32* @params) => p_glGetQueryIndexediv(target, index, pname, @params);

	private typealias glReleaseShaderCompiler_t = function void();
	private static glReleaseShaderCompiler_t p_glReleaseShaderCompiler;
	[CallingConvention(GL.CallConv)]
	public static void glReleaseShaderCompiler() => p_glReleaseShaderCompiler();

	private typealias glShaderBinary_t = function void(int32 count, uint32* shaders, uint32 binaryformat, void* binary, int32 length);
	private static glShaderBinary_t p_glShaderBinary;
	[CallingConvention(GL.CallConv)]
	public static void glShaderBinary(int32 count, uint32* shaders, uint32 binaryformat, void* binary, int32 length) => p_glShaderBinary(count, shaders, binaryformat, binary, length);

	private typealias glGetShaderPrecisionFormat_t = function void(ShaderType shadertype, PrecisionType precisiontype, int32* range, int32* precision);
	private static glGetShaderPrecisionFormat_t p_glGetShaderPrecisionFormat;
	[CallingConvention(GL.CallConv)]
	public static void glGetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int32* range, int32* precision) => p_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);

	private typealias glDepthRangef_t = function void(float n, float f);
	private static glDepthRangef_t p_glDepthRangef;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangef(float n, float f) => p_glDepthRangef(n, f);

	private typealias glClearDepthf_t = function void(float d);
	private static glClearDepthf_t p_glClearDepthf;
	[CallingConvention(GL.CallConv)]
	public static void glClearDepthf(float d) => p_glClearDepthf(d);

	private typealias glGetProgramBinary_t = function void(uint32 program, int32 bufSize, int32* length, uint32* binaryFormat, void* binary);
	private static glGetProgramBinary_t p_glGetProgramBinary;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramBinary(uint32 program, int32 bufSize, int32* length, uint32* binaryFormat, void* binary) => p_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);

	private typealias glProgramBinary_t = function void(uint32 program, uint32 binaryFormat, void* binary, int32 length);
	private static glProgramBinary_t p_glProgramBinary;
	[CallingConvention(GL.CallConv)]
	public static void glProgramBinary(uint32 program, uint32 binaryFormat, void* binary, int32 length) => p_glProgramBinary(program, binaryFormat, binary, length);

	private typealias glProgramParameteri_t = function void(uint32 program, ProgramParameterPName pname, int32 value);
	private static glProgramParameteri_t p_glProgramParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameteri(uint32 program, ProgramParameterPName pname, int32 value) => p_glProgramParameteri(program, pname, value);

	private typealias glUseProgramStages_t = function void(uint32 pipeline, uint32 stages, uint32 program);
	private static glUseProgramStages_t p_glUseProgramStages;
	[CallingConvention(GL.CallConv)]
	public static void glUseProgramStages(uint32 pipeline, uint32 stages, uint32 program) => p_glUseProgramStages(pipeline, stages, program);

	private typealias glActiveShaderProgram_t = function void(uint32 pipeline, uint32 program);
	private static glActiveShaderProgram_t p_glActiveShaderProgram;
	[CallingConvention(GL.CallConv)]
	public static void glActiveShaderProgram(uint32 pipeline, uint32 program) => p_glActiveShaderProgram(pipeline, program);

	private typealias glCreateShaderProgramv_t = function uint32(ShaderType type, int32 count, void* strings);
	private static glCreateShaderProgramv_t p_glCreateShaderProgramv;
	[CallingConvention(GL.CallConv)]
	public static uint32 glCreateShaderProgramv(ShaderType type, int32 count, void* strings) => p_glCreateShaderProgramv(type, count, strings);

	private typealias glBindProgramPipeline_t = function void(uint32 pipeline);
	private static glBindProgramPipeline_t p_glBindProgramPipeline;
	[CallingConvention(GL.CallConv)]
	public static void glBindProgramPipeline(uint32 pipeline) => p_glBindProgramPipeline(pipeline);

	private typealias glDeleteProgramPipelines_t = function void(int32 n, uint32* pipelines);
	private static glDeleteProgramPipelines_t p_glDeleteProgramPipelines;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteProgramPipelines(int32 n, uint32* pipelines) => p_glDeleteProgramPipelines(n, pipelines);

	private typealias glGenProgramPipelines_t = function void(int32 n, uint32* pipelines);
	private static glGenProgramPipelines_t p_glGenProgramPipelines;
	[CallingConvention(GL.CallConv)]
	public static void glGenProgramPipelines(int32 n, uint32* pipelines) => p_glGenProgramPipelines(n, pipelines);

	private typealias glIsProgramPipeline_t = function bool(uint32 pipeline);
	private static glIsProgramPipeline_t p_glIsProgramPipeline;
	[CallingConvention(GL.CallConv)]
	public static bool glIsProgramPipeline(uint32 pipeline) => p_glIsProgramPipeline(pipeline);

	private typealias glGetProgramPipelineiv_t = function void(uint32 pipeline, PipelineParameterName pname, int32* @params);
	private static glGetProgramPipelineiv_t p_glGetProgramPipelineiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramPipelineiv(uint32 pipeline, PipelineParameterName pname, int32* @params) => p_glGetProgramPipelineiv(pipeline, pname, @params);

	private typealias glProgramUniform1i_t = function void(uint32 program, int32 location, int32 v0);
	private static glProgramUniform1i_t p_glProgramUniform1i;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1i(uint32 program, int32 location, int32 v0) => p_glProgramUniform1i(program, location, v0);

	private typealias glProgramUniform1iv_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform1iv_t p_glProgramUniform1iv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1iv(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform1iv(program, location, count, value);

	private typealias glProgramUniform1f_t = function void(uint32 program, int32 location, float v0);
	private static glProgramUniform1f_t p_glProgramUniform1f;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1f(uint32 program, int32 location, float v0) => p_glProgramUniform1f(program, location, v0);

	private typealias glProgramUniform1fv_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform1fv_t p_glProgramUniform1fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1fv(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform1fv(program, location, count, value);

	private typealias glProgramUniform1d_t = function void(uint32 program, int32 location, double v0);
	private static glProgramUniform1d_t p_glProgramUniform1d;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1d(uint32 program, int32 location, double v0) => p_glProgramUniform1d(program, location, v0);

	private typealias glProgramUniform1dv_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform1dv_t p_glProgramUniform1dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1dv(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform1dv(program, location, count, value);

	private typealias glProgramUniform1ui_t = function void(uint32 program, int32 location, uint32 v0);
	private static glProgramUniform1ui_t p_glProgramUniform1ui;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1ui(uint32 program, int32 location, uint32 v0) => p_glProgramUniform1ui(program, location, v0);

	private typealias glProgramUniform1uiv_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform1uiv_t p_glProgramUniform1uiv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1uiv(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform1uiv(program, location, count, value);

	private typealias glProgramUniform2i_t = function void(uint32 program, int32 location, int32 v0, int32 v1);
	private static glProgramUniform2i_t p_glProgramUniform2i;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2i(uint32 program, int32 location, int32 v0, int32 v1) => p_glProgramUniform2i(program, location, v0, v1);

	private typealias glProgramUniform2iv_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform2iv_t p_glProgramUniform2iv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2iv(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform2iv(program, location, count, value);

	private typealias glProgramUniform2f_t = function void(uint32 program, int32 location, float v0, float v1);
	private static glProgramUniform2f_t p_glProgramUniform2f;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2f(uint32 program, int32 location, float v0, float v1) => p_glProgramUniform2f(program, location, v0, v1);

	private typealias glProgramUniform2fv_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform2fv_t p_glProgramUniform2fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2fv(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform2fv(program, location, count, value);

	private typealias glProgramUniform2d_t = function void(uint32 program, int32 location, double v0, double v1);
	private static glProgramUniform2d_t p_glProgramUniform2d;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2d(uint32 program, int32 location, double v0, double v1) => p_glProgramUniform2d(program, location, v0, v1);

	private typealias glProgramUniform2dv_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform2dv_t p_glProgramUniform2dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2dv(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform2dv(program, location, count, value);

	private typealias glProgramUniform2ui_t = function void(uint32 program, int32 location, uint32 v0, uint32 v1);
	private static glProgramUniform2ui_t p_glProgramUniform2ui;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2ui(uint32 program, int32 location, uint32 v0, uint32 v1) => p_glProgramUniform2ui(program, location, v0, v1);

	private typealias glProgramUniform2uiv_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform2uiv_t p_glProgramUniform2uiv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2uiv(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform2uiv(program, location, count, value);

	private typealias glProgramUniform3i_t = function void(uint32 program, int32 location, int32 v0, int32 v1, int32 v2);
	private static glProgramUniform3i_t p_glProgramUniform3i;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3i(uint32 program, int32 location, int32 v0, int32 v1, int32 v2) => p_glProgramUniform3i(program, location, v0, v1, v2);

	private typealias glProgramUniform3iv_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform3iv_t p_glProgramUniform3iv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3iv(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform3iv(program, location, count, value);

	private typealias glProgramUniform3f_t = function void(uint32 program, int32 location, float v0, float v1, float v2);
	private static glProgramUniform3f_t p_glProgramUniform3f;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3f(uint32 program, int32 location, float v0, float v1, float v2) => p_glProgramUniform3f(program, location, v0, v1, v2);

	private typealias glProgramUniform3fv_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform3fv_t p_glProgramUniform3fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3fv(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform3fv(program, location, count, value);

	private typealias glProgramUniform3d_t = function void(uint32 program, int32 location, double v0, double v1, double v2);
	private static glProgramUniform3d_t p_glProgramUniform3d;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3d(uint32 program, int32 location, double v0, double v1, double v2) => p_glProgramUniform3d(program, location, v0, v1, v2);

	private typealias glProgramUniform3dv_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform3dv_t p_glProgramUniform3dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3dv(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform3dv(program, location, count, value);

	private typealias glProgramUniform3ui_t = function void(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2);
	private static glProgramUniform3ui_t p_glProgramUniform3ui;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3ui(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2) => p_glProgramUniform3ui(program, location, v0, v1, v2);

	private typealias glProgramUniform3uiv_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform3uiv_t p_glProgramUniform3uiv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3uiv(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform3uiv(program, location, count, value);

	private typealias glProgramUniform4i_t = function void(uint32 program, int32 location, int32 v0, int32 v1, int32 v2, int32 v3);
	private static glProgramUniform4i_t p_glProgramUniform4i;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4i(uint32 program, int32 location, int32 v0, int32 v1, int32 v2, int32 v3) => p_glProgramUniform4i(program, location, v0, v1, v2, v3);

	private typealias glProgramUniform4iv_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform4iv_t p_glProgramUniform4iv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4iv(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform4iv(program, location, count, value);

	private typealias glProgramUniform4f_t = function void(uint32 program, int32 location, float v0, float v1, float v2, float v3);
	private static glProgramUniform4f_t p_glProgramUniform4f;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4f(uint32 program, int32 location, float v0, float v1, float v2, float v3) => p_glProgramUniform4f(program, location, v0, v1, v2, v3);

	private typealias glProgramUniform4fv_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform4fv_t p_glProgramUniform4fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4fv(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform4fv(program, location, count, value);

	private typealias glProgramUniform4d_t = function void(uint32 program, int32 location, double v0, double v1, double v2, double v3);
	private static glProgramUniform4d_t p_glProgramUniform4d;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4d(uint32 program, int32 location, double v0, double v1, double v2, double v3) => p_glProgramUniform4d(program, location, v0, v1, v2, v3);

	private typealias glProgramUniform4dv_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform4dv_t p_glProgramUniform4dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4dv(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform4dv(program, location, count, value);

	private typealias glProgramUniform4ui_t = function void(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3);
	private static glProgramUniform4ui_t p_glProgramUniform4ui;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4ui(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3) => p_glProgramUniform4ui(program, location, v0, v1, v2, v3);

	private typealias glProgramUniform4uiv_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform4uiv_t p_glProgramUniform4uiv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4uiv(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform4uiv(program, location, count, value);

	private typealias glProgramUniformMatrix2fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix2fv_t p_glProgramUniformMatrix2fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix2fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix3fv_t p_glProgramUniformMatrix3fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix3fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix4fv_t p_glProgramUniformMatrix4fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix4fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix2dv_t p_glProgramUniformMatrix2dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix2dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix3dv_t p_glProgramUniformMatrix3dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix3dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix4dv_t p_glProgramUniformMatrix4dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix4dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x3fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix2x3fv_t p_glProgramUniformMatrix2x3fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x3fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x2fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix3x2fv_t p_glProgramUniformMatrix3x2fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x2fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x4fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix2x4fv_t p_glProgramUniformMatrix2x4fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x4fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x2fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix4x2fv_t p_glProgramUniformMatrix4x2fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x2fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x4fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix3x4fv_t p_glProgramUniformMatrix3x4fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x4fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x3fv_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix4x3fv_t p_glProgramUniformMatrix4x3fv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x3fv(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x3dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix2x3dv_t p_glProgramUniformMatrix2x3dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x3dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x2dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix3x2dv_t p_glProgramUniformMatrix3x2dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x2dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x4dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix2x4dv_t p_glProgramUniformMatrix2x4dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x4dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x2dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix4x2dv_t p_glProgramUniformMatrix4x2dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x2dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x4dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix3x4dv_t p_glProgramUniformMatrix3x4dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x4dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x3dv_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix4x3dv_t p_glProgramUniformMatrix4x3dv;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x3dv(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);

	private typealias glValidateProgramPipeline_t = function void(uint32 pipeline);
	private static glValidateProgramPipeline_t p_glValidateProgramPipeline;
	[CallingConvention(GL.CallConv)]
	public static void glValidateProgramPipeline(uint32 pipeline) => p_glValidateProgramPipeline(pipeline);

	private typealias glGetProgramPipelineInfoLog_t = function void(uint32 pipeline, int32 bufSize, int32* length, char8* infoLog);
	private static glGetProgramPipelineInfoLog_t p_glGetProgramPipelineInfoLog;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramPipelineInfoLog(uint32 pipeline, int32 bufSize, int32* length, char8* infoLog) => p_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);

	private typealias glVertexAttribL1d_t = function void(uint32 index, double x);
	private static glVertexAttribL1d_t p_glVertexAttribL1d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1d(uint32 index, double x) => p_glVertexAttribL1d(index, x);

	private typealias glVertexAttribL2d_t = function void(uint32 index, double x, double y);
	private static glVertexAttribL2d_t p_glVertexAttribL2d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2d(uint32 index, double x, double y) => p_glVertexAttribL2d(index, x, y);

	private typealias glVertexAttribL3d_t = function void(uint32 index, double x, double y, double z);
	private static glVertexAttribL3d_t p_glVertexAttribL3d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3d(uint32 index, double x, double y, double z) => p_glVertexAttribL3d(index, x, y, z);

	private typealias glVertexAttribL4d_t = function void(uint32 index, double x, double y, double z, double w);
	private static glVertexAttribL4d_t p_glVertexAttribL4d;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4d(uint32 index, double x, double y, double z, double w) => p_glVertexAttribL4d(index, x, y, z, w);

	private typealias glVertexAttribL1dv_t = function void(uint32 index, double* v);
	private static glVertexAttribL1dv_t p_glVertexAttribL1dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1dv(uint32 index, double* v) => p_glVertexAttribL1dv(index, v);

	private typealias glVertexAttribL2dv_t = function void(uint32 index, double* v);
	private static glVertexAttribL2dv_t p_glVertexAttribL2dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2dv(uint32 index, double* v) => p_glVertexAttribL2dv(index, v);

	private typealias glVertexAttribL3dv_t = function void(uint32 index, double* v);
	private static glVertexAttribL3dv_t p_glVertexAttribL3dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3dv(uint32 index, double* v) => p_glVertexAttribL3dv(index, v);

	private typealias glVertexAttribL4dv_t = function void(uint32 index, double* v);
	private static glVertexAttribL4dv_t p_glVertexAttribL4dv;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4dv(uint32 index, double* v) => p_glVertexAttribL4dv(index, v);

	private typealias glVertexAttribLPointer_t = function void(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer);
	private static glVertexAttribLPointer_t p_glVertexAttribLPointer;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribLPointer(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer) => p_glVertexAttribLPointer(index, size, type, stride, pointer);

	private typealias glGetVertexAttribLdv_t = function void(uint32 index, VertexAttribEnum pname, double* @params);
	private static glGetVertexAttribLdv_t p_glGetVertexAttribLdv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribLdv(uint32 index, VertexAttribEnum pname, double* @params) => p_glGetVertexAttribLdv(index, pname, @params);

	private typealias glViewportArrayv_t = function void(uint32 first, int32 count, float* v);
	private static glViewportArrayv_t p_glViewportArrayv;
	[CallingConvention(GL.CallConv)]
	public static void glViewportArrayv(uint32 first, int32 count, float* v) => p_glViewportArrayv(first, count, v);

	private typealias glViewportIndexedf_t = function void(uint32 index, float x, float y, float w, float h);
	private static glViewportIndexedf_t p_glViewportIndexedf;
	[CallingConvention(GL.CallConv)]
	public static void glViewportIndexedf(uint32 index, float x, float y, float w, float h) => p_glViewportIndexedf(index, x, y, w, h);

	private typealias glViewportIndexedfv_t = function void(uint32 index, float* v);
	private static glViewportIndexedfv_t p_glViewportIndexedfv;
	[CallingConvention(GL.CallConv)]
	public static void glViewportIndexedfv(uint32 index, float* v) => p_glViewportIndexedfv(index, v);

	private typealias glScissorArrayv_t = function void(uint32 first, int32 count, int32* v);
	private static glScissorArrayv_t p_glScissorArrayv;
	[CallingConvention(GL.CallConv)]
	public static void glScissorArrayv(uint32 first, int32 count, int32* v) => p_glScissorArrayv(first, count, v);

	private typealias glScissorIndexed_t = function void(uint32 index, int32 left, int32 bottom, int32 width, int32 height);
	private static glScissorIndexed_t p_glScissorIndexed;
	[CallingConvention(GL.CallConv)]
	public static void glScissorIndexed(uint32 index, int32 left, int32 bottom, int32 width, int32 height) => p_glScissorIndexed(index, left, bottom, width, height);

	private typealias glScissorIndexedv_t = function void(uint32 index, int32* v);
	private static glScissorIndexedv_t p_glScissorIndexedv;
	[CallingConvention(GL.CallConv)]
	public static void glScissorIndexedv(uint32 index, int32* v) => p_glScissorIndexedv(index, v);

	private typealias glDepthRangeArrayv_t = function void(uint32 first, int32 count, double* v);
	private static glDepthRangeArrayv_t p_glDepthRangeArrayv;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangeArrayv(uint32 first, int32 count, double* v) => p_glDepthRangeArrayv(first, count, v);

	private typealias glDepthRangeIndexed_t = function void(uint32 index, double n, double f);
	private static glDepthRangeIndexed_t p_glDepthRangeIndexed;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangeIndexed(uint32 index, double n, double f) => p_glDepthRangeIndexed(index, n, f);

	private typealias glGetFloati_v_t = function void(TypeEnum target, uint32 index, float* data);
	private static glGetFloati_v_t p_glGetFloati_v;
	[CallingConvention(GL.CallConv)]
	public static void glGetFloati_v(TypeEnum target, uint32 index, float* data) => p_glGetFloati_v(target, index, data);

	private typealias glGetDoublei_v_t = function void(TypeEnum target, uint32 index, double* data);
	private static glGetDoublei_v_t p_glGetDoublei_v;
	[CallingConvention(GL.CallConv)]
	public static void glGetDoublei_v(TypeEnum target, uint32 index, double* data) => p_glGetDoublei_v(target, index, data);

	private typealias glDrawArraysInstancedBaseInstance_t = function void(PrimitiveType mode, int32 first, int32 count, int32 instancecount, uint32 baseinstance);
	private static glDrawArraysInstancedBaseInstance_t p_glDrawArraysInstancedBaseInstance;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysInstancedBaseInstance(PrimitiveType mode, int32 first, int32 count, int32 instancecount, uint32 baseinstance) => p_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);

	private typealias glDrawElementsInstancedBaseInstance_t = function void(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 instancecount, uint32 baseinstance);
	private static glDrawElementsInstancedBaseInstance_t p_glDrawElementsInstancedBaseInstance;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedBaseInstance(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 instancecount, uint32 baseinstance) => p_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

	private typealias glDrawElementsInstancedBaseVertexBaseInstance_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex, uint32 baseinstance);
	private static glDrawElementsInstancedBaseVertexBaseInstance_t p_glDrawElementsInstancedBaseVertexBaseInstance;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex, uint32 baseinstance) => p_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

	private typealias glGetInternalformativ_t = function void(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int32 bufSize, int32* @params);
	private static glGetInternalformativ_t p_glGetInternalformativ;
	[CallingConvention(GL.CallConv)]
	public static void glGetInternalformativ(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int32 bufSize, int32* @params) => p_glGetInternalformativ(target, internalformat, pname, bufSize, @params);

	private typealias glGetActiveAtomicCounterBufferiv_t = function void(uint32 program, uint32 bufferIndex, AtomicCounterBufferPName pname, int32* @params);
	private static glGetActiveAtomicCounterBufferiv_t p_glGetActiveAtomicCounterBufferiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveAtomicCounterBufferiv(uint32 program, uint32 bufferIndex, AtomicCounterBufferPName pname, int32* @params) => p_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, @params);

	private typealias glBindImageTexture_t = function void(uint32 unit, uint32 texture, int32 level, bool layered, int32 layer, BufferAccessARB access, InternalFormat format);
	private static glBindImageTexture_t p_glBindImageTexture;
	[CallingConvention(GL.CallConv)]
	public static void glBindImageTexture(uint32 unit, uint32 texture, int32 level, bool layered, int32 layer, BufferAccessARB access, InternalFormat format) => p_glBindImageTexture(unit, texture, level, layered, layer, access, format);

	private typealias glMemoryBarrier_t = function void(uint32 barriers);
	private static glMemoryBarrier_t p_glMemoryBarrier;
	[CallingConvention(GL.CallConv)]
	public static void glMemoryBarrier(uint32 barriers) => p_glMemoryBarrier(barriers);

	private typealias glTexStorage1D_t = function void(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width);
	private static glTexStorage1D_t p_glTexStorage1D;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage1D(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width) => p_glTexStorage1D(target, levels, internalformat, width);

	private typealias glTexStorage2D_t = function void(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height);
	private static glTexStorage2D_t p_glTexStorage2D;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage2D(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height) => p_glTexStorage2D(target, levels, internalformat, width, height);

	private typealias glTexStorage3D_t = function void(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth);
	private static glTexStorage3D_t p_glTexStorage3D;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage3D(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth) => p_glTexStorage3D(target, levels, internalformat, width, height, depth);

	private typealias glDrawTransformFeedbackInstanced_t = function void(PrimitiveType mode, uint32 id, int32 instancecount);
	private static glDrawTransformFeedbackInstanced_t p_glDrawTransformFeedbackInstanced;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTransformFeedbackInstanced(PrimitiveType mode, uint32 id, int32 instancecount) => p_glDrawTransformFeedbackInstanced(mode, id, instancecount);

	private typealias glDrawTransformFeedbackStreamInstanced_t = function void(PrimitiveType mode, uint32 id, uint32 stream, int32 instancecount);
	private static glDrawTransformFeedbackStreamInstanced_t p_glDrawTransformFeedbackStreamInstanced;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint32 id, uint32 stream, int32 instancecount) => p_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);

	private typealias glClearBufferData_t = function void(BufferStorageTarget target, InternalFormat internalformat, PixelFormat format, PixelType type, void* data);
	private static glClearBufferData_t p_glClearBufferData;
	[CallingConvention(GL.CallConv)]
	public static void glClearBufferData(BufferStorageTarget target, InternalFormat internalformat, PixelFormat format, PixelType type, void* data) => p_glClearBufferData(target, internalformat, format, type, data);

	private typealias glClearBufferSubData_t = function void(uint32 target, InternalFormat internalformat, void* offset, int32 size, PixelFormat format, PixelType type, void* data);
	private static glClearBufferSubData_t p_glClearBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glClearBufferSubData(uint32 target, InternalFormat internalformat, void* offset, int32 size, PixelFormat format, PixelType type, void* data) => p_glClearBufferSubData(target, internalformat, offset, size, format, type, data);

	private typealias glDispatchCompute_t = function void(uint32 num_groups_x, uint32 num_groups_y, uint32 num_groups_z);
	private static glDispatchCompute_t p_glDispatchCompute;
	[CallingConvention(GL.CallConv)]
	public static void glDispatchCompute(uint32 num_groups_x, uint32 num_groups_y, uint32 num_groups_z) => p_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);

	private typealias glDispatchComputeIndirect_t = function void(void* indirect);
	private static glDispatchComputeIndirect_t p_glDispatchComputeIndirect;
	[CallingConvention(GL.CallConv)]
	public static void glDispatchComputeIndirect(void* indirect) => p_glDispatchComputeIndirect(indirect);

	private typealias glCopyImageSubData_t = function void(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth);
	private static glCopyImageSubData_t p_glCopyImageSubData;
	[CallingConvention(GL.CallConv)]
	public static void glCopyImageSubData(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth) => p_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

	private typealias glFramebufferParameteri_t = function void(FramebufferTarget target, FramebufferParameterName pname, int32 param);
	private static glFramebufferParameteri_t p_glFramebufferParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferParameteri(FramebufferTarget target, FramebufferParameterName pname, int32 param) => p_glFramebufferParameteri(target, pname, param);

	private typealias glGetFramebufferParameteriv_t = function void(FramebufferTarget target, FramebufferAttachmentParameterName pname, int32* @params);
	private static glGetFramebufferParameteriv_t p_glGetFramebufferParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, int32* @params) => p_glGetFramebufferParameteriv(target, pname, @params);

	private typealias glGetInternalformati64v_t = function void(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int32 bufSize, int64* @params);
	private static glGetInternalformati64v_t p_glGetInternalformati64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetInternalformati64v(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int32 bufSize, int64* @params) => p_glGetInternalformati64v(target, internalformat, pname, bufSize, @params);

	private typealias glInvalidateTexSubImage_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth);
	private static glInvalidateTexSubImage_t p_glInvalidateTexSubImage;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateTexSubImage(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth) => p_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);

	private typealias glInvalidateTexImage_t = function void(uint32 texture, int32 level);
	private static glInvalidateTexImage_t p_glInvalidateTexImage;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateTexImage(uint32 texture, int32 level) => p_glInvalidateTexImage(texture, level);

	private typealias glInvalidateBufferSubData_t = function void(uint32 buffer, void* offset, int32 length);
	private static glInvalidateBufferSubData_t p_glInvalidateBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateBufferSubData(uint32 buffer, void* offset, int32 length) => p_glInvalidateBufferSubData(buffer, offset, length);

	private typealias glInvalidateBufferData_t = function void(uint32 buffer);
	private static glInvalidateBufferData_t p_glInvalidateBufferData;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateBufferData(uint32 buffer) => p_glInvalidateBufferData(buffer);

	private typealias glInvalidateFramebuffer_t = function void(FramebufferTarget target, int32 numAttachments, uint32* attachments);
	private static glInvalidateFramebuffer_t p_glInvalidateFramebuffer;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateFramebuffer(FramebufferTarget target, int32 numAttachments, uint32* attachments) => p_glInvalidateFramebuffer(target, numAttachments, attachments);

	private typealias glInvalidateSubFramebuffer_t = function void(uint32 target, int32 numAttachments, uint32* attachments, int32 x, int32 y, int32 width, int32 height);
	private static glInvalidateSubFramebuffer_t p_glInvalidateSubFramebuffer;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateSubFramebuffer(uint32 target, int32 numAttachments, uint32* attachments, int32 x, int32 y, int32 width, int32 height) => p_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);

	private typealias glMultiDrawArraysIndirect_t = function void(PrimitiveType mode, void* indirect, int32 drawcount, int32 stride);
	private static glMultiDrawArraysIndirect_t p_glMultiDrawArraysIndirect;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysIndirect(PrimitiveType mode, void* indirect, int32 drawcount, int32 stride) => p_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);

	private typealias glMultiDrawElementsIndirect_t = function void(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawcount, int32 stride);
	private static glMultiDrawElementsIndirect_t p_glMultiDrawElementsIndirect;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawcount, int32 stride) => p_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);

	private typealias glGetProgramInterfaceiv_t = function void(uint32 program, ProgramInterface programInterface, ProgramInterfacePName pname, int32* @params);
	private static glGetProgramInterfaceiv_t p_glGetProgramInterfaceiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramInterfaceiv(uint32 program, ProgramInterface programInterface, ProgramInterfacePName pname, int32* @params) => p_glGetProgramInterfaceiv(program, programInterface, pname, @params);

	private typealias glGetProgramResourceIndex_t = function uint32(uint32 program, ProgramInterface programInterface, char8* name);
	private static glGetProgramResourceIndex_t p_glGetProgramResourceIndex;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetProgramResourceIndex(uint32 program, ProgramInterface programInterface, char8* name) => p_glGetProgramResourceIndex(program, programInterface, name);

	private typealias glGetProgramResourceName_t = function void(uint32 program, ProgramInterface programInterface, uint32 index, int32 bufSize, int32* length, char8* name);
	private static glGetProgramResourceName_t p_glGetProgramResourceName;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramResourceName(uint32 program, ProgramInterface programInterface, uint32 index, int32 bufSize, int32* length, char8* name) => p_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);

	private typealias glGetProgramResourceiv_t = function void(uint32 program, ProgramInterface programInterface, uint32 index, int32 propCount, uint32* props, int32 bufSize, int32* length, int32* @params);
	private static glGetProgramResourceiv_t p_glGetProgramResourceiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramResourceiv(uint32 program, ProgramInterface programInterface, uint32 index, int32 propCount, uint32* props, int32 bufSize, int32* length, int32* @params) => p_glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, @params);

	private typealias glGetProgramResourceLocation_t = function int32(uint32 program, ProgramInterface programInterface, char8* name);
	private static glGetProgramResourceLocation_t p_glGetProgramResourceLocation;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetProgramResourceLocation(uint32 program, ProgramInterface programInterface, char8* name) => p_glGetProgramResourceLocation(program, programInterface, name);

	private typealias glGetProgramResourceLocationIndex_t = function int32(uint32 program, ProgramInterface programInterface, char8* name);
	private static glGetProgramResourceLocationIndex_t p_glGetProgramResourceLocationIndex;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetProgramResourceLocationIndex(uint32 program, ProgramInterface programInterface, char8* name) => p_glGetProgramResourceLocationIndex(program, programInterface, name);

	private typealias glShaderStorageBlockBinding_t = function void(uint32 program, uint32 storageBlockIndex, uint32 storageBlockBinding);
	private static glShaderStorageBlockBinding_t p_glShaderStorageBlockBinding;
	[CallingConvention(GL.CallConv)]
	public static void glShaderStorageBlockBinding(uint32 program, uint32 storageBlockIndex, uint32 storageBlockBinding) => p_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);

	private typealias glTexBufferRange_t = function void(TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size);
	private static glTexBufferRange_t p_glTexBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void glTexBufferRange(TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size) => p_glTexBufferRange(target, internalformat, buffer, offset, size);

	private typealias glTexStorage2DMultisample_t = function void(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations);
	private static glTexStorage2DMultisample_t p_glTexStorage2DMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage2DMultisample(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations) => p_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);

	private typealias glTexStorage3DMultisample_t = function void(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations);
	private static glTexStorage3DMultisample_t p_glTexStorage3DMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage3DMultisample(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations) => p_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);

	private typealias glTextureView_t = function void(uint32 texture, TextureTarget target, uint32 origtexture, InternalFormat internalformat, uint32 minlevel, uint32 numlevels, uint32 minlayer, uint32 numlayers);
	private static glTextureView_t p_glTextureView;
	[CallingConvention(GL.CallConv)]
	public static void glTextureView(uint32 texture, TextureTarget target, uint32 origtexture, InternalFormat internalformat, uint32 minlevel, uint32 numlevels, uint32 minlayer, uint32 numlayers) => p_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

	private typealias glBindVertexBuffer_t = function void(uint32 bindingindex, uint32 buffer, void* offset, int32 stride);
	private static glBindVertexBuffer_t p_glBindVertexBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glBindVertexBuffer(uint32 bindingindex, uint32 buffer, void* offset, int32 stride) => p_glBindVertexBuffer(bindingindex, buffer, offset, stride);

	private typealias glVertexAttribFormat_t = function void(uint32 attribindex, int32 size, uint32 type, bool normalized, uint32 relativeoffset);
	private static glVertexAttribFormat_t p_glVertexAttribFormat;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribFormat(uint32 attribindex, int32 size, uint32 type, bool normalized, uint32 relativeoffset) => p_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);

	private typealias glVertexAttribIFormat_t = function void(uint32 attribindex, int32 size, uint32 type, uint32 relativeoffset);
	private static glVertexAttribIFormat_t p_glVertexAttribIFormat;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribIFormat(uint32 attribindex, int32 size, uint32 type, uint32 relativeoffset) => p_glVertexAttribIFormat(attribindex, size, type, relativeoffset);

	private typealias glVertexAttribLFormat_t = function void(uint32 attribindex, int32 size, VertexAttribType type, uint32 relativeoffset);
	private static glVertexAttribLFormat_t p_glVertexAttribLFormat;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribLFormat(uint32 attribindex, int32 size, VertexAttribType type, uint32 relativeoffset) => p_glVertexAttribLFormat(attribindex, size, type, relativeoffset);

	private typealias glVertexAttribBinding_t = function void(uint32 attribindex, uint32 bindingindex);
	private static glVertexAttribBinding_t p_glVertexAttribBinding;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribBinding(uint32 attribindex, uint32 bindingindex) => p_glVertexAttribBinding(attribindex, bindingindex);

	private typealias glVertexBindingDivisor_t = function void(uint32 bindingindex, uint32 divisor);
	private static glVertexBindingDivisor_t p_glVertexBindingDivisor;
	[CallingConvention(GL.CallConv)]
	public static void glVertexBindingDivisor(uint32 bindingindex, uint32 divisor) => p_glVertexBindingDivisor(bindingindex, divisor);

	private typealias glDebugMessageControl_t = function void(DebugSource source, DebugType type, DebugSeverity severity, int32 count, uint32* ids, bool enabled);
	private static glDebugMessageControl_t p_glDebugMessageControl;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int32 count, uint32* ids, bool enabled) => p_glDebugMessageControl(source, type, severity, count, ids, enabled);

	private typealias glDebugMessageInsert_t = function void(DebugSource source, DebugType type, uint32 id, DebugSeverity severity, int32 length, char8* buf);
	private static glDebugMessageInsert_t p_glDebugMessageInsert;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageInsert(DebugSource source, DebugType type, uint32 id, DebugSeverity severity, int32 length, char8* buf) => p_glDebugMessageInsert(source, type, id, severity, length, buf);

	private typealias glDebugMessageCallback_t = function void(void* callback, void* userParam);
	private static glDebugMessageCallback_t p_glDebugMessageCallback;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageCallback(void* callback, void* userParam) => p_glDebugMessageCallback(callback, userParam);

	private typealias glGetDebugMessageLog_t = function uint32(uint32 count, int32 bufSize, uint32* sources, uint32* types, uint32* ids, uint32* severities, int32* lengths, char8* messageLog);
	private static glGetDebugMessageLog_t p_glGetDebugMessageLog;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetDebugMessageLog(uint32 count, int32 bufSize, uint32* sources, uint32* types, uint32* ids, uint32* severities, int32* lengths, char8* messageLog) => p_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);

	private typealias glPushDebugGroup_t = function void(DebugSource source, uint32 id, int32 length, char8* message);
	private static glPushDebugGroup_t p_glPushDebugGroup;
	[CallingConvention(GL.CallConv)]
	public static void glPushDebugGroup(DebugSource source, uint32 id, int32 length, char8* message) => p_glPushDebugGroup(source, id, length, message);

	private typealias glPopDebugGroup_t = function void();
	private static glPopDebugGroup_t p_glPopDebugGroup;
	[CallingConvention(GL.CallConv)]
	public static void glPopDebugGroup() => p_glPopDebugGroup();

	private typealias glObjectLabel_t = function void(ObjectIdentifier identifier, uint32 name, int32 length, char8* label);
	private static glObjectLabel_t p_glObjectLabel;
	[CallingConvention(GL.CallConv)]
	public static void glObjectLabel(ObjectIdentifier identifier, uint32 name, int32 length, char8* label) => p_glObjectLabel(identifier, name, length, label);

	private typealias glGetObjectLabel_t = function void(uint32 identifier, uint32 name, int32 bufSize, int32* length, char8* label);
	private static glGetObjectLabel_t p_glGetObjectLabel;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectLabel(uint32 identifier, uint32 name, int32 bufSize, int32* length, char8* label) => p_glGetObjectLabel(identifier, name, bufSize, length, label);

	private typealias glObjectPtrLabel_t = function void(void* ptr, int32 length, char8* label);
	private static glObjectPtrLabel_t p_glObjectPtrLabel;
	[CallingConvention(GL.CallConv)]
	public static void glObjectPtrLabel(void* ptr, int32 length, char8* label) => p_glObjectPtrLabel(ptr, length, label);

	private typealias glGetObjectPtrLabel_t = function void(void* ptr, int32 bufSize, int32* length, char8* label);
	private static glGetObjectPtrLabel_t p_glGetObjectPtrLabel;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectPtrLabel(void* ptr, int32 bufSize, int32* length, char8* label) => p_glGetObjectPtrLabel(ptr, bufSize, length, label);

	private typealias glGetPointerv_t = function void(GetPointervPName pname, void** @params);
	private static glGetPointerv_t p_glGetPointerv;
	[CallingConvention(GL.CallConv)]
	public static void glGetPointerv(GetPointervPName pname, void** @params) => p_glGetPointerv(pname, @params);

	private typealias glBufferStorage_t = function void(BufferStorageTarget target, int32 size, void* data, uint32 flags);
	private static glBufferStorage_t p_glBufferStorage;
	[CallingConvention(GL.CallConv)]
	public static void glBufferStorage(BufferStorageTarget target, int32 size, void* data, uint32 flags) => p_glBufferStorage(target, size, data, flags);

	private typealias glClearTexImage_t = function void(uint32 texture, int32 level, PixelFormat format, PixelType type, void* data);
	private static glClearTexImage_t p_glClearTexImage;
	[CallingConvention(GL.CallConv)]
	public static void glClearTexImage(uint32 texture, int32 level, PixelFormat format, PixelType type, void* data) => p_glClearTexImage(texture, level, format, type, data);

	private typealias glClearTexSubImage_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* data);
	private static glClearTexSubImage_t p_glClearTexSubImage;
	[CallingConvention(GL.CallConv)]
	public static void glClearTexSubImage(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* data) => p_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

	private typealias glBindBuffersBase_t = function void(BufferTargetARB target, uint32 first, int32 count, uint32* buffers);
	private static glBindBuffersBase_t p_glBindBuffersBase;
	[CallingConvention(GL.CallConv)]
	public static void glBindBuffersBase(BufferTargetARB target, uint32 first, int32 count, uint32* buffers) => p_glBindBuffersBase(target, first, count, buffers);

	private typealias glBindBuffersRange_t = function void(BufferTargetARB target, uint32 first, int32 count, uint32* buffers, void* offsets, int32* sizes);
	private static glBindBuffersRange_t p_glBindBuffersRange;
	[CallingConvention(GL.CallConv)]
	public static void glBindBuffersRange(BufferTargetARB target, uint32 first, int32 count, uint32* buffers, void* offsets, int32* sizes) => p_glBindBuffersRange(target, first, count, buffers, offsets, sizes);

	private typealias glBindTextures_t = function void(uint32 first, int32 count, uint32* textures);
	private static glBindTextures_t p_glBindTextures;
	[CallingConvention(GL.CallConv)]
	public static void glBindTextures(uint32 first, int32 count, uint32* textures) => p_glBindTextures(first, count, textures);

	private typealias glBindSamplers_t = function void(uint32 first, int32 count, uint32* samplers);
	private static glBindSamplers_t p_glBindSamplers;
	[CallingConvention(GL.CallConv)]
	public static void glBindSamplers(uint32 first, int32 count, uint32* samplers) => p_glBindSamplers(first, count, samplers);

	private typealias glBindImageTextures_t = function void(uint32 first, int32 count, uint32* textures);
	private static glBindImageTextures_t p_glBindImageTextures;
	[CallingConvention(GL.CallConv)]
	public static void glBindImageTextures(uint32 first, int32 count, uint32* textures) => p_glBindImageTextures(first, count, textures);

	private typealias glBindVertexBuffers_t = function void(uint32 first, int32 count, uint32* buffers, void* offsets, int32* strides);
	private static glBindVertexBuffers_t p_glBindVertexBuffers;
	[CallingConvention(GL.CallConv)]
	public static void glBindVertexBuffers(uint32 first, int32 count, uint32* buffers, void* offsets, int32* strides) => p_glBindVertexBuffers(first, count, buffers, offsets, strides);

	private typealias glClipControl_t = function void(ClipControlOrigin origin, ClipControlDepth depth);
	private static glClipControl_t p_glClipControl;
	[CallingConvention(GL.CallConv)]
	public static void glClipControl(ClipControlOrigin origin, ClipControlDepth depth) => p_glClipControl(origin, depth);

	private typealias glCreateTransformFeedbacks_t = function void(int32 n, uint32* ids);
	private static glCreateTransformFeedbacks_t p_glCreateTransformFeedbacks;
	[CallingConvention(GL.CallConv)]
	public static void glCreateTransformFeedbacks(int32 n, uint32* ids) => p_glCreateTransformFeedbacks(n, ids);

	private typealias glTransformFeedbackBufferBase_t = function void(uint32 xfb, uint32 index, uint32 buffer);
	private static glTransformFeedbackBufferBase_t p_glTransformFeedbackBufferBase;
	[CallingConvention(GL.CallConv)]
	public static void glTransformFeedbackBufferBase(uint32 xfb, uint32 index, uint32 buffer) => p_glTransformFeedbackBufferBase(xfb, index, buffer);

	private typealias glTransformFeedbackBufferRange_t = function void(uint32 xfb, uint32 index, uint32 buffer, void* offset, int32 size);
	private static glTransformFeedbackBufferRange_t p_glTransformFeedbackBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void glTransformFeedbackBufferRange(uint32 xfb, uint32 index, uint32 buffer, void* offset, int32 size) => p_glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);

	private typealias glGetTransformFeedbackiv_t = function void(uint32 xfb, TransformFeedbackPName pname, int32* param);
	private static glGetTransformFeedbackiv_t p_glGetTransformFeedbackiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTransformFeedbackiv(uint32 xfb, TransformFeedbackPName pname, int32* param) => p_glGetTransformFeedbackiv(xfb, pname, param);

	private typealias glGetTransformFeedbacki_v_t = function void(uint32 xfb, TransformFeedbackPName pname, uint32 index, int32* param);
	private static glGetTransformFeedbacki_v_t p_glGetTransformFeedbacki_v;
	[CallingConvention(GL.CallConv)]
	public static void glGetTransformFeedbacki_v(uint32 xfb, TransformFeedbackPName pname, uint32 index, int32* param) => p_glGetTransformFeedbacki_v(xfb, pname, index, param);

	private typealias glGetTransformFeedbacki64_v_t = function void(uint32 xfb, TransformFeedbackPName pname, uint32 index, int64* param);
	private static glGetTransformFeedbacki64_v_t p_glGetTransformFeedbacki64_v;
	[CallingConvention(GL.CallConv)]
	public static void glGetTransformFeedbacki64_v(uint32 xfb, TransformFeedbackPName pname, uint32 index, int64* param) => p_glGetTransformFeedbacki64_v(xfb, pname, index, param);

	private typealias glCreateBuffers_t = function void(int32 n, uint32* buffers);
	private static glCreateBuffers_t p_glCreateBuffers;
	[CallingConvention(GL.CallConv)]
	public static void glCreateBuffers(int32 n, uint32* buffers) => p_glCreateBuffers(n, buffers);

	private typealias glNamedBufferStorage_t = function void(uint32 buffer, int32 size, void* data, uint32 flags);
	private static glNamedBufferStorage_t p_glNamedBufferStorage;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferStorage(uint32 buffer, int32 size, void* data, uint32 flags) => p_glNamedBufferStorage(buffer, size, data, flags);

	private typealias glNamedBufferData_t = function void(uint32 buffer, int32 size, void* data, VertexBufferObjectUsage usage);
	private static glNamedBufferData_t p_glNamedBufferData;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferData(uint32 buffer, int32 size, void* data, VertexBufferObjectUsage usage) => p_glNamedBufferData(buffer, size, data, usage);

	private typealias glNamedBufferSubData_t = function void(uint32 buffer, void* offset, int32 size, void* data);
	private static glNamedBufferSubData_t p_glNamedBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferSubData(uint32 buffer, void* offset, int32 size, void* data) => p_glNamedBufferSubData(buffer, offset, size, data);

	private typealias glCopyNamedBufferSubData_t = function void(uint32 readBuffer, uint32 writeBuffer, void* readOffset, void* writeOffset, int32 size);
	private static glCopyNamedBufferSubData_t p_glCopyNamedBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glCopyNamedBufferSubData(uint32 readBuffer, uint32 writeBuffer, void* readOffset, void* writeOffset, int32 size) => p_glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);

	private typealias glClearNamedBufferData_t = function void(uint32 buffer, InternalFormat internalformat, PixelFormat format, PixelType type, void* data);
	private static glClearNamedBufferData_t p_glClearNamedBufferData;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedBufferData(uint32 buffer, InternalFormat internalformat, PixelFormat format, PixelType type, void* data) => p_glClearNamedBufferData(buffer, internalformat, format, type, data);

	private typealias glClearNamedBufferSubData_t = function void(uint32 buffer, InternalFormat internalformat, void* offset, int32 size, PixelFormat format, PixelType type, void* data);
	private static glClearNamedBufferSubData_t p_glClearNamedBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedBufferSubData(uint32 buffer, InternalFormat internalformat, void* offset, int32 size, PixelFormat format, PixelType type, void* data) => p_glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

	private typealias glMapNamedBuffer_t = function void*(uint32 buffer, BufferAccessARB access);
	private static glMapNamedBuffer_t p_glMapNamedBuffer;
	[CallingConvention(GL.CallConv)]
	public static void* glMapNamedBuffer(uint32 buffer, BufferAccessARB access) => p_glMapNamedBuffer(buffer, access);

	private typealias glMapNamedBufferRange_t = function void*(uint32 buffer, void* offset, int32 length, uint32 access);
	private static glMapNamedBufferRange_t p_glMapNamedBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void* glMapNamedBufferRange(uint32 buffer, void* offset, int32 length, uint32 access) => p_glMapNamedBufferRange(buffer, offset, length, access);

	private typealias glUnmapNamedBuffer_t = function bool(uint32 buffer);
	private static glUnmapNamedBuffer_t p_glUnmapNamedBuffer;
	[CallingConvention(GL.CallConv)]
	public static bool glUnmapNamedBuffer(uint32 buffer) => p_glUnmapNamedBuffer(buffer);

	private typealias glFlushMappedNamedBufferRange_t = function void(uint32 buffer, void* offset, int32 length);
	private static glFlushMappedNamedBufferRange_t p_glFlushMappedNamedBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void glFlushMappedNamedBufferRange(uint32 buffer, void* offset, int32 length) => p_glFlushMappedNamedBufferRange(buffer, offset, length);

	private typealias glGetNamedBufferParameteriv_t = function void(uint32 buffer, VertexBufferObjectParameter pname, int32* @params);
	private static glGetNamedBufferParameteriv_t p_glGetNamedBufferParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferParameteriv(uint32 buffer, VertexBufferObjectParameter pname, int32* @params) => p_glGetNamedBufferParameteriv(buffer, pname, @params);

	private typealias glGetNamedBufferParameteri64v_t = function void(uint32 buffer, VertexBufferObjectParameter pname, int64* @params);
	private static glGetNamedBufferParameteri64v_t p_glGetNamedBufferParameteri64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferParameteri64v(uint32 buffer, VertexBufferObjectParameter pname, int64* @params) => p_glGetNamedBufferParameteri64v(buffer, pname, @params);

	private typealias glGetNamedBufferPointerv_t = function void(uint32 buffer, VertexBufferObjectParameter pname, void** @params);
	private static glGetNamedBufferPointerv_t p_glGetNamedBufferPointerv;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferPointerv(uint32 buffer, VertexBufferObjectParameter pname, void** @params) => p_glGetNamedBufferPointerv(buffer, pname, @params);

	private typealias glGetNamedBufferSubData_t = function void(uint32 buffer, void* offset, int32 size, void* data);
	private static glGetNamedBufferSubData_t p_glGetNamedBufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferSubData(uint32 buffer, void* offset, int32 size, void* data) => p_glGetNamedBufferSubData(buffer, offset, size, data);

	private typealias glCreateFramebuffers_t = function void(int32 n, uint32* framebuffers);
	private static glCreateFramebuffers_t p_glCreateFramebuffers;
	[CallingConvention(GL.CallConv)]
	public static void glCreateFramebuffers(int32 n, uint32* framebuffers) => p_glCreateFramebuffers(n, framebuffers);

	private typealias glNamedFramebufferRenderbuffer_t = function void(uint32 framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer);
	private static glNamedFramebufferRenderbuffer_t p_glNamedFramebufferRenderbuffer;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferRenderbuffer(uint32 framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer) => p_glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);

	private typealias glNamedFramebufferParameteri_t = function void(uint32 framebuffer, FramebufferParameterName pname, int32 param);
	private static glNamedFramebufferParameteri_t p_glNamedFramebufferParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferParameteri(uint32 framebuffer, FramebufferParameterName pname, int32 param) => p_glNamedFramebufferParameteri(framebuffer, pname, param);

	private typealias glNamedFramebufferTexture_t = function void(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level);
	private static glNamedFramebufferTexture_t p_glNamedFramebufferTexture;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTexture(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level) => p_glNamedFramebufferTexture(framebuffer, attachment, texture, level);

	private typealias glNamedFramebufferTextureLayer_t = function void(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer);
	private static glNamedFramebufferTextureLayer_t p_glNamedFramebufferTextureLayer;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTextureLayer(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer) => p_glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);

	private typealias glNamedFramebufferDrawBuffer_t = function void(uint32 framebuffer, ColorBuffer buf);
	private static glNamedFramebufferDrawBuffer_t p_glNamedFramebufferDrawBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferDrawBuffer(uint32 framebuffer, ColorBuffer buf) => p_glNamedFramebufferDrawBuffer(framebuffer, buf);

	private typealias glNamedFramebufferDrawBuffers_t = function void(uint32 framebuffer, int32 n, uint32* bufs);
	private static glNamedFramebufferDrawBuffers_t p_glNamedFramebufferDrawBuffers;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferDrawBuffers(uint32 framebuffer, int32 n, uint32* bufs) => p_glNamedFramebufferDrawBuffers(framebuffer, n, bufs);

	private typealias glNamedFramebufferReadBuffer_t = function void(uint32 framebuffer, ColorBuffer src);
	private static glNamedFramebufferReadBuffer_t p_glNamedFramebufferReadBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferReadBuffer(uint32 framebuffer, ColorBuffer src) => p_glNamedFramebufferReadBuffer(framebuffer, src);

	private typealias glInvalidateNamedFramebufferData_t = function void(uint32 framebuffer, int32 numAttachments, uint32* attachments);
	private static glInvalidateNamedFramebufferData_t p_glInvalidateNamedFramebufferData;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateNamedFramebufferData(uint32 framebuffer, int32 numAttachments, uint32* attachments) => p_glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);

	private typealias glInvalidateNamedFramebufferSubData_t = function void(uint32 framebuffer, int32 numAttachments, uint32* attachments, int32 x, int32 y, int32 width, int32 height);
	private static glInvalidateNamedFramebufferSubData_t p_glInvalidateNamedFramebufferSubData;
	[CallingConvention(GL.CallConv)]
	public static void glInvalidateNamedFramebufferSubData(uint32 framebuffer, int32 numAttachments, uint32* attachments, int32 x, int32 y, int32 width, int32 height) => p_glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);

	private typealias glClearNamedFramebufferiv_t = function void(uint32 framebuffer, Buffer buffer, int32 drawbuffer, int32* value);
	private static glClearNamedFramebufferiv_t p_glClearNamedFramebufferiv;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedFramebufferiv(uint32 framebuffer, Buffer buffer, int32 drawbuffer, int32* value) => p_glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);

	private typealias glClearNamedFramebufferuiv_t = function void(uint32 framebuffer, Buffer buffer, int32 drawbuffer, uint32* value);
	private static glClearNamedFramebufferuiv_t p_glClearNamedFramebufferuiv;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedFramebufferuiv(uint32 framebuffer, Buffer buffer, int32 drawbuffer, uint32* value) => p_glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);

	private typealias glClearNamedFramebufferfv_t = function void(uint32 framebuffer, Buffer buffer, int32 drawbuffer, float* value);
	private static glClearNamedFramebufferfv_t p_glClearNamedFramebufferfv;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedFramebufferfv(uint32 framebuffer, Buffer buffer, int32 drawbuffer, float* value) => p_glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);

	private typealias glClearNamedFramebufferfi_t = function void(uint32 framebuffer, Buffer buffer, int32 drawbuffer, float depth, int32 stencil);
	private static glClearNamedFramebufferfi_t p_glClearNamedFramebufferfi;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedFramebufferfi(uint32 framebuffer, Buffer buffer, int32 drawbuffer, float depth, int32 stencil) => p_glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);

	private typealias glBlitNamedFramebuffer_t = function void(uint32 readFramebuffer, uint32 drawFramebuffer, int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter);
	private static glBlitNamedFramebuffer_t p_glBlitNamedFramebuffer;
	[CallingConvention(GL.CallConv)]
	public static void glBlitNamedFramebuffer(uint32 readFramebuffer, uint32 drawFramebuffer, int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter) => p_glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

	private typealias glCheckNamedFramebufferStatus_t = function FramebufferStatus(uint32 framebuffer, FramebufferTarget target);
	private static glCheckNamedFramebufferStatus_t p_glCheckNamedFramebufferStatus;
	[CallingConvention(GL.CallConv)]
	public static FramebufferStatus glCheckNamedFramebufferStatus(uint32 framebuffer, FramebufferTarget target) => p_glCheckNamedFramebufferStatus(framebuffer, target);

	private typealias glGetNamedFramebufferParameteriv_t = function void(uint32 framebuffer, GetFramebufferParameter pname, int32* param);
	private static glGetNamedFramebufferParameteriv_t p_glGetNamedFramebufferParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedFramebufferParameteriv(uint32 framebuffer, GetFramebufferParameter pname, int32* param) => p_glGetNamedFramebufferParameteriv(framebuffer, pname, param);

	private typealias glGetNamedFramebufferAttachmentParameteriv_t = function void(uint32 framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params);
	private static glGetNamedFramebufferAttachmentParameteriv_t p_glGetNamedFramebufferAttachmentParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedFramebufferAttachmentParameteriv(uint32 framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params) => p_glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, @params);

	private typealias glCreateRenderbuffers_t = function void(int32 n, uint32* renderbuffers);
	private static glCreateRenderbuffers_t p_glCreateRenderbuffers;
	[CallingConvention(GL.CallConv)]
	public static void glCreateRenderbuffers(int32 n, uint32* renderbuffers) => p_glCreateRenderbuffers(n, renderbuffers);

	private typealias glNamedRenderbufferStorage_t = function void(uint32 renderbuffer, InternalFormat internalformat, int32 width, int32 height);
	private static glNamedRenderbufferStorage_t p_glNamedRenderbufferStorage;
	[CallingConvention(GL.CallConv)]
	public static void glNamedRenderbufferStorage(uint32 renderbuffer, InternalFormat internalformat, int32 width, int32 height) => p_glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);

	private typealias glNamedRenderbufferStorageMultisample_t = function void(uint32 renderbuffer, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glNamedRenderbufferStorageMultisample_t p_glNamedRenderbufferStorageMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glNamedRenderbufferStorageMultisample(uint32 renderbuffer, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);

	private typealias glGetNamedRenderbufferParameteriv_t = function void(uint32 renderbuffer, RenderbufferParameterName pname, int32* @params);
	private static glGetNamedRenderbufferParameteriv_t p_glGetNamedRenderbufferParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedRenderbufferParameteriv(uint32 renderbuffer, RenderbufferParameterName pname, int32* @params) => p_glGetNamedRenderbufferParameteriv(renderbuffer, pname, @params);

	private typealias glCreateTextures_t = function void(TextureTarget target, int32 n, uint32* textures);
	private static glCreateTextures_t p_glCreateTextures;
	[CallingConvention(GL.CallConv)]
	public static void glCreateTextures(TextureTarget target, int32 n, uint32* textures) => p_glCreateTextures(target, n, textures);

	private typealias glTextureBuffer_t = function void(uint32 texture, InternalFormat internalformat, uint32 buffer);
	private static glTextureBuffer_t p_glTextureBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glTextureBuffer(uint32 texture, InternalFormat internalformat, uint32 buffer) => p_glTextureBuffer(texture, internalformat, buffer);

	private typealias glTextureBufferRange_t = function void(uint32 texture, InternalFormat internalformat, uint32 buffer, void* offset, int32 size);
	private static glTextureBufferRange_t p_glTextureBufferRange;
	[CallingConvention(GL.CallConv)]
	public static void glTextureBufferRange(uint32 texture, InternalFormat internalformat, uint32 buffer, void* offset, int32 size) => p_glTextureBufferRange(texture, internalformat, buffer, offset, size);

	private typealias glTextureStorage1D_t = function void(uint32 texture, int32 levels, InternalFormat internalformat, int32 width);
	private static glTextureStorage1D_t p_glTextureStorage1D;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage1D(uint32 texture, int32 levels, InternalFormat internalformat, int32 width) => p_glTextureStorage1D(texture, levels, internalformat, width);

	private typealias glTextureStorage2D_t = function void(uint32 texture, int32 levels, InternalFormat internalformat, int32 width, int32 height);
	private static glTextureStorage2D_t p_glTextureStorage2D;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage2D(uint32 texture, int32 levels, InternalFormat internalformat, int32 width, int32 height) => p_glTextureStorage2D(texture, levels, internalformat, width, height);

	private typealias glTextureStorage3D_t = function void(uint32 texture, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth);
	private static glTextureStorage3D_t p_glTextureStorage3D;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage3D(uint32 texture, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth) => p_glTextureStorage3D(texture, levels, internalformat, width, height, depth);

	private typealias glTextureStorage2DMultisample_t = function void(uint32 texture, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations);
	private static glTextureStorage2DMultisample_t p_glTextureStorage2DMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage2DMultisample(uint32 texture, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations) => p_glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);

	private typealias glTextureStorage3DMultisample_t = function void(uint32 texture, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations);
	private static glTextureStorage3DMultisample_t p_glTextureStorage3DMultisample;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage3DMultisample(uint32 texture, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations) => p_glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);

	private typealias glTextureSubImage1D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels);
	private static glTextureSubImage1D_t p_glTextureSubImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glTextureSubImage1D(uint32 texture, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels) => p_glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

	private typealias glTextureSubImage2D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels);
	private static glTextureSubImage2D_t p_glTextureSubImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glTextureSubImage2D(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels) => p_glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

	private typealias glTextureSubImage3D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels);
	private static glTextureSubImage3D_t p_glTextureSubImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glTextureSubImage3D(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels) => p_glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

	private typealias glCompressedTextureSubImage1D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTextureSubImage1D_t p_glCompressedTextureSubImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureSubImage1D(uint32 texture, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

	private typealias glCompressedTextureSubImage2D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTextureSubImage2D_t p_glCompressedTextureSubImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureSubImage2D(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

	private typealias glCompressedTextureSubImage3D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTextureSubImage3D_t p_glCompressedTextureSubImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureSubImage3D(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

	private typealias glCopyTextureSubImage1D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 x, int32 y, int32 width);
	private static glCopyTextureSubImage1D_t p_glCopyTextureSubImage1D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureSubImage1D(uint32 texture, int32 level, int32 xoffset, int32 x, int32 y, int32 width) => p_glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);

	private typealias glCopyTextureSubImage2D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTextureSubImage2D_t p_glCopyTextureSubImage2D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureSubImage2D(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);

	private typealias glCopyTextureSubImage3D_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTextureSubImage3D_t p_glCopyTextureSubImage3D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureSubImage3D(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);

	private typealias glTextureParameterf_t = function void(uint32 texture, TextureParameterName pname, float param);
	private static glTextureParameterf_t p_glTextureParameterf;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterf(uint32 texture, TextureParameterName pname, float param) => p_glTextureParameterf(texture, pname, param);

	private typealias glTextureParameterfv_t = function void(uint32 texture, TextureParameterName pname, float* param);
	private static glTextureParameterfv_t p_glTextureParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterfv(uint32 texture, TextureParameterName pname, float* param) => p_glTextureParameterfv(texture, pname, param);

	private typealias glTextureParameteri_t = function void(uint32 texture, TextureParameterName pname, int32 param);
	private static glTextureParameteri_t p_glTextureParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameteri(uint32 texture, TextureParameterName pname, int32 param) => p_glTextureParameteri(texture, pname, param);

	private typealias glTextureParameterIiv_t = function void(uint32 texture, TextureParameterName pname, int32* @params);
	private static glTextureParameterIiv_t p_glTextureParameterIiv;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterIiv(uint32 texture, TextureParameterName pname, int32* @params) => p_glTextureParameterIiv(texture, pname, @params);

	private typealias glTextureParameterIuiv_t = function void(uint32 texture, TextureParameterName pname, uint32* @params);
	private static glTextureParameterIuiv_t p_glTextureParameterIuiv;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterIuiv(uint32 texture, TextureParameterName pname, uint32* @params) => p_glTextureParameterIuiv(texture, pname, @params);

	private typealias glTextureParameteriv_t = function void(uint32 texture, TextureParameterName pname, int32* param);
	private static glTextureParameteriv_t p_glTextureParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameteriv(uint32 texture, TextureParameterName pname, int32* param) => p_glTextureParameteriv(texture, pname, param);

	private typealias glGenerateTextureMipmap_t = function void(uint32 texture);
	private static glGenerateTextureMipmap_t p_glGenerateTextureMipmap;
	[CallingConvention(GL.CallConv)]
	public static void glGenerateTextureMipmap(uint32 texture) => p_glGenerateTextureMipmap(texture);

	private typealias glBindTextureUnit_t = function void(uint32 unit, uint32 texture);
	private static glBindTextureUnit_t p_glBindTextureUnit;
	[CallingConvention(GL.CallConv)]
	public static void glBindTextureUnit(uint32 unit, uint32 texture) => p_glBindTextureUnit(unit, texture);

	private typealias glGetTextureImage_t = function void(uint32 texture, int32 level, PixelFormat format, PixelType type, int32 bufSize, void* pixels);
	private static glGetTextureImage_t p_glGetTextureImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureImage(uint32 texture, int32 level, PixelFormat format, PixelType type, int32 bufSize, void* pixels) => p_glGetTextureImage(texture, level, format, type, bufSize, pixels);

	private typealias glGetCompressedTextureImage_t = function void(uint32 texture, int32 level, int32 bufSize, void* pixels);
	private static glGetCompressedTextureImage_t p_glGetCompressedTextureImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetCompressedTextureImage(uint32 texture, int32 level, int32 bufSize, void* pixels) => p_glGetCompressedTextureImage(texture, level, bufSize, pixels);

	private typealias glGetTextureLevelParameterfv_t = function void(uint32 texture, int32 level, GetTextureParameter pname, float* @params);
	private static glGetTextureLevelParameterfv_t p_glGetTextureLevelParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureLevelParameterfv(uint32 texture, int32 level, GetTextureParameter pname, float* @params) => p_glGetTextureLevelParameterfv(texture, level, pname, @params);

	private typealias glGetTextureLevelParameteriv_t = function void(uint32 texture, int32 level, GetTextureParameter pname, int32* @params);
	private static glGetTextureLevelParameteriv_t p_glGetTextureLevelParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureLevelParameteriv(uint32 texture, int32 level, GetTextureParameter pname, int32* @params) => p_glGetTextureLevelParameteriv(texture, level, pname, @params);

	private typealias glGetTextureParameterfv_t = function void(uint32 texture, GetTextureParameter pname, float* @params);
	private static glGetTextureParameterfv_t p_glGetTextureParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameterfv(uint32 texture, GetTextureParameter pname, float* @params) => p_glGetTextureParameterfv(texture, pname, @params);

	private typealias glGetTextureParameterIiv_t = function void(uint32 texture, GetTextureParameter pname, int32* @params);
	private static glGetTextureParameterIiv_t p_glGetTextureParameterIiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameterIiv(uint32 texture, GetTextureParameter pname, int32* @params) => p_glGetTextureParameterIiv(texture, pname, @params);

	private typealias glGetTextureParameterIuiv_t = function void(uint32 texture, GetTextureParameter pname, uint32* @params);
	private static glGetTextureParameterIuiv_t p_glGetTextureParameterIuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameterIuiv(uint32 texture, GetTextureParameter pname, uint32* @params) => p_glGetTextureParameterIuiv(texture, pname, @params);

	private typealias glGetTextureParameteriv_t = function void(uint32 texture, GetTextureParameter pname, int32* @params);
	private static glGetTextureParameteriv_t p_glGetTextureParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameteriv(uint32 texture, GetTextureParameter pname, int32* @params) => p_glGetTextureParameteriv(texture, pname, @params);

	private typealias glCreateVertexArrays_t = function void(int32 n, uint32* arrays);
	private static glCreateVertexArrays_t p_glCreateVertexArrays;
	[CallingConvention(GL.CallConv)]
	public static void glCreateVertexArrays(int32 n, uint32* arrays) => p_glCreateVertexArrays(n, arrays);

	private typealias glDisableVertexArrayAttrib_t = function void(uint32 vaobj, uint32 index);
	private static glDisableVertexArrayAttrib_t p_glDisableVertexArrayAttrib;
	[CallingConvention(GL.CallConv)]
	public static void glDisableVertexArrayAttrib(uint32 vaobj, uint32 index) => p_glDisableVertexArrayAttrib(vaobj, index);

	private typealias glEnableVertexArrayAttrib_t = function void(uint32 vaobj, uint32 index);
	private static glEnableVertexArrayAttrib_t p_glEnableVertexArrayAttrib;
	[CallingConvention(GL.CallConv)]
	public static void glEnableVertexArrayAttrib(uint32 vaobj, uint32 index) => p_glEnableVertexArrayAttrib(vaobj, index);

	private typealias glVertexArrayElementBuffer_t = function void(uint32 vaobj, uint32 buffer);
	private static glVertexArrayElementBuffer_t p_glVertexArrayElementBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayElementBuffer(uint32 vaobj, uint32 buffer) => p_glVertexArrayElementBuffer(vaobj, buffer);

	private typealias glVertexArrayVertexBuffer_t = function void(uint32 vaobj, uint32 bindingindex, uint32 buffer, void* offset, int32 stride);
	private static glVertexArrayVertexBuffer_t p_glVertexArrayVertexBuffer;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexBuffer(uint32 vaobj, uint32 bindingindex, uint32 buffer, void* offset, int32 stride) => p_glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);

	private typealias glVertexArrayVertexBuffers_t = function void(uint32 vaobj, uint32 first, int32 count, uint32* buffers, void* offsets, int32* strides);
	private static glVertexArrayVertexBuffers_t p_glVertexArrayVertexBuffers;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexBuffers(uint32 vaobj, uint32 first, int32 count, uint32* buffers, void* offsets, int32* strides) => p_glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);

	private typealias glVertexArrayAttribBinding_t = function void(uint32 vaobj, uint32 attribindex, uint32 bindingindex);
	private static glVertexArrayAttribBinding_t p_glVertexArrayAttribBinding;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayAttribBinding(uint32 vaobj, uint32 attribindex, uint32 bindingindex) => p_glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);

	private typealias glVertexArrayAttribFormat_t = function void(uint32 vaobj, uint32 attribindex, int32 size, VertexAttribType type, bool normalized, uint32 relativeoffset);
	private static glVertexArrayAttribFormat_t p_glVertexArrayAttribFormat;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayAttribFormat(uint32 vaobj, uint32 attribindex, int32 size, VertexAttribType type, bool normalized, uint32 relativeoffset) => p_glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);

	private typealias glVertexArrayAttribIFormat_t = function void(uint32 vaobj, uint32 attribindex, int32 size, VertexAttribType type, uint32 relativeoffset);
	private static glVertexArrayAttribIFormat_t p_glVertexArrayAttribIFormat;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayAttribIFormat(uint32 vaobj, uint32 attribindex, int32 size, VertexAttribType type, uint32 relativeoffset) => p_glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);

	private typealias glVertexArrayAttribLFormat_t = function void(uint32 vaobj, uint32 attribindex, int32 size, VertexAttribType type, uint32 relativeoffset);
	private static glVertexArrayAttribLFormat_t p_glVertexArrayAttribLFormat;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayAttribLFormat(uint32 vaobj, uint32 attribindex, int32 size, VertexAttribType type, uint32 relativeoffset) => p_glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);

	private typealias glVertexArrayBindingDivisor_t = function void(uint32 vaobj, uint32 bindingindex, uint32 divisor);
	private static glVertexArrayBindingDivisor_t p_glVertexArrayBindingDivisor;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayBindingDivisor(uint32 vaobj, uint32 bindingindex, uint32 divisor) => p_glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);

	private typealias glGetVertexArrayiv_t = function void(uint32 vaobj, VertexArrayPName pname, int32* param);
	private static glGetVertexArrayiv_t p_glGetVertexArrayiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexArrayiv(uint32 vaobj, VertexArrayPName pname, int32* param) => p_glGetVertexArrayiv(vaobj, pname, param);

	private typealias glGetVertexArrayIndexediv_t = function void(uint32 vaobj, uint32 index, VertexArrayPName pname, int32* param);
	private static glGetVertexArrayIndexediv_t p_glGetVertexArrayIndexediv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexArrayIndexediv(uint32 vaobj, uint32 index, VertexArrayPName pname, int32* param) => p_glGetVertexArrayIndexediv(vaobj, index, pname, param);

	private typealias glGetVertexArrayIndexed64iv_t = function void(uint32 vaobj, uint32 index, VertexArrayPName pname, int64* param);
	private static glGetVertexArrayIndexed64iv_t p_glGetVertexArrayIndexed64iv;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexArrayIndexed64iv(uint32 vaobj, uint32 index, VertexArrayPName pname, int64* param) => p_glGetVertexArrayIndexed64iv(vaobj, index, pname, param);

	private typealias glCreateSamplers_t = function void(int32 n, uint32* samplers);
	private static glCreateSamplers_t p_glCreateSamplers;
	[CallingConvention(GL.CallConv)]
	public static void glCreateSamplers(int32 n, uint32* samplers) => p_glCreateSamplers(n, samplers);

	private typealias glCreateProgramPipelines_t = function void(int32 n, uint32* pipelines);
	private static glCreateProgramPipelines_t p_glCreateProgramPipelines;
	[CallingConvention(GL.CallConv)]
	public static void glCreateProgramPipelines(int32 n, uint32* pipelines) => p_glCreateProgramPipelines(n, pipelines);

	private typealias glCreateQueries_t = function void(QueryTarget target, int32 n, uint32* ids);
	private static glCreateQueries_t p_glCreateQueries;
	[CallingConvention(GL.CallConv)]
	public static void glCreateQueries(QueryTarget target, int32 n, uint32* ids) => p_glCreateQueries(target, n, ids);

	private typealias glGetQueryBufferObjecti64v_t = function void(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset);
	private static glGetQueryBufferObjecti64v_t p_glGetQueryBufferObjecti64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryBufferObjecti64v(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset) => p_glGetQueryBufferObjecti64v(id, buffer, pname, offset);

	private typealias glGetQueryBufferObjectiv_t = function void(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset);
	private static glGetQueryBufferObjectiv_t p_glGetQueryBufferObjectiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryBufferObjectiv(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset) => p_glGetQueryBufferObjectiv(id, buffer, pname, offset);

	private typealias glGetQueryBufferObjectui64v_t = function void(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset);
	private static glGetQueryBufferObjectui64v_t p_glGetQueryBufferObjectui64v;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryBufferObjectui64v(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset) => p_glGetQueryBufferObjectui64v(id, buffer, pname, offset);

	private typealias glGetQueryBufferObjectuiv_t = function void(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset);
	private static glGetQueryBufferObjectuiv_t p_glGetQueryBufferObjectuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryBufferObjectuiv(uint32 id, uint32 buffer, QueryObjectParameterName pname, void* offset) => p_glGetQueryBufferObjectuiv(id, buffer, pname, offset);

	private typealias glMemoryBarrierByRegion_t = function void(uint32 barriers);
	private static glMemoryBarrierByRegion_t p_glMemoryBarrierByRegion;
	[CallingConvention(GL.CallConv)]
	public static void glMemoryBarrierByRegion(uint32 barriers) => p_glMemoryBarrierByRegion(barriers);

	private typealias glGetTextureSubImage_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, int32 bufSize, void* pixels);
	private static glGetTextureSubImage_t p_glGetTextureSubImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureSubImage(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, int32 bufSize, void* pixels) => p_glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

	private typealias glGetCompressedTextureSubImage_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, int32 bufSize, void* pixels);
	private static glGetCompressedTextureSubImage_t p_glGetCompressedTextureSubImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetCompressedTextureSubImage(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, int32 bufSize, void* pixels) => p_glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

	private typealias glGetGraphicsResetStatus_t = function GraphicsResetStatus();
	private static glGetGraphicsResetStatus_t p_glGetGraphicsResetStatus;
	[CallingConvention(GL.CallConv)]
	public static GraphicsResetStatus glGetGraphicsResetStatus() => p_glGetGraphicsResetStatus();

	private typealias glGetnCompressedTexImage_t = function void(TextureTarget target, int32 lod, int32 bufSize, void* pixels);
	private static glGetnCompressedTexImage_t p_glGetnCompressedTexImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetnCompressedTexImage(TextureTarget target, int32 lod, int32 bufSize, void* pixels) => p_glGetnCompressedTexImage(target, lod, bufSize, pixels);

	private typealias glGetnTexImage_t = function void(TextureTarget target, int32 level, PixelFormat format, PixelType type, int32 bufSize, void* pixels);
	private static glGetnTexImage_t p_glGetnTexImage;
	[CallingConvention(GL.CallConv)]
	public static void glGetnTexImage(TextureTarget target, int32 level, PixelFormat format, PixelType type, int32 bufSize, void* pixels) => p_glGetnTexImage(target, level, format, type, bufSize, pixels);

	private typealias glGetnUniformdv_t = function void(uint32 program, int32 location, int32 bufSize, double* @params);
	private static glGetnUniformdv_t p_glGetnUniformdv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformdv(uint32 program, int32 location, int32 bufSize, double* @params) => p_glGetnUniformdv(program, location, bufSize, @params);

	private typealias glGetnUniformfv_t = function void(uint32 program, int32 location, int32 bufSize, float* @params);
	private static glGetnUniformfv_t p_glGetnUniformfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformfv(uint32 program, int32 location, int32 bufSize, float* @params) => p_glGetnUniformfv(program, location, bufSize, @params);

	private typealias glGetnUniformiv_t = function void(uint32 program, int32 location, int32 bufSize, int32* @params);
	private static glGetnUniformiv_t p_glGetnUniformiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformiv(uint32 program, int32 location, int32 bufSize, int32* @params) => p_glGetnUniformiv(program, location, bufSize, @params);

	private typealias glGetnUniformuiv_t = function void(uint32 program, int32 location, int32 bufSize, uint32* @params);
	private static glGetnUniformuiv_t p_glGetnUniformuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformuiv(uint32 program, int32 location, int32 bufSize, uint32* @params) => p_glGetnUniformuiv(program, location, bufSize, @params);

	private typealias glReadnPixels_t = function void(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data);
	private static glReadnPixels_t p_glReadnPixels;
	[CallingConvention(GL.CallConv)]
	public static void glReadnPixels(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data) => p_glReadnPixels(x, y, width, height, format, type, bufSize, data);

	private typealias glGetnMapdv_t = function void(MapTarget target, MapQuery query, int32 bufSize, double* v);
	private static glGetnMapdv_t p_glGetnMapdv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMapdv(MapTarget target, MapQuery query, int32 bufSize, double* v) => p_glGetnMapdv(target, query, bufSize, v);

	private typealias glGetnMapfv_t = function void(MapTarget target, MapQuery query, int32 bufSize, float* v);
	private static glGetnMapfv_t p_glGetnMapfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMapfv(MapTarget target, MapQuery query, int32 bufSize, float* v) => p_glGetnMapfv(target, query, bufSize, v);

	private typealias glGetnMapiv_t = function void(MapTarget target, MapQuery query, int32 bufSize, int32* v);
	private static glGetnMapiv_t p_glGetnMapiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMapiv(MapTarget target, MapQuery query, int32 bufSize, int32* v) => p_glGetnMapiv(target, query, bufSize, v);

	private typealias glGetnPixelMapfv_t = function void(PixelMap map, int32 bufSize, float* values);
	private static glGetnPixelMapfv_t p_glGetnPixelMapfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPixelMapfv(PixelMap map, int32 bufSize, float* values) => p_glGetnPixelMapfv(map, bufSize, values);

	private typealias glGetnPixelMapuiv_t = function void(PixelMap map, int32 bufSize, uint32* values);
	private static glGetnPixelMapuiv_t p_glGetnPixelMapuiv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPixelMapuiv(PixelMap map, int32 bufSize, uint32* values) => p_glGetnPixelMapuiv(map, bufSize, values);

	private typealias glGetnPixelMapusv_t = function void(PixelMap map, int32 bufSize, int16* values);
	private static glGetnPixelMapusv_t p_glGetnPixelMapusv;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPixelMapusv(PixelMap map, int32 bufSize, int16* values) => p_glGetnPixelMapusv(map, bufSize, values);

	private typealias glGetnPolygonStipple_t = function void(int32 bufSize, uint8* pattern);
	private static glGetnPolygonStipple_t p_glGetnPolygonStipple;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPolygonStipple(int32 bufSize, uint8* pattern) => p_glGetnPolygonStipple(bufSize, pattern);

	private typealias glGetnColorTable_t = function void(ColorTableTarget target, PixelFormat format, PixelType type, int32 bufSize, void* table);
	private static glGetnColorTable_t p_glGetnColorTable;
	[CallingConvention(GL.CallConv)]
	public static void glGetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int32 bufSize, void* table) => p_glGetnColorTable(target, format, type, bufSize, table);

	private typealias glGetnConvolutionFilter_t = function void(ConvolutionTarget target, PixelFormat format, PixelType type, int32 bufSize, void* image);
	private static glGetnConvolutionFilter_t p_glGetnConvolutionFilter;
	[CallingConvention(GL.CallConv)]
	public static void glGetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int32 bufSize, void* image) => p_glGetnConvolutionFilter(target, format, type, bufSize, image);

	private typealias glGetnSeparableFilter_t = function void(SeparableTargetEXT target, PixelFormat format, PixelType type, int32 rowBufSize, void* row, int32 columnBufSize, void* column, void* span);
	private static glGetnSeparableFilter_t p_glGetnSeparableFilter;
	[CallingConvention(GL.CallConv)]
	public static void glGetnSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, int32 rowBufSize, void* row, int32 columnBufSize, void* column, void* span) => p_glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);

	private typealias glGetnHistogram_t = function void(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values);
	private static glGetnHistogram_t p_glGetnHistogram;
	[CallingConvention(GL.CallConv)]
	public static void glGetnHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values) => p_glGetnHistogram(target, reset, format, type, bufSize, values);

	private typealias glGetnMinmax_t = function void(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values);
	private static glGetnMinmax_t p_glGetnMinmax;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values) => p_glGetnMinmax(target, reset, format, type, bufSize, values);

	private typealias glTextureBarrier_t = function void();
	private static glTextureBarrier_t p_glTextureBarrier;
	[CallingConvention(GL.CallConv)]
	public static void glTextureBarrier() => p_glTextureBarrier();

	private typealias glSpecializeShader_t = function void(uint32 shader, char8* pEntryPoint, uint32 numSpecializationConstants, uint32* pConstantIndex, uint32* pConstantValue);
	private static glSpecializeShader_t p_glSpecializeShader;
	[CallingConvention(GL.CallConv)]
	public static void glSpecializeShader(uint32 shader, char8* pEntryPoint, uint32 numSpecializationConstants, uint32* pConstantIndex, uint32* pConstantValue) => p_glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

	private typealias glMultiDrawArraysIndirectCount_t = function void(PrimitiveType mode, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride);
	private static glMultiDrawArraysIndirectCount_t p_glMultiDrawArraysIndirectCount;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysIndirectCount(PrimitiveType mode, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride) => p_glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);

	private typealias glMultiDrawElementsIndirectCount_t = function void(PrimitiveType mode, uint32 type, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride);
	private static glMultiDrawElementsIndirectCount_t p_glMultiDrawElementsIndirectCount;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsIndirectCount(PrimitiveType mode, uint32 type, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride) => p_glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);

	private typealias glPolygonOffsetClamp_t = function void(float factor, float units, float clamp);
	private static glPolygonOffsetClamp_t p_glPolygonOffsetClamp;
	[CallingConvention(GL.CallConv)]
	public static void glPolygonOffsetClamp(float factor, float units, float clamp) => p_glPolygonOffsetClamp(factor, units, clamp);

	private typealias glTbufferMask3DFX_t = function void(uint32 mask);
	private static glTbufferMask3DFX_t p_glTbufferMask3DFX;
	[CallingConvention(GL.CallConv)]
	public static void glTbufferMask3DFX(uint32 mask) => p_glTbufferMask3DFX(mask);

	private typealias glDebugMessageEnableAMD_t = function void(uint32 category, DebugSeverity severity, int32 count, uint32* ids, bool enabled);
	private static glDebugMessageEnableAMD_t p_glDebugMessageEnableAMD;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageEnableAMD(uint32 category, DebugSeverity severity, int32 count, uint32* ids, bool enabled) => p_glDebugMessageEnableAMD(category, severity, count, ids, enabled);

	private typealias glDebugMessageInsertAMD_t = function void(uint32 category, DebugSeverity severity, uint32 id, int32 length, char8* buf);
	private static glDebugMessageInsertAMD_t p_glDebugMessageInsertAMD;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageInsertAMD(uint32 category, DebugSeverity severity, uint32 id, int32 length, char8* buf) => p_glDebugMessageInsertAMD(category, severity, id, length, buf);

	private typealias glDebugMessageCallbackAMD_t = function void(void* callback, void* userParam);
	private static glDebugMessageCallbackAMD_t p_glDebugMessageCallbackAMD;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageCallbackAMD(void* callback, void* userParam) => p_glDebugMessageCallbackAMD(callback, userParam);

	private typealias glGetDebugMessageLogAMD_t = function uint32(uint32 count, int32 bufsize, uint32* categories, uint32* severities, uint32* ids, int32* lengths, char8* message);
	private static glGetDebugMessageLogAMD_t p_glGetDebugMessageLogAMD;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetDebugMessageLogAMD(uint32 count, int32 bufsize, uint32* categories, uint32* severities, uint32* ids, int32* lengths, char8* message) => p_glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);

	private typealias glBlendFuncIndexedAMD_t = function void(uint32 buf, uint32 src, uint32 dst);
	private static glBlendFuncIndexedAMD_t p_glBlendFuncIndexedAMD;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncIndexedAMD(uint32 buf, uint32 src, uint32 dst) => p_glBlendFuncIndexedAMD(buf, src, dst);

	private typealias glBlendFuncSeparateIndexedAMD_t = function void(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
	private static glBlendFuncSeparateIndexedAMD_t p_glBlendFuncSeparateIndexedAMD;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparateIndexedAMD(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) => p_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

	private typealias glBlendEquationIndexedAMD_t = function void(uint32 buf, BlendEquationModeEXT mode);
	private static glBlendEquationIndexedAMD_t p_glBlendEquationIndexedAMD;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationIndexedAMD(uint32 buf, BlendEquationModeEXT mode) => p_glBlendEquationIndexedAMD(buf, mode);

	private typealias glBlendEquationSeparateIndexedAMD_t = function void(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparateIndexedAMD_t p_glBlendEquationSeparateIndexedAMD;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparateIndexedAMD(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);

	private typealias glRenderbufferStorageMultisampleAdvancedAMD_t = function void(RenderbufferTarget target, int32 samples, int32 storageSamples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisampleAdvancedAMD_t p_glRenderbufferStorageMultisampleAdvancedAMD;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisampleAdvancedAMD(RenderbufferTarget target, int32 samples, int32 storageSamples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height);

	private typealias glNamedRenderbufferStorageMultisampleAdvancedAMD_t = function void(uint32 renderbuffer, int32 samples, int32 storageSamples, InternalFormat internalformat, int32 width, int32 height);
	private static glNamedRenderbufferStorageMultisampleAdvancedAMD_t p_glNamedRenderbufferStorageMultisampleAdvancedAMD;
	[CallingConvention(GL.CallConv)]
	public static void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint32 renderbuffer, int32 samples, int32 storageSamples, InternalFormat internalformat, int32 width, int32 height) => p_glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height);

	private typealias glFramebufferSamplePositionsfvAMD_t = function void(FramebufferTarget target, uint32 numsamples, uint32 pixelindex, float* values);
	private static glFramebufferSamplePositionsfvAMD_t p_glFramebufferSamplePositionsfvAMD;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferSamplePositionsfvAMD(FramebufferTarget target, uint32 numsamples, uint32 pixelindex, float* values) => p_glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values);

	private typealias glNamedFramebufferSamplePositionsfvAMD_t = function void(uint32 framebuffer, uint32 numsamples, uint32 pixelindex, float* values);
	private static glNamedFramebufferSamplePositionsfvAMD_t p_glNamedFramebufferSamplePositionsfvAMD;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferSamplePositionsfvAMD(uint32 framebuffer, uint32 numsamples, uint32 pixelindex, float* values) => p_glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values);

	private typealias glGetFramebufferParameterfvAMD_t = function void(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint32 numsamples, uint32 pixelindex, int32 size, float* values);
	private static glGetFramebufferParameterfvAMD_t p_glGetFramebufferParameterfvAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint32 numsamples, uint32 pixelindex, int32 size, float* values) => p_glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);

	private typealias glGetNamedFramebufferParameterfvAMD_t = function void(uint32 framebuffer, uint32 pname, uint32 numsamples, uint32 pixelindex, int32 size, float* values);
	private static glGetNamedFramebufferParameterfvAMD_t p_glGetNamedFramebufferParameterfvAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedFramebufferParameterfvAMD(uint32 framebuffer, uint32 pname, uint32 numsamples, uint32 pixelindex, int32 size, float* values) => p_glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);

	private typealias glUniform1i64NV_t = function void(int32 location, int64 x);
	private static glUniform1i64NV_t p_glUniform1i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1i64NV(int32 location, int64 x) => p_glUniform1i64NV(location, x);

	private typealias glUniform2i64NV_t = function void(int32 location, int64 x, int64 y);
	private static glUniform2i64NV_t p_glUniform2i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2i64NV(int32 location, int64 x, int64 y) => p_glUniform2i64NV(location, x, y);

	private typealias glUniform3i64NV_t = function void(int32 location, int64 x, int64 y, int64 z);
	private static glUniform3i64NV_t p_glUniform3i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3i64NV(int32 location, int64 x, int64 y, int64 z) => p_glUniform3i64NV(location, x, y, z);

	private typealias glUniform4i64NV_t = function void(int32 location, int64 x, int64 y, int64 z, int64 w);
	private static glUniform4i64NV_t p_glUniform4i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4i64NV(int32 location, int64 x, int64 y, int64 z, int64 w) => p_glUniform4i64NV(location, x, y, z, w);

	private typealias glUniform1i64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform1i64vNV_t p_glUniform1i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1i64vNV(int32 location, int32 count, void* value) => p_glUniform1i64vNV(location, count, value);

	private typealias glUniform2i64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform2i64vNV_t p_glUniform2i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2i64vNV(int32 location, int32 count, void* value) => p_glUniform2i64vNV(location, count, value);

	private typealias glUniform3i64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform3i64vNV_t p_glUniform3i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3i64vNV(int32 location, int32 count, void* value) => p_glUniform3i64vNV(location, count, value);

	private typealias glUniform4i64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform4i64vNV_t p_glUniform4i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4i64vNV(int32 location, int32 count, void* value) => p_glUniform4i64vNV(location, count, value);

	private typealias glUniform1ui64NV_t = function void(int32 location, uint64 x);
	private static glUniform1ui64NV_t p_glUniform1ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1ui64NV(int32 location, uint64 x) => p_glUniform1ui64NV(location, x);

	private typealias glUniform2ui64NV_t = function void(int32 location, uint64 x, uint64 y);
	private static glUniform2ui64NV_t p_glUniform2ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2ui64NV(int32 location, uint64 x, uint64 y) => p_glUniform2ui64NV(location, x, y);

	private typealias glUniform3ui64NV_t = function void(int32 location, uint64 x, uint64 y, uint64 z);
	private static glUniform3ui64NV_t p_glUniform3ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3ui64NV(int32 location, uint64 x, uint64 y, uint64 z) => p_glUniform3ui64NV(location, x, y, z);

	private typealias glUniform4ui64NV_t = function void(int32 location, uint64 x, uint64 y, uint64 z, uint64 w);
	private static glUniform4ui64NV_t p_glUniform4ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4ui64NV(int32 location, uint64 x, uint64 y, uint64 z, uint64 w) => p_glUniform4ui64NV(location, x, y, z, w);

	private typealias glUniform1ui64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform1ui64vNV_t p_glUniform1ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1ui64vNV(int32 location, int32 count, void* value) => p_glUniform1ui64vNV(location, count, value);

	private typealias glUniform2ui64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform2ui64vNV_t p_glUniform2ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2ui64vNV(int32 location, int32 count, void* value) => p_glUniform2ui64vNV(location, count, value);

	private typealias glUniform3ui64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform3ui64vNV_t p_glUniform3ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3ui64vNV(int32 location, int32 count, void* value) => p_glUniform3ui64vNV(location, count, value);

	private typealias glUniform4ui64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniform4ui64vNV_t p_glUniform4ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4ui64vNV(int32 location, int32 count, void* value) => p_glUniform4ui64vNV(location, count, value);

	private typealias glGetUniformi64vNV_t = function void(uint32 program, int32 location, void* @params);
	private static glGetUniformi64vNV_t p_glGetUniformi64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformi64vNV(uint32 program, int32 location, void* @params) => p_glGetUniformi64vNV(program, location, @params);

	private typealias glGetUniformui64vNV_t = function void(uint32 program, int32 location, void* @params);
	private static glGetUniformui64vNV_t p_glGetUniformui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformui64vNV(uint32 program, int32 location, void* @params) => p_glGetUniformui64vNV(program, location, @params);

	private typealias glProgramUniform1i64NV_t = function void(uint32 program, int32 location, int64 x);
	private static glProgramUniform1i64NV_t p_glProgramUniform1i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1i64NV(uint32 program, int32 location, int64 x) => p_glProgramUniform1i64NV(program, location, x);

	private typealias glProgramUniform2i64NV_t = function void(uint32 program, int32 location, int64 x, int64 y);
	private static glProgramUniform2i64NV_t p_glProgramUniform2i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2i64NV(uint32 program, int32 location, int64 x, int64 y) => p_glProgramUniform2i64NV(program, location, x, y);

	private typealias glProgramUniform3i64NV_t = function void(uint32 program, int32 location, int64 x, int64 y, int64 z);
	private static glProgramUniform3i64NV_t p_glProgramUniform3i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3i64NV(uint32 program, int32 location, int64 x, int64 y, int64 z) => p_glProgramUniform3i64NV(program, location, x, y, z);

	private typealias glProgramUniform4i64NV_t = function void(uint32 program, int32 location, int64 x, int64 y, int64 z, int64 w);
	private static glProgramUniform4i64NV_t p_glProgramUniform4i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4i64NV(uint32 program, int32 location, int64 x, int64 y, int64 z, int64 w) => p_glProgramUniform4i64NV(program, location, x, y, z, w);

	private typealias glProgramUniform1i64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform1i64vNV_t p_glProgramUniform1i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1i64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform1i64vNV(program, location, count, value);

	private typealias glProgramUniform2i64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform2i64vNV_t p_glProgramUniform2i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2i64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform2i64vNV(program, location, count, value);

	private typealias glProgramUniform3i64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform3i64vNV_t p_glProgramUniform3i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3i64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform3i64vNV(program, location, count, value);

	private typealias glProgramUniform4i64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform4i64vNV_t p_glProgramUniform4i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4i64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform4i64vNV(program, location, count, value);

	private typealias glProgramUniform1ui64NV_t = function void(uint32 program, int32 location, uint64 x);
	private static glProgramUniform1ui64NV_t p_glProgramUniform1ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1ui64NV(uint32 program, int32 location, uint64 x) => p_glProgramUniform1ui64NV(program, location, x);

	private typealias glProgramUniform2ui64NV_t = function void(uint32 program, int32 location, uint64 x, uint64 y);
	private static glProgramUniform2ui64NV_t p_glProgramUniform2ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2ui64NV(uint32 program, int32 location, uint64 x, uint64 y) => p_glProgramUniform2ui64NV(program, location, x, y);

	private typealias glProgramUniform3ui64NV_t = function void(uint32 program, int32 location, uint64 x, uint64 y, uint64 z);
	private static glProgramUniform3ui64NV_t p_glProgramUniform3ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3ui64NV(uint32 program, int32 location, uint64 x, uint64 y, uint64 z) => p_glProgramUniform3ui64NV(program, location, x, y, z);

	private typealias glProgramUniform4ui64NV_t = function void(uint32 program, int32 location, uint64 x, uint64 y, uint64 z, uint64 w);
	private static glProgramUniform4ui64NV_t p_glProgramUniform4ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4ui64NV(uint32 program, int32 location, uint64 x, uint64 y, uint64 z, uint64 w) => p_glProgramUniform4ui64NV(program, location, x, y, z, w);

	private typealias glProgramUniform1ui64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform1ui64vNV_t p_glProgramUniform1ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1ui64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform1ui64vNV(program, location, count, value);

	private typealias glProgramUniform2ui64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform2ui64vNV_t p_glProgramUniform2ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2ui64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform2ui64vNV(program, location, count, value);

	private typealias glProgramUniform3ui64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform3ui64vNV_t p_glProgramUniform3ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3ui64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform3ui64vNV(program, location, count, value);

	private typealias glProgramUniform4ui64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniform4ui64vNV_t p_glProgramUniform4ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4ui64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniform4ui64vNV(program, location, count, value);

	private typealias glVertexAttribParameteriAMD_t = function void(uint32 index, uint32 pname, int32 param);
	private static glVertexAttribParameteriAMD_t p_glVertexAttribParameteriAMD;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribParameteriAMD(uint32 index, uint32 pname, int32 param) => p_glVertexAttribParameteriAMD(index, pname, param);

	private typealias glMultiDrawArraysIndirectAMD_t = function void(PrimitiveType mode, void* indirect, int32 primcount, int32 stride);
	private static glMultiDrawArraysIndirectAMD_t p_glMultiDrawArraysIndirectAMD;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysIndirectAMD(PrimitiveType mode, void* indirect, int32 primcount, int32 stride) => p_glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);

	private typealias glMultiDrawElementsIndirectAMD_t = function void(PrimitiveType mode, DrawElementsType type, void* indirect, int32 primcount, int32 stride);
	private static glMultiDrawElementsIndirectAMD_t p_glMultiDrawElementsIndirectAMD;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsIndirectAMD(PrimitiveType mode, DrawElementsType type, void* indirect, int32 primcount, int32 stride) => p_glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);

	private typealias glGenNamesAMD_t = function void(uint32 identifier, uint32 num, uint32* names);
	private static glGenNamesAMD_t p_glGenNamesAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGenNamesAMD(uint32 identifier, uint32 num, uint32* names) => p_glGenNamesAMD(identifier, num, names);

	private typealias glDeleteNamesAMD_t = function void(uint32 identifier, uint32 num, uint32* names);
	private static glDeleteNamesAMD_t p_glDeleteNamesAMD;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteNamesAMD(uint32 identifier, uint32 num, uint32* names) => p_glDeleteNamesAMD(identifier, num, names);

	private typealias glIsNameAMD_t = function bool(uint32 identifier, uint32 name);
	private static glIsNameAMD_t p_glIsNameAMD;
	[CallingConvention(GL.CallConv)]
	public static bool glIsNameAMD(uint32 identifier, uint32 name) => p_glIsNameAMD(identifier, name);

	private typealias glQueryObjectParameteruiAMD_t = function void(QueryTarget target, uint32 id, uint32 pname, uint32 param);
	private static glQueryObjectParameteruiAMD_t p_glQueryObjectParameteruiAMD;
	[CallingConvention(GL.CallConv)]
	public static void glQueryObjectParameteruiAMD(QueryTarget target, uint32 id, uint32 pname, uint32 param) => p_glQueryObjectParameteruiAMD(target, id, pname, param);

	private typealias glGetPerfMonitorGroupsAMD_t = function void(int32* numGroups, int32 groupsSize, uint32* groups);
	private static glGetPerfMonitorGroupsAMD_t p_glGetPerfMonitorGroupsAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfMonitorGroupsAMD(int32* numGroups, int32 groupsSize, uint32* groups) => p_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);

	private typealias glGetPerfMonitorCountersAMD_t = function void(uint32 group, int32* numCounters, int32* maxActiveCounters, int32 counterSize, uint32* counters);
	private static glGetPerfMonitorCountersAMD_t p_glGetPerfMonitorCountersAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfMonitorCountersAMD(uint32 group, int32* numCounters, int32* maxActiveCounters, int32 counterSize, uint32* counters) => p_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);

	private typealias glGetPerfMonitorGroupStringAMD_t = function void(uint32 group, int32 bufSize, int32* length, char8* groupString);
	private static glGetPerfMonitorGroupStringAMD_t p_glGetPerfMonitorGroupStringAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfMonitorGroupStringAMD(uint32 group, int32 bufSize, int32* length, char8* groupString) => p_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);

	private typealias glGetPerfMonitorCounterStringAMD_t = function void(uint32 group, uint32 counter, int32 bufSize, int32* length, char8* counterString);
	private static glGetPerfMonitorCounterStringAMD_t p_glGetPerfMonitorCounterStringAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfMonitorCounterStringAMD(uint32 group, uint32 counter, int32 bufSize, int32* length, char8* counterString) => p_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);

	private typealias glGetPerfMonitorCounterInfoAMD_t = function void(uint32 group, uint32 counter, uint32 pname, void* data);
	private static glGetPerfMonitorCounterInfoAMD_t p_glGetPerfMonitorCounterInfoAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfMonitorCounterInfoAMD(uint32 group, uint32 counter, uint32 pname, void* data) => p_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);

	private typealias glGenPerfMonitorsAMD_t = function void(int32 n, uint32* monitors);
	private static glGenPerfMonitorsAMD_t p_glGenPerfMonitorsAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGenPerfMonitorsAMD(int32 n, uint32* monitors) => p_glGenPerfMonitorsAMD(n, monitors);

	private typealias glDeletePerfMonitorsAMD_t = function void(int32 n, uint32* monitors);
	private static glDeletePerfMonitorsAMD_t p_glDeletePerfMonitorsAMD;
	[CallingConvention(GL.CallConv)]
	public static void glDeletePerfMonitorsAMD(int32 n, uint32* monitors) => p_glDeletePerfMonitorsAMD(n, monitors);

	private typealias glSelectPerfMonitorCountersAMD_t = function void(uint32 monitor, bool enable, uint32 group, int32 numCounters, uint32* counterList);
	private static glSelectPerfMonitorCountersAMD_t p_glSelectPerfMonitorCountersAMD;
	[CallingConvention(GL.CallConv)]
	public static void glSelectPerfMonitorCountersAMD(uint32 monitor, bool enable, uint32 group, int32 numCounters, uint32* counterList) => p_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);

	private typealias glBeginPerfMonitorAMD_t = function void(uint32 monitor);
	private static glBeginPerfMonitorAMD_t p_glBeginPerfMonitorAMD;
	[CallingConvention(GL.CallConv)]
	public static void glBeginPerfMonitorAMD(uint32 monitor) => p_glBeginPerfMonitorAMD(monitor);

	private typealias glEndPerfMonitorAMD_t = function void(uint32 monitor);
	private static glEndPerfMonitorAMD_t p_glEndPerfMonitorAMD;
	[CallingConvention(GL.CallConv)]
	public static void glEndPerfMonitorAMD(uint32 monitor) => p_glEndPerfMonitorAMD(monitor);

	private typealias glGetPerfMonitorCounterDataAMD_t = function void(uint32 monitor, uint32 pname, int32 dataSize, uint32* data, int32* bytesWritten);
	private static glGetPerfMonitorCounterDataAMD_t p_glGetPerfMonitorCounterDataAMD;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfMonitorCounterDataAMD(uint32 monitor, uint32 pname, int32 dataSize, uint32* data, int32* bytesWritten) => p_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);

	private typealias glSetMultisamplefvAMD_t = function void(uint32 pname, uint32 index, float* val);
	private static glSetMultisamplefvAMD_t p_glSetMultisamplefvAMD;
	[CallingConvention(GL.CallConv)]
	public static void glSetMultisamplefvAMD(uint32 pname, uint32 index, float* val) => p_glSetMultisamplefvAMD(pname, index, val);

	private typealias glTexStorageSparseAMD_t = function void(TextureTarget target, InternalFormat internalFormat, int32 width, int32 height, int32 depth, int32 layers, uint32 flags);
	private static glTexStorageSparseAMD_t p_glTexStorageSparseAMD;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorageSparseAMD(TextureTarget target, InternalFormat internalFormat, int32 width, int32 height, int32 depth, int32 layers, uint32 flags) => p_glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);

	private typealias glTextureStorageSparseAMD_t = function void(uint32 texture, uint32 target, InternalFormat internalFormat, int32 width, int32 height, int32 depth, int32 layers, uint32 flags);
	private static glTextureStorageSparseAMD_t p_glTextureStorageSparseAMD;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorageSparseAMD(uint32 texture, uint32 target, InternalFormat internalFormat, int32 width, int32 height, int32 depth, int32 layers, uint32 flags) => p_glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);

	private typealias glStencilOpValueAMD_t = function void(StencilFaceDirection face, uint32 value);
	private static glStencilOpValueAMD_t p_glStencilOpValueAMD;
	[CallingConvention(GL.CallConv)]
	public static void glStencilOpValueAMD(StencilFaceDirection face, uint32 value) => p_glStencilOpValueAMD(face, value);

	private typealias glTessellationFactorAMD_t = function void(float factor);
	private static glTessellationFactorAMD_t p_glTessellationFactorAMD;
	[CallingConvention(GL.CallConv)]
	public static void glTessellationFactorAMD(float factor) => p_glTessellationFactorAMD(factor);

	private typealias glTessellationModeAMD_t = function void(uint32 mode);
	private static glTessellationModeAMD_t p_glTessellationModeAMD;
	[CallingConvention(GL.CallConv)]
	public static void glTessellationModeAMD(uint32 mode) => p_glTessellationModeAMD(mode);

	private typealias glBlitFramebufferANGLE_t = function void(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter);
	private static glBlitFramebufferANGLE_t p_glBlitFramebufferANGLE;
	[CallingConvention(GL.CallConv)]
	public static void glBlitFramebufferANGLE(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter) => p_glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

	private typealias glRenderbufferStorageMultisampleANGLE_t = function void(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisampleANGLE_t p_glRenderbufferStorageMultisampleANGLE;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisampleANGLE(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);

	private typealias glDrawArraysInstancedANGLE_t = function void(PrimitiveType mode, int32 first, int32 count, int32 primcount);
	private static glDrawArraysInstancedANGLE_t p_glDrawArraysInstancedANGLE;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysInstancedANGLE(PrimitiveType mode, int32 first, int32 count, int32 primcount) => p_glDrawArraysInstancedANGLE(mode, first, count, primcount);

	private typealias glDrawElementsInstancedANGLE_t = function void(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 primcount);
	private static glDrawElementsInstancedANGLE_t p_glDrawElementsInstancedANGLE;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedANGLE(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 primcount) => p_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount);

	private typealias glVertexAttribDivisorANGLE_t = function void(uint32 index, uint32 divisor);
	private static glVertexAttribDivisorANGLE_t p_glVertexAttribDivisorANGLE;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribDivisorANGLE(uint32 index, uint32 divisor) => p_glVertexAttribDivisorANGLE(index, divisor);

	private typealias glGetTranslatedShaderSourceANGLE_t = function void(uint32 shader, int32 bufsize, int32* length, char8* source);
	private static glGetTranslatedShaderSourceANGLE_t p_glGetTranslatedShaderSourceANGLE;
	[CallingConvention(GL.CallConv)]
	public static void glGetTranslatedShaderSourceANGLE(uint32 shader, int32 bufsize, int32* length, char8* source) => p_glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source);

	private typealias glCopyTextureLevelsAPPLE_t = function void(uint32 destinationTexture, uint32 sourceTexture, int32 sourceBaseLevel, int32 sourceLevelCount);
	private static glCopyTextureLevelsAPPLE_t p_glCopyTextureLevelsAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureLevelsAPPLE(uint32 destinationTexture, uint32 sourceTexture, int32 sourceBaseLevel, int32 sourceLevelCount) => p_glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);

	private typealias glElementPointerAPPLE_t = function void(uint32 type, void* pointer);
	private static glElementPointerAPPLE_t p_glElementPointerAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glElementPointerAPPLE(uint32 type, void* pointer) => p_glElementPointerAPPLE(type, pointer);

	private typealias glDrawElementArrayAPPLE_t = function void(PrimitiveType mode, int32 first, int32 count);
	private static glDrawElementArrayAPPLE_t p_glDrawElementArrayAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementArrayAPPLE(PrimitiveType mode, int32 first, int32 count) => p_glDrawElementArrayAPPLE(mode, first, count);

	private typealias glDrawRangeElementArrayAPPLE_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32 first, int32 count);
	private static glDrawRangeElementArrayAPPLE_t p_glDrawRangeElementArrayAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glDrawRangeElementArrayAPPLE(PrimitiveType mode, uint32 start, uint32 end, int32 first, int32 count) => p_glDrawRangeElementArrayAPPLE(mode, start, end, first, count);

	private typealias glMultiDrawElementArrayAPPLE_t = function void(PrimitiveType mode, int32* first, int32* count, int32 primcount);
	private static glMultiDrawElementArrayAPPLE_t p_glMultiDrawElementArrayAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementArrayAPPLE(PrimitiveType mode, int32* first, int32* count, int32 primcount) => p_glMultiDrawElementArrayAPPLE(mode, first, count, primcount);

	private typealias glMultiDrawRangeElementArrayAPPLE_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32* first, int32* count, int32 primcount);
	private static glMultiDrawRangeElementArrayAPPLE_t p_glMultiDrawRangeElementArrayAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint32 start, uint32 end, int32* first, int32* count, int32 primcount) => p_glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);

	private typealias glGenFencesAPPLE_t = function void(int32 n, uint32* fences);
	private static glGenFencesAPPLE_t p_glGenFencesAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glGenFencesAPPLE(int32 n, uint32* fences) => p_glGenFencesAPPLE(n, fences);

	private typealias glDeleteFencesAPPLE_t = function void(int32 n, uint32* fences);
	private static glDeleteFencesAPPLE_t p_glDeleteFencesAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteFencesAPPLE(int32 n, uint32* fences) => p_glDeleteFencesAPPLE(n, fences);

	private typealias glSetFenceAPPLE_t = function void(uint32 fence);
	private static glSetFenceAPPLE_t p_glSetFenceAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glSetFenceAPPLE(uint32 fence) => p_glSetFenceAPPLE(fence);

	private typealias glIsFenceAPPLE_t = function bool(uint32 fence);
	private static glIsFenceAPPLE_t p_glIsFenceAPPLE;
	[CallingConvention(GL.CallConv)]
	public static bool glIsFenceAPPLE(uint32 fence) => p_glIsFenceAPPLE(fence);

	private typealias glTestFenceAPPLE_t = function bool(uint32 fence);
	private static glTestFenceAPPLE_t p_glTestFenceAPPLE;
	[CallingConvention(GL.CallConv)]
	public static bool glTestFenceAPPLE(uint32 fence) => p_glTestFenceAPPLE(fence);

	private typealias glFinishFenceAPPLE_t = function void(uint32 fence);
	private static glFinishFenceAPPLE_t p_glFinishFenceAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glFinishFenceAPPLE(uint32 fence) => p_glFinishFenceAPPLE(fence);

	private typealias glTestObjectAPPLE_t = function bool(uint32 _object, uint32 name);
	private static glTestObjectAPPLE_t p_glTestObjectAPPLE;
	[CallingConvention(GL.CallConv)]
	public static bool glTestObjectAPPLE(uint32 _object, uint32 name) => p_glTestObjectAPPLE(_object, name);

	private typealias glFinishObjectAPPLE_t = function void(uint32 _object, int32 name);
	private static glFinishObjectAPPLE_t p_glFinishObjectAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glFinishObjectAPPLE(uint32 _object, int32 name) => p_glFinishObjectAPPLE(_object, name);

	private typealias glBufferParameteriAPPLE_t = function void(uint32 target, uint32 pname, int32 param);
	private static glBufferParameteriAPPLE_t p_glBufferParameteriAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glBufferParameteriAPPLE(uint32 target, uint32 pname, int32 param) => p_glBufferParameteriAPPLE(target, pname, param);

	private typealias glFlushMappedBufferRangeAPPLE_t = function void(BufferTargetARB target, void* offset, int32 size);
	private static glFlushMappedBufferRangeAPPLE_t p_glFlushMappedBufferRangeAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glFlushMappedBufferRangeAPPLE(BufferTargetARB target, void* offset, int32 size) => p_glFlushMappedBufferRangeAPPLE(target, offset, size);

	private typealias glRenderbufferStorageMultisampleAPPLE_t = function void(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisampleAPPLE_t p_glRenderbufferStorageMultisampleAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisampleAPPLE(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);

	private typealias glResolveMultisampleFramebufferAPPLE_t = function void();
	private static glResolveMultisampleFramebufferAPPLE_t p_glResolveMultisampleFramebufferAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glResolveMultisampleFramebufferAPPLE() => p_glResolveMultisampleFramebufferAPPLE();

	private typealias glObjectPurgeableAPPLE_t = function uint32(uint32 objectType, uint32 name, uint32 option);
	private static glObjectPurgeableAPPLE_t p_glObjectPurgeableAPPLE;
	[CallingConvention(GL.CallConv)]
	public static uint32 glObjectPurgeableAPPLE(uint32 objectType, uint32 name, uint32 option) => p_glObjectPurgeableAPPLE(objectType, name, option);

	private typealias glObjectUnpurgeableAPPLE_t = function uint32(uint32 objectType, uint32 name, uint32 option);
	private static glObjectUnpurgeableAPPLE_t p_glObjectUnpurgeableAPPLE;
	[CallingConvention(GL.CallConv)]
	public static uint32 glObjectUnpurgeableAPPLE(uint32 objectType, uint32 name, uint32 option) => p_glObjectUnpurgeableAPPLE(objectType, name, option);

	private typealias glGetObjectParameterivAPPLE_t = function void(uint32 objectType, uint32 name, uint32 pname, int32* @params);
	private static glGetObjectParameterivAPPLE_t p_glGetObjectParameterivAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectParameterivAPPLE(uint32 objectType, uint32 name, uint32 pname, int32* @params) => p_glGetObjectParameterivAPPLE(objectType, name, pname, @params);

	private typealias glFenceSyncAPPLE_t = function void*(SyncCondition condition, uint32 flags);
	private static glFenceSyncAPPLE_t p_glFenceSyncAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void* glFenceSyncAPPLE(SyncCondition condition, uint32 flags) => p_glFenceSyncAPPLE(condition, flags);

	private typealias glIsSyncAPPLE_t = function bool(void* sync);
	private static glIsSyncAPPLE_t p_glIsSyncAPPLE;
	[CallingConvention(GL.CallConv)]
	public static bool glIsSyncAPPLE(void* sync) => p_glIsSyncAPPLE(sync);

	private typealias glDeleteSyncAPPLE_t = function void(void* sync);
	private static glDeleteSyncAPPLE_t p_glDeleteSyncAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteSyncAPPLE(void* sync) => p_glDeleteSyncAPPLE(sync);

	private typealias glClientWaitSyncAPPLE_t = function SyncStatus(void* sync, uint32 flags, uint64 timeout);
	private static glClientWaitSyncAPPLE_t p_glClientWaitSyncAPPLE;
	[CallingConvention(GL.CallConv)]
	public static SyncStatus glClientWaitSyncAPPLE(void* sync, uint32 flags, uint64 timeout) => p_glClientWaitSyncAPPLE(sync, flags, timeout);

	private typealias glWaitSyncAPPLE_t = function void(void* sync, uint32 flags, uint64 timeout);
	private static glWaitSyncAPPLE_t p_glWaitSyncAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glWaitSyncAPPLE(void* sync, uint32 flags, uint64 timeout) => p_glWaitSyncAPPLE(sync, flags, timeout);

	private typealias glGetInteger64vAPPLE_t = function void(GetPName pname, int64* @params);
	private static glGetInteger64vAPPLE_t p_glGetInteger64vAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glGetInteger64vAPPLE(GetPName pname, int64* @params) => p_glGetInteger64vAPPLE(pname, @params);

	private typealias glGetSyncivAPPLE_t = function void(void* sync, SyncParameterName pname, int32 bufSize, int32* length, int32* values);
	private static glGetSyncivAPPLE_t p_glGetSyncivAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glGetSyncivAPPLE(void* sync, SyncParameterName pname, int32 bufSize, int32* length, int32* values) => p_glGetSyncivAPPLE(sync, pname, bufSize, length, values);

	private typealias glTextureRangeAPPLE_t = function void(uint32 target, int32 length, void* pointer);
	private static glTextureRangeAPPLE_t p_glTextureRangeAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glTextureRangeAPPLE(uint32 target, int32 length, void* pointer) => p_glTextureRangeAPPLE(target, length, pointer);

	private typealias glGetTexParameterPointervAPPLE_t = function void(uint32 target, uint32 pname, void** @params);
	private static glGetTexParameterPointervAPPLE_t p_glGetTexParameterPointervAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterPointervAPPLE(uint32 target, uint32 pname, void** @params) => p_glGetTexParameterPointervAPPLE(target, pname, @params);

	private typealias glBindVertexArrayAPPLE_t = function void(uint32 array);
	private static glBindVertexArrayAPPLE_t p_glBindVertexArrayAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glBindVertexArrayAPPLE(uint32 array) => p_glBindVertexArrayAPPLE(array);

	private typealias glDeleteVertexArraysAPPLE_t = function void(int32 n, uint32* arrays);
	private static glDeleteVertexArraysAPPLE_t p_glDeleteVertexArraysAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteVertexArraysAPPLE(int32 n, uint32* arrays) => p_glDeleteVertexArraysAPPLE(n, arrays);

	private typealias glGenVertexArraysAPPLE_t = function void(int32 n, uint32* arrays);
	private static glGenVertexArraysAPPLE_t p_glGenVertexArraysAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glGenVertexArraysAPPLE(int32 n, uint32* arrays) => p_glGenVertexArraysAPPLE(n, arrays);

	private typealias glIsVertexArrayAPPLE_t = function bool(uint32 array);
	private static glIsVertexArrayAPPLE_t p_glIsVertexArrayAPPLE;
	[CallingConvention(GL.CallConv)]
	public static bool glIsVertexArrayAPPLE(uint32 array) => p_glIsVertexArrayAPPLE(array);

	private typealias glVertexArrayRangeAPPLE_t = function void(int32 length, void* pointer);
	private static glVertexArrayRangeAPPLE_t p_glVertexArrayRangeAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayRangeAPPLE(int32 length, void* pointer) => p_glVertexArrayRangeAPPLE(length, pointer);

	private typealias glFlushVertexArrayRangeAPPLE_t = function void(int32 length, void* pointer);
	private static glFlushVertexArrayRangeAPPLE_t p_glFlushVertexArrayRangeAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glFlushVertexArrayRangeAPPLE(int32 length, void* pointer) => p_glFlushVertexArrayRangeAPPLE(length, pointer);

	private typealias glVertexArrayParameteriAPPLE_t = function void(uint32 pname, int32 param);
	private static glVertexArrayParameteriAPPLE_t p_glVertexArrayParameteriAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayParameteriAPPLE(uint32 pname, int32 param) => p_glVertexArrayParameteriAPPLE(pname, param);

	private typealias glEnableVertexAttribAPPLE_t = function void(uint32 index, uint32 pname);
	private static glEnableVertexAttribAPPLE_t p_glEnableVertexAttribAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glEnableVertexAttribAPPLE(uint32 index, uint32 pname) => p_glEnableVertexAttribAPPLE(index, pname);

	private typealias glDisableVertexAttribAPPLE_t = function void(uint32 index, uint32 pname);
	private static glDisableVertexAttribAPPLE_t p_glDisableVertexAttribAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glDisableVertexAttribAPPLE(uint32 index, uint32 pname) => p_glDisableVertexAttribAPPLE(index, pname);

	private typealias glIsVertexAttribEnabledAPPLE_t = function bool(uint32 index, uint32 pname);
	private static glIsVertexAttribEnabledAPPLE_t p_glIsVertexAttribEnabledAPPLE;
	[CallingConvention(GL.CallConv)]
	public static bool glIsVertexAttribEnabledAPPLE(uint32 index, uint32 pname) => p_glIsVertexAttribEnabledAPPLE(index, pname);

	private typealias glMapVertexAttrib1dAPPLE_t = function void(uint32 index, uint32 size, double u1, double u2, int32 stride, int32 order, double* points);
	private static glMapVertexAttrib1dAPPLE_t p_glMapVertexAttrib1dAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glMapVertexAttrib1dAPPLE(uint32 index, uint32 size, double u1, double u2, int32 stride, int32 order, double* points) => p_glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);

	private typealias glMapVertexAttrib1fAPPLE_t = function void(uint32 index, uint32 size, float u1, float u2, int32 stride, int32 order, float* points);
	private static glMapVertexAttrib1fAPPLE_t p_glMapVertexAttrib1fAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glMapVertexAttrib1fAPPLE(uint32 index, uint32 size, float u1, float u2, int32 stride, int32 order, float* points) => p_glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);

	private typealias glMapVertexAttrib2dAPPLE_t = function void(uint32 index, uint32 size, double u1, double u2, int32 ustride, int32 uorder, double v1, double v2, int32 vstride, int32 vorder, double* points);
	private static glMapVertexAttrib2dAPPLE_t p_glMapVertexAttrib2dAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glMapVertexAttrib2dAPPLE(uint32 index, uint32 size, double u1, double u2, int32 ustride, int32 uorder, double v1, double v2, int32 vstride, int32 vorder, double* points) => p_glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

	private typealias glMapVertexAttrib2fAPPLE_t = function void(uint32 index, uint32 size, float u1, float u2, int32 ustride, int32 uorder, float v1, float v2, int32 vstride, int32 vorder, float* points);
	private static glMapVertexAttrib2fAPPLE_t p_glMapVertexAttrib2fAPPLE;
	[CallingConvention(GL.CallConv)]
	public static void glMapVertexAttrib2fAPPLE(uint32 index, uint32 size, float u1, float u2, int32 ustride, int32 uorder, float v1, float v2, int32 vstride, int32 vorder, float* points) => p_glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

	private typealias glPrimitiveBoundingBoxARB_t = function void(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
	private static glPrimitiveBoundingBoxARB_t p_glPrimitiveBoundingBoxARB;
	[CallingConvention(GL.CallConv)]
	public static void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) => p_glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

	private typealias glGetTextureHandleARB_t = function uint64(uint32 texture);
	private static glGetTextureHandleARB_t p_glGetTextureHandleARB;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetTextureHandleARB(uint32 texture) => p_glGetTextureHandleARB(texture);

	private typealias glGetTextureSamplerHandleARB_t = function uint64(uint32 texture, uint32 sampler);
	private static glGetTextureSamplerHandleARB_t p_glGetTextureSamplerHandleARB;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetTextureSamplerHandleARB(uint32 texture, uint32 sampler) => p_glGetTextureSamplerHandleARB(texture, sampler);

	private typealias glMakeTextureHandleResidentARB_t = function void(uint64 handle);
	private static glMakeTextureHandleResidentARB_t p_glMakeTextureHandleResidentARB;
	[CallingConvention(GL.CallConv)]
	public static void glMakeTextureHandleResidentARB(uint64 handle) => p_glMakeTextureHandleResidentARB(handle);

	private typealias glMakeTextureHandleNonResidentARB_t = function void(uint64 handle);
	private static glMakeTextureHandleNonResidentARB_t p_glMakeTextureHandleNonResidentARB;
	[CallingConvention(GL.CallConv)]
	public static void glMakeTextureHandleNonResidentARB(uint64 handle) => p_glMakeTextureHandleNonResidentARB(handle);

	private typealias glGetImageHandleARB_t = function uint64(uint32 texture, int32 level, bool layered, int32 layer, PixelFormat format);
	private static glGetImageHandleARB_t p_glGetImageHandleARB;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetImageHandleARB(uint32 texture, int32 level, bool layered, int32 layer, PixelFormat format) => p_glGetImageHandleARB(texture, level, layered, layer, format);

	private typealias glMakeImageHandleResidentARB_t = function void(uint64 handle, uint32 access);
	private static glMakeImageHandleResidentARB_t p_glMakeImageHandleResidentARB;
	[CallingConvention(GL.CallConv)]
	public static void glMakeImageHandleResidentARB(uint64 handle, uint32 access) => p_glMakeImageHandleResidentARB(handle, access);

	private typealias glMakeImageHandleNonResidentARB_t = function void(uint64 handle);
	private static glMakeImageHandleNonResidentARB_t p_glMakeImageHandleNonResidentARB;
	[CallingConvention(GL.CallConv)]
	public static void glMakeImageHandleNonResidentARB(uint64 handle) => p_glMakeImageHandleNonResidentARB(handle);

	private typealias glUniformHandleui64ARB_t = function void(int32 location, uint64 value);
	private static glUniformHandleui64ARB_t p_glUniformHandleui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniformHandleui64ARB(int32 location, uint64 value) => p_glUniformHandleui64ARB(location, value);

	private typealias glUniformHandleui64vARB_t = function void(int32 location, int32 count, uint64* value);
	private static glUniformHandleui64vARB_t p_glUniformHandleui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniformHandleui64vARB(int32 location, int32 count, uint64* value) => p_glUniformHandleui64vARB(location, count, value);

	private typealias glProgramUniformHandleui64ARB_t = function void(uint32 program, int32 location, uint64 value);
	private static glProgramUniformHandleui64ARB_t p_glProgramUniformHandleui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformHandleui64ARB(uint32 program, int32 location, uint64 value) => p_glProgramUniformHandleui64ARB(program, location, value);

	private typealias glProgramUniformHandleui64vARB_t = function void(uint32 program, int32 location, int32 count, uint64* values);
	private static glProgramUniformHandleui64vARB_t p_glProgramUniformHandleui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformHandleui64vARB(uint32 program, int32 location, int32 count, uint64* values) => p_glProgramUniformHandleui64vARB(program, location, count, values);

	private typealias glIsTextureHandleResidentARB_t = function bool(uint64 handle);
	private static glIsTextureHandleResidentARB_t p_glIsTextureHandleResidentARB;
	[CallingConvention(GL.CallConv)]
	public static bool glIsTextureHandleResidentARB(uint64 handle) => p_glIsTextureHandleResidentARB(handle);

	private typealias glIsImageHandleResidentARB_t = function bool(uint64 handle);
	private static glIsImageHandleResidentARB_t p_glIsImageHandleResidentARB;
	[CallingConvention(GL.CallConv)]
	public static bool glIsImageHandleResidentARB(uint64 handle) => p_glIsImageHandleResidentARB(handle);

	private typealias glVertexAttribL1ui64ARB_t = function void(uint32 index, uint64 x);
	private static glVertexAttribL1ui64ARB_t p_glVertexAttribL1ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1ui64ARB(uint32 index, uint64 x) => p_glVertexAttribL1ui64ARB(index, x);

	private typealias glVertexAttribL1ui64vARB_t = function void(uint32 index, void* v);
	private static glVertexAttribL1ui64vARB_t p_glVertexAttribL1ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1ui64vARB(uint32 index, void* v) => p_glVertexAttribL1ui64vARB(index, v);

	private typealias glGetVertexAttribLui64vARB_t = function void(uint32 index, VertexAttribEnum pname, void* @params);
	private static glGetVertexAttribLui64vARB_t p_glGetVertexAttribLui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribLui64vARB(uint32 index, VertexAttribEnum pname, void* @params) => p_glGetVertexAttribLui64vARB(index, pname, @params);

	private typealias glCreateSyncFromCLeventARB_t = function void*(void* context, void* _event, uint32 flags);
	private static glCreateSyncFromCLeventARB_t p_glCreateSyncFromCLeventARB;
	[CallingConvention(GL.CallConv)]
	public static void* glCreateSyncFromCLeventARB(void* context, void* _event, uint32 flags) => p_glCreateSyncFromCLeventARB(context, _event, flags);

	private typealias glClampColorARB_t = function void(uint32 target, uint32 clamp);
	private static glClampColorARB_t p_glClampColorARB;
	[CallingConvention(GL.CallConv)]
	public static void glClampColorARB(uint32 target, uint32 clamp) => p_glClampColorARB(target, clamp);

	private typealias glDispatchComputeGroupSizeARB_t = function void(uint32 num_groups_x, uint32 num_groups_y, uint32 num_groups_z, uint32 group_size_x, uint32 group_size_y, uint32 group_size_z);
	private static glDispatchComputeGroupSizeARB_t p_glDispatchComputeGroupSizeARB;
	[CallingConvention(GL.CallConv)]
	public static void glDispatchComputeGroupSizeARB(uint32 num_groups_x, uint32 num_groups_y, uint32 num_groups_z, uint32 group_size_x, uint32 group_size_y, uint32 group_size_z) => p_glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);

	private typealias glDebugMessageControlARB_t = function void(DebugSource source, DebugType type, DebugSeverity severity, int32 count, uint32* ids, bool enabled);
	private static glDebugMessageControlARB_t p_glDebugMessageControlARB;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int32 count, uint32* ids, bool enabled) => p_glDebugMessageControlARB(source, type, severity, count, ids, enabled);

	private typealias glDebugMessageInsertARB_t = function void(DebugSource source, DebugType type, uint32 id, DebugSeverity severity, int32 length, char8* buf);
	private static glDebugMessageInsertARB_t p_glDebugMessageInsertARB;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageInsertARB(DebugSource source, DebugType type, uint32 id, DebugSeverity severity, int32 length, char8* buf) => p_glDebugMessageInsertARB(source, type, id, severity, length, buf);

	private typealias glDebugMessageCallbackARB_t = function void(void* callback, void* userParam);
	private static glDebugMessageCallbackARB_t p_glDebugMessageCallbackARB;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageCallbackARB(void* callback, void* userParam) => p_glDebugMessageCallbackARB(callback, userParam);

	private typealias glGetDebugMessageLogARB_t = function uint32(uint32 count, int32 bufSize, uint32* sources, uint32* types, uint32* ids, uint32* severities, int32* lengths, char8* messageLog);
	private static glGetDebugMessageLogARB_t p_glGetDebugMessageLogARB;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetDebugMessageLogARB(uint32 count, int32 bufSize, uint32* sources, uint32* types, uint32* ids, uint32* severities, int32* lengths, char8* messageLog) => p_glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);

	private typealias glDrawBuffersARB_t = function void(int32 n, uint32* bufs);
	private static glDrawBuffersARB_t p_glDrawBuffersARB;
	[CallingConvention(GL.CallConv)]
	public static void glDrawBuffersARB(int32 n, uint32* bufs) => p_glDrawBuffersARB(n, bufs);

	private typealias glBlendEquationiARB_t = function void(uint32 buf, BlendEquationModeEXT mode);
	private static glBlendEquationiARB_t p_glBlendEquationiARB;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationiARB(uint32 buf, BlendEquationModeEXT mode) => p_glBlendEquationiARB(buf, mode);

	private typealias glBlendEquationSeparateiARB_t = function void(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparateiARB_t p_glBlendEquationSeparateiARB;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparateiARB(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);

	private typealias glBlendFunciARB_t = function void(uint32 buf, BlendingFactor src, BlendingFactor dst);
	private static glBlendFunciARB_t p_glBlendFunciARB;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFunciARB(uint32 buf, BlendingFactor src, BlendingFactor dst) => p_glBlendFunciARB(buf, src, dst);

	private typealias glBlendFuncSeparateiARB_t = function void(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
	private static glBlendFuncSeparateiARB_t p_glBlendFuncSeparateiARB;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparateiARB(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) => p_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

	private typealias glDrawArraysInstancedARB_t = function void(PrimitiveType mode, int32 first, int32 count, int32 primcount);
	private static glDrawArraysInstancedARB_t p_glDrawArraysInstancedARB;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysInstancedARB(PrimitiveType mode, int32 first, int32 count, int32 primcount) => p_glDrawArraysInstancedARB(mode, first, count, primcount);

	private typealias glDrawElementsInstancedARB_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 primcount);
	private static glDrawElementsInstancedARB_t p_glDrawElementsInstancedARB;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedARB(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 primcount) => p_glDrawElementsInstancedARB(mode, count, type, indices, primcount);

	private typealias glProgramStringARB_t = function void(uint32 target, uint32 format, int32 len, void* @string);
	private static glProgramStringARB_t p_glProgramStringARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramStringARB(uint32 target, uint32 format, int32 len, void* @string) => p_glProgramStringARB(target, format, len, @string);

	private typealias glBindProgramARB_t = function void(uint32 target, uint32 program);
	private static glBindProgramARB_t p_glBindProgramARB;
	[CallingConvention(GL.CallConv)]
	public static void glBindProgramARB(uint32 target, uint32 program) => p_glBindProgramARB(target, program);

	private typealias glDeleteProgramsARB_t = function void(int32 n, uint32* programs);
	private static glDeleteProgramsARB_t p_glDeleteProgramsARB;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteProgramsARB(int32 n, uint32* programs) => p_glDeleteProgramsARB(n, programs);

	private typealias glGenProgramsARB_t = function void(int32 n, uint32* programs);
	private static glGenProgramsARB_t p_glGenProgramsARB;
	[CallingConvention(GL.CallConv)]
	public static void glGenProgramsARB(int32 n, uint32* programs) => p_glGenProgramsARB(n, programs);

	private typealias glProgramEnvParameter4dARB_t = function void(uint32 target, uint32 index, double x, double y, double z, double w);
	private static glProgramEnvParameter4dARB_t p_glProgramEnvParameter4dARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameter4dARB(uint32 target, uint32 index, double x, double y, double z, double w) => p_glProgramEnvParameter4dARB(target, index, x, y, z, w);

	private typealias glProgramEnvParameter4dvARB_t = function void(uint32 target, uint32 index, double* @params);
	private static glProgramEnvParameter4dvARB_t p_glProgramEnvParameter4dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameter4dvARB(uint32 target, uint32 index, double* @params) => p_glProgramEnvParameter4dvARB(target, index, @params);

	private typealias glProgramEnvParameter4fARB_t = function void(uint32 target, uint32 index, float x, float y, float z, float w);
	private static glProgramEnvParameter4fARB_t p_glProgramEnvParameter4fARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameter4fARB(uint32 target, uint32 index, float x, float y, float z, float w) => p_glProgramEnvParameter4fARB(target, index, x, y, z, w);

	private typealias glProgramEnvParameter4fvARB_t = function void(uint32 target, uint32 index, float* @params);
	private static glProgramEnvParameter4fvARB_t p_glProgramEnvParameter4fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameter4fvARB(uint32 target, uint32 index, float* @params) => p_glProgramEnvParameter4fvARB(target, index, @params);

	private typealias glProgramLocalParameter4dARB_t = function void(uint32 target, uint32 index, double x, double y, double z, double w);
	private static glProgramLocalParameter4dARB_t p_glProgramLocalParameter4dARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameter4dARB(uint32 target, uint32 index, double x, double y, double z, double w) => p_glProgramLocalParameter4dARB(target, index, x, y, z, w);

	private typealias glProgramLocalParameter4dvARB_t = function void(uint32 target, uint32 index, double* @params);
	private static glProgramLocalParameter4dvARB_t p_glProgramLocalParameter4dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameter4dvARB(uint32 target, uint32 index, double* @params) => p_glProgramLocalParameter4dvARB(target, index, @params);

	private typealias glProgramLocalParameter4fARB_t = function void(uint32 target, uint32 index, float x, float y, float z, float w);
	private static glProgramLocalParameter4fARB_t p_glProgramLocalParameter4fARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameter4fARB(uint32 target, uint32 index, float x, float y, float z, float w) => p_glProgramLocalParameter4fARB(target, index, x, y, z, w);

	private typealias glProgramLocalParameter4fvARB_t = function void(uint32 target, uint32 index, float* @params);
	private static glProgramLocalParameter4fvARB_t p_glProgramLocalParameter4fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameter4fvARB(uint32 target, uint32 index, float* @params) => p_glProgramLocalParameter4fvARB(target, index, @params);

	private typealias glGetProgramEnvParameterdvARB_t = function void(uint32 target, uint32 index, double* @params);
	private static glGetProgramEnvParameterdvARB_t p_glGetProgramEnvParameterdvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramEnvParameterdvARB(uint32 target, uint32 index, double* @params) => p_glGetProgramEnvParameterdvARB(target, index, @params);

	private typealias glGetProgramEnvParameterfvARB_t = function void(uint32 target, uint32 index, float* @params);
	private static glGetProgramEnvParameterfvARB_t p_glGetProgramEnvParameterfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramEnvParameterfvARB(uint32 target, uint32 index, float* @params) => p_glGetProgramEnvParameterfvARB(target, index, @params);

	private typealias glGetProgramLocalParameterdvARB_t = function void(uint32 target, uint32 index, double* @params);
	private static glGetProgramLocalParameterdvARB_t p_glGetProgramLocalParameterdvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramLocalParameterdvARB(uint32 target, uint32 index, double* @params) => p_glGetProgramLocalParameterdvARB(target, index, @params);

	private typealias glGetProgramLocalParameterfvARB_t = function void(uint32 target, uint32 index, float* @params);
	private static glGetProgramLocalParameterfvARB_t p_glGetProgramLocalParameterfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramLocalParameterfvARB(uint32 target, uint32 index, float* @params) => p_glGetProgramLocalParameterfvARB(target, index, @params);

	private typealias glGetProgramivARB_t = function void(uint32 target, ProgramPropertyARB pname, int32* @params);
	private static glGetProgramivARB_t p_glGetProgramivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramivARB(uint32 target, ProgramPropertyARB pname, int32* @params) => p_glGetProgramivARB(target, pname, @params);

	private typealias glGetProgramStringARB_t = function void(uint32 target, uint32 pname, void* @string);
	private static glGetProgramStringARB_t p_glGetProgramStringARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramStringARB(uint32 target, uint32 pname, void* @string) => p_glGetProgramStringARB(target, pname, @string);

	private typealias glIsProgramARB_t = function bool(uint32 program);
	private static glIsProgramARB_t p_glIsProgramARB;
	[CallingConvention(GL.CallConv)]
	public static bool glIsProgramARB(uint32 program) => p_glIsProgramARB(program);

	private typealias glProgramParameteriARB_t = function void(uint32 program, ProgramParameterPName pname, int32 value);
	private static glProgramParameteriARB_t p_glProgramParameteriARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameteriARB(uint32 program, ProgramParameterPName pname, int32 value) => p_glProgramParameteriARB(program, pname, value);

	private typealias glFramebufferTextureARB_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level);
	private static glFramebufferTextureARB_t p_glFramebufferTextureARB;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureARB(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level) => p_glFramebufferTextureARB(target, attachment, texture, level);

	private typealias glFramebufferTextureLayerARB_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer);
	private static glFramebufferTextureLayerARB_t p_glFramebufferTextureLayerARB;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureLayerARB(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer) => p_glFramebufferTextureLayerARB(target, attachment, texture, level, layer);

	private typealias glFramebufferTextureFaceARB_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, TextureTarget face);
	private static glFramebufferTextureFaceARB_t p_glFramebufferTextureFaceARB;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureFaceARB(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, TextureTarget face) => p_glFramebufferTextureFaceARB(target, attachment, texture, level, face);

	private typealias glSpecializeShaderARB_t = function void(uint32 shader, char8* pEntryPoint, uint32 numSpecializationConstants, uint32* pConstantIndex, uint32* pConstantValue);
	private static glSpecializeShaderARB_t p_glSpecializeShaderARB;
	[CallingConvention(GL.CallConv)]
	public static void glSpecializeShaderARB(uint32 shader, char8* pEntryPoint, uint32 numSpecializationConstants, uint32* pConstantIndex, uint32* pConstantValue) => p_glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

	private typealias glUniform1i64ARB_t = function void(int32 location, int64 x);
	private static glUniform1i64ARB_t p_glUniform1i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1i64ARB(int32 location, int64 x) => p_glUniform1i64ARB(location, x);

	private typealias glUniform2i64ARB_t = function void(int32 location, int64 x, int64 y);
	private static glUniform2i64ARB_t p_glUniform2i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2i64ARB(int32 location, int64 x, int64 y) => p_glUniform2i64ARB(location, x, y);

	private typealias glUniform3i64ARB_t = function void(int32 location, int64 x, int64 y, int64 z);
	private static glUniform3i64ARB_t p_glUniform3i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3i64ARB(int32 location, int64 x, int64 y, int64 z) => p_glUniform3i64ARB(location, x, y, z);

	private typealias glUniform4i64ARB_t = function void(int32 location, int64 x, int64 y, int64 z, int64 w);
	private static glUniform4i64ARB_t p_glUniform4i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4i64ARB(int32 location, int64 x, int64 y, int64 z, int64 w) => p_glUniform4i64ARB(location, x, y, z, w);

	private typealias glUniform1i64vARB_t = function void(int32 location, int32 count, int64* value);
	private static glUniform1i64vARB_t p_glUniform1i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1i64vARB(int32 location, int32 count, int64* value) => p_glUniform1i64vARB(location, count, value);

	private typealias glUniform2i64vARB_t = function void(int32 location, int32 count, int64* value);
	private static glUniform2i64vARB_t p_glUniform2i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2i64vARB(int32 location, int32 count, int64* value) => p_glUniform2i64vARB(location, count, value);

	private typealias glUniform3i64vARB_t = function void(int32 location, int32 count, int64* value);
	private static glUniform3i64vARB_t p_glUniform3i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3i64vARB(int32 location, int32 count, int64* value) => p_glUniform3i64vARB(location, count, value);

	private typealias glUniform4i64vARB_t = function void(int32 location, int32 count, int64* value);
	private static glUniform4i64vARB_t p_glUniform4i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4i64vARB(int32 location, int32 count, int64* value) => p_glUniform4i64vARB(location, count, value);

	private typealias glUniform1ui64ARB_t = function void(int32 location, uint64 x);
	private static glUniform1ui64ARB_t p_glUniform1ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1ui64ARB(int32 location, uint64 x) => p_glUniform1ui64ARB(location, x);

	private typealias glUniform2ui64ARB_t = function void(int32 location, uint64 x, uint64 y);
	private static glUniform2ui64ARB_t p_glUniform2ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2ui64ARB(int32 location, uint64 x, uint64 y) => p_glUniform2ui64ARB(location, x, y);

	private typealias glUniform3ui64ARB_t = function void(int32 location, uint64 x, uint64 y, uint64 z);
	private static glUniform3ui64ARB_t p_glUniform3ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3ui64ARB(int32 location, uint64 x, uint64 y, uint64 z) => p_glUniform3ui64ARB(location, x, y, z);

	private typealias glUniform4ui64ARB_t = function void(int32 location, uint64 x, uint64 y, uint64 z, uint64 w);
	private static glUniform4ui64ARB_t p_glUniform4ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4ui64ARB(int32 location, uint64 x, uint64 y, uint64 z, uint64 w) => p_glUniform4ui64ARB(location, x, y, z, w);

	private typealias glUniform1ui64vARB_t = function void(int32 location, int32 count, uint64* value);
	private static glUniform1ui64vARB_t p_glUniform1ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1ui64vARB(int32 location, int32 count, uint64* value) => p_glUniform1ui64vARB(location, count, value);

	private typealias glUniform2ui64vARB_t = function void(int32 location, int32 count, uint64* value);
	private static glUniform2ui64vARB_t p_glUniform2ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2ui64vARB(int32 location, int32 count, uint64* value) => p_glUniform2ui64vARB(location, count, value);

	private typealias glUniform3ui64vARB_t = function void(int32 location, int32 count, uint64* value);
	private static glUniform3ui64vARB_t p_glUniform3ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3ui64vARB(int32 location, int32 count, uint64* value) => p_glUniform3ui64vARB(location, count, value);

	private typealias glUniform4ui64vARB_t = function void(int32 location, int32 count, uint64* value);
	private static glUniform4ui64vARB_t p_glUniform4ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4ui64vARB(int32 location, int32 count, uint64* value) => p_glUniform4ui64vARB(location, count, value);

	private typealias glGetUniformi64vARB_t = function void(uint32 program, int32 location, int64* @params);
	private static glGetUniformi64vARB_t p_glGetUniformi64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformi64vARB(uint32 program, int32 location, int64* @params) => p_glGetUniformi64vARB(program, location, @params);

	private typealias glGetUniformui64vARB_t = function void(uint32 program, int32 location, uint64* @params);
	private static glGetUniformui64vARB_t p_glGetUniformui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformui64vARB(uint32 program, int32 location, uint64* @params) => p_glGetUniformui64vARB(program, location, @params);

	private typealias glGetnUniformi64vARB_t = function void(uint32 program, int32 location, int32 bufSize, int64* @params);
	private static glGetnUniformi64vARB_t p_glGetnUniformi64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformi64vARB(uint32 program, int32 location, int32 bufSize, int64* @params) => p_glGetnUniformi64vARB(program, location, bufSize, @params);

	private typealias glGetnUniformui64vARB_t = function void(uint32 program, int32 location, int32 bufSize, uint64* @params);
	private static glGetnUniformui64vARB_t p_glGetnUniformui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformui64vARB(uint32 program, int32 location, int32 bufSize, uint64* @params) => p_glGetnUniformui64vARB(program, location, bufSize, @params);

	private typealias glProgramUniform1i64ARB_t = function void(uint32 program, int32 location, int64 x);
	private static glProgramUniform1i64ARB_t p_glProgramUniform1i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1i64ARB(uint32 program, int32 location, int64 x) => p_glProgramUniform1i64ARB(program, location, x);

	private typealias glProgramUniform2i64ARB_t = function void(uint32 program, int32 location, int64 x, int64 y);
	private static glProgramUniform2i64ARB_t p_glProgramUniform2i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2i64ARB(uint32 program, int32 location, int64 x, int64 y) => p_glProgramUniform2i64ARB(program, location, x, y);

	private typealias glProgramUniform3i64ARB_t = function void(uint32 program, int32 location, int64 x, int64 y, int64 z);
	private static glProgramUniform3i64ARB_t p_glProgramUniform3i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3i64ARB(uint32 program, int32 location, int64 x, int64 y, int64 z) => p_glProgramUniform3i64ARB(program, location, x, y, z);

	private typealias glProgramUniform4i64ARB_t = function void(uint32 program, int32 location, int64 x, int64 y, int64 z, int64 w);
	private static glProgramUniform4i64ARB_t p_glProgramUniform4i64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4i64ARB(uint32 program, int32 location, int64 x, int64 y, int64 z, int64 w) => p_glProgramUniform4i64ARB(program, location, x, y, z, w);

	private typealias glProgramUniform1i64vARB_t = function void(uint32 program, int32 location, int32 count, int64* value);
	private static glProgramUniform1i64vARB_t p_glProgramUniform1i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1i64vARB(uint32 program, int32 location, int32 count, int64* value) => p_glProgramUniform1i64vARB(program, location, count, value);

	private typealias glProgramUniform2i64vARB_t = function void(uint32 program, int32 location, int32 count, int64* value);
	private static glProgramUniform2i64vARB_t p_glProgramUniform2i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2i64vARB(uint32 program, int32 location, int32 count, int64* value) => p_glProgramUniform2i64vARB(program, location, count, value);

	private typealias glProgramUniform3i64vARB_t = function void(uint32 program, int32 location, int32 count, int64* value);
	private static glProgramUniform3i64vARB_t p_glProgramUniform3i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3i64vARB(uint32 program, int32 location, int32 count, int64* value) => p_glProgramUniform3i64vARB(program, location, count, value);

	private typealias glProgramUniform4i64vARB_t = function void(uint32 program, int32 location, int32 count, int64* value);
	private static glProgramUniform4i64vARB_t p_glProgramUniform4i64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4i64vARB(uint32 program, int32 location, int32 count, int64* value) => p_glProgramUniform4i64vARB(program, location, count, value);

	private typealias glProgramUniform1ui64ARB_t = function void(uint32 program, int32 location, uint64 x);
	private static glProgramUniform1ui64ARB_t p_glProgramUniform1ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1ui64ARB(uint32 program, int32 location, uint64 x) => p_glProgramUniform1ui64ARB(program, location, x);

	private typealias glProgramUniform2ui64ARB_t = function void(uint32 program, int32 location, uint64 x, uint64 y);
	private static glProgramUniform2ui64ARB_t p_glProgramUniform2ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2ui64ARB(uint32 program, int32 location, uint64 x, uint64 y) => p_glProgramUniform2ui64ARB(program, location, x, y);

	private typealias glProgramUniform3ui64ARB_t = function void(uint32 program, int32 location, uint64 x, uint64 y, uint64 z);
	private static glProgramUniform3ui64ARB_t p_glProgramUniform3ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3ui64ARB(uint32 program, int32 location, uint64 x, uint64 y, uint64 z) => p_glProgramUniform3ui64ARB(program, location, x, y, z);

	private typealias glProgramUniform4ui64ARB_t = function void(uint32 program, int32 location, uint64 x, uint64 y, uint64 z, uint64 w);
	private static glProgramUniform4ui64ARB_t p_glProgramUniform4ui64ARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4ui64ARB(uint32 program, int32 location, uint64 x, uint64 y, uint64 z, uint64 w) => p_glProgramUniform4ui64ARB(program, location, x, y, z, w);

	private typealias glProgramUniform1ui64vARB_t = function void(uint32 program, int32 location, int32 count, uint64* value);
	private static glProgramUniform1ui64vARB_t p_glProgramUniform1ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1ui64vARB(uint32 program, int32 location, int32 count, uint64* value) => p_glProgramUniform1ui64vARB(program, location, count, value);

	private typealias glProgramUniform2ui64vARB_t = function void(uint32 program, int32 location, int32 count, uint64* value);
	private static glProgramUniform2ui64vARB_t p_glProgramUniform2ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2ui64vARB(uint32 program, int32 location, int32 count, uint64* value) => p_glProgramUniform2ui64vARB(program, location, count, value);

	private typealias glProgramUniform3ui64vARB_t = function void(uint32 program, int32 location, int32 count, uint64* value);
	private static glProgramUniform3ui64vARB_t p_glProgramUniform3ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3ui64vARB(uint32 program, int32 location, int32 count, uint64* value) => p_glProgramUniform3ui64vARB(program, location, count, value);

	private typealias glProgramUniform4ui64vARB_t = function void(uint32 program, int32 location, int32 count, uint64* value);
	private static glProgramUniform4ui64vARB_t p_glProgramUniform4ui64vARB;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4ui64vARB(uint32 program, int32 location, int32 count, uint64* value) => p_glProgramUniform4ui64vARB(program, location, count, value);

	private typealias glColorTable_t = function void(ColorTableTarget target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* table);
	private static glColorTable_t p_glColorTable;
	[CallingConvention(GL.CallConv)]
	public static void glColorTable(ColorTableTarget target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* table) => p_glColorTable(target, internalformat, width, format, type, table);

	private typealias glColorTableParameterfv_t = function void(ColorTableTarget target, ColorTableParameterPNameSGI pname, float* @params);
	private static glColorTableParameterfv_t p_glColorTableParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glColorTableParameterfv(ColorTableTarget target, ColorTableParameterPNameSGI pname, float* @params) => p_glColorTableParameterfv(target, pname, @params);

	private typealias glColorTableParameteriv_t = function void(ColorTableTarget target, ColorTableParameterPNameSGI pname, int32* @params);
	private static glColorTableParameteriv_t p_glColorTableParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glColorTableParameteriv(ColorTableTarget target, ColorTableParameterPNameSGI pname, int32* @params) => p_glColorTableParameteriv(target, pname, @params);

	private typealias glCopyColorTable_t = function void(ColorTableTarget target, InternalFormat internalformat, int32 x, int32 y, int32 width);
	private static glCopyColorTable_t p_glCopyColorTable;
	[CallingConvention(GL.CallConv)]
	public static void glCopyColorTable(ColorTableTarget target, InternalFormat internalformat, int32 x, int32 y, int32 width) => p_glCopyColorTable(target, internalformat, x, y, width);

	private typealias glGetColorTable_t = function void(ColorTableTarget target, PixelFormat format, PixelType type, void* table);
	private static glGetColorTable_t p_glGetColorTable;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, void* table) => p_glGetColorTable(target, format, type, table);

	private typealias glGetColorTableParameterfv_t = function void(ColorTableTarget target, GetColorTableParameterPNameSGI pname, float* @params);
	private static glGetColorTableParameterfv_t p_glGetColorTableParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableParameterfv(ColorTableTarget target, GetColorTableParameterPNameSGI pname, float* @params) => p_glGetColorTableParameterfv(target, pname, @params);

	private typealias glGetColorTableParameteriv_t = function void(ColorTableTarget target, GetColorTableParameterPNameSGI pname, int32* @params);
	private static glGetColorTableParameteriv_t p_glGetColorTableParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableParameteriv(ColorTableTarget target, GetColorTableParameterPNameSGI pname, int32* @params) => p_glGetColorTableParameteriv(target, pname, @params);

	private typealias glColorSubTable_t = function void(ColorTableTarget target, int32 start, int32 count, PixelFormat format, PixelType type, void* data);
	private static glColorSubTable_t p_glColorSubTable;
	[CallingConvention(GL.CallConv)]
	public static void glColorSubTable(ColorTableTarget target, int32 start, int32 count, PixelFormat format, PixelType type, void* data) => p_glColorSubTable(target, start, count, format, type, data);

	private typealias glCopyColorSubTable_t = function void(ColorTableTarget target, int32 start, int32 x, int32 y, int32 width);
	private static glCopyColorSubTable_t p_glCopyColorSubTable;
	[CallingConvention(GL.CallConv)]
	public static void glCopyColorSubTable(ColorTableTarget target, int32 start, int32 x, int32 y, int32 width) => p_glCopyColorSubTable(target, start, x, y, width);

	private typealias glConvolutionFilter1D_t = function void(ConvolutionTarget target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* image);
	private static glConvolutionFilter1D_t p_glConvolutionFilter1D;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* image) => p_glConvolutionFilter1D(target, internalformat, width, format, type, image);

	private typealias glConvolutionFilter2D_t = function void(ConvolutionTarget target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* image);
	private static glConvolutionFilter2D_t p_glConvolutionFilter2D;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* image) => p_glConvolutionFilter2D(target, internalformat, width, height, format, type, image);

	private typealias glConvolutionParameterf_t = function void(ConvolutionTarget target, ConvolutionParameterEXT pname, float @params);
	private static glConvolutionParameterf_t p_glConvolutionParameterf;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameterf(ConvolutionTarget target, ConvolutionParameterEXT pname, float @params) => p_glConvolutionParameterf(target, pname, @params);

	private typealias glConvolutionParameterfv_t = function void(ConvolutionTarget target, ConvolutionParameterEXT pname, float* @params);
	private static glConvolutionParameterfv_t p_glConvolutionParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameterEXT pname, float* @params) => p_glConvolutionParameterfv(target, pname, @params);

	private typealias glConvolutionParameteri_t = function void(ConvolutionTarget target, ConvolutionParameterEXT pname, int32 @params);
	private static glConvolutionParameteri_t p_glConvolutionParameteri;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameteri(ConvolutionTarget target, ConvolutionParameterEXT pname, int32 @params) => p_glConvolutionParameteri(target, pname, @params);

	private typealias glConvolutionParameteriv_t = function void(ConvolutionTarget target, ConvolutionParameterEXT pname, int32* @params);
	private static glConvolutionParameteriv_t p_glConvolutionParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameterEXT pname, int32* @params) => p_glConvolutionParameteriv(target, pname, @params);

	private typealias glCopyConvolutionFilter1D_t = function void(ConvolutionTarget target, InternalFormat internalformat, int32 x, int32 y, int32 width);
	private static glCopyConvolutionFilter1D_t p_glCopyConvolutionFilter1D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int32 x, int32 y, int32 width) => p_glCopyConvolutionFilter1D(target, internalformat, x, y, width);

	private typealias glCopyConvolutionFilter2D_t = function void(ConvolutionTarget target, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height);
	private static glCopyConvolutionFilter2D_t p_glCopyConvolutionFilter2D;
	[CallingConvention(GL.CallConv)]
	public static void glCopyConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height) => p_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);

	private typealias glGetConvolutionFilter_t = function void(ConvolutionTarget target, PixelFormat format, PixelType type, void* image);
	private static glGetConvolutionFilter_t p_glGetConvolutionFilter;
	[CallingConvention(GL.CallConv)]
	public static void glGetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, void* image) => p_glGetConvolutionFilter(target, format, type, image);

	private typealias glGetConvolutionParameterfv_t = function void(ConvolutionTarget target, ConvolutionParameterEXT pname, float* @params);
	private static glGetConvolutionParameterfv_t p_glGetConvolutionParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameterEXT pname, float* @params) => p_glGetConvolutionParameterfv(target, pname, @params);

	private typealias glGetConvolutionParameteriv_t = function void(ConvolutionTarget target, ConvolutionParameterEXT pname, int32* @params);
	private static glGetConvolutionParameteriv_t p_glGetConvolutionParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameterEXT pname, int32* @params) => p_glGetConvolutionParameteriv(target, pname, @params);

	private typealias glGetSeparableFilter_t = function void(SeparableTargetEXT target, PixelFormat format, PixelType type, void* row, void* column, void* span);
	private static glGetSeparableFilter_t p_glGetSeparableFilter;
	[CallingConvention(GL.CallConv)]
	public static void glGetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, void* row, void* column, void* span) => p_glGetSeparableFilter(target, format, type, row, column, span);

	private typealias glSeparableFilter2D_t = function void(SeparableTargetEXT target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* row, void* column);
	private static glSeparableFilter2D_t p_glSeparableFilter2D;
	[CallingConvention(GL.CallConv)]
	public static void glSeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* row, void* column) => p_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);

	private typealias glGetHistogram_t = function void(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values);
	private static glGetHistogram_t p_glGetHistogram;
	[CallingConvention(GL.CallConv)]
	public static void glGetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values) => p_glGetHistogram(target, reset, format, type, values);

	private typealias glGetHistogramParameterfv_t = function void(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float* @params);
	private static glGetHistogramParameterfv_t p_glGetHistogramParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetHistogramParameterfv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float* @params) => p_glGetHistogramParameterfv(target, pname, @params);

	private typealias glGetHistogramParameteriv_t = function void(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int32* @params);
	private static glGetHistogramParameteriv_t p_glGetHistogramParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetHistogramParameteriv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int32* @params) => p_glGetHistogramParameteriv(target, pname, @params);

	private typealias glGetMinmax_t = function void(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values);
	private static glGetMinmax_t p_glGetMinmax;
	[CallingConvention(GL.CallConv)]
	public static void glGetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values) => p_glGetMinmax(target, reset, format, type, values);

	private typealias glGetMinmaxParameterfv_t = function void(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float* @params);
	private static glGetMinmaxParameterfv_t p_glGetMinmaxParameterfv;
	[CallingConvention(GL.CallConv)]
	public static void glGetMinmaxParameterfv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float* @params) => p_glGetMinmaxParameterfv(target, pname, @params);

	private typealias glGetMinmaxParameteriv_t = function void(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int32* @params);
	private static glGetMinmaxParameteriv_t p_glGetMinmaxParameteriv;
	[CallingConvention(GL.CallConv)]
	public static void glGetMinmaxParameteriv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int32* @params) => p_glGetMinmaxParameteriv(target, pname, @params);

	private typealias glHistogram_t = function void(HistogramTargetEXT target, int32 width, InternalFormat internalformat, bool sink);
	private static glHistogram_t p_glHistogram;
	[CallingConvention(GL.CallConv)]
	public static void glHistogram(HistogramTargetEXT target, int32 width, InternalFormat internalformat, bool sink) => p_glHistogram(target, width, internalformat, sink);

	private typealias glMinmax_t = function void(MinmaxTargetEXT target, InternalFormat internalformat, bool sink);
	private static glMinmax_t p_glMinmax;
	[CallingConvention(GL.CallConv)]
	public static void glMinmax(MinmaxTargetEXT target, InternalFormat internalformat, bool sink) => p_glMinmax(target, internalformat, sink);

	private typealias glResetHistogram_t = function void(HistogramTargetEXT target);
	private static glResetHistogram_t p_glResetHistogram;
	[CallingConvention(GL.CallConv)]
	public static void glResetHistogram(HistogramTargetEXT target) => p_glResetHistogram(target);

	private typealias glResetMinmax_t = function void(MinmaxTargetEXT target);
	private static glResetMinmax_t p_glResetMinmax;
	[CallingConvention(GL.CallConv)]
	public static void glResetMinmax(MinmaxTargetEXT target) => p_glResetMinmax(target);

	private typealias glMultiDrawArraysIndirectCountARB_t = function void(PrimitiveType mode, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride);
	private static glMultiDrawArraysIndirectCountARB_t p_glMultiDrawArraysIndirectCountARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysIndirectCountARB(PrimitiveType mode, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride) => p_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);

	private typealias glMultiDrawElementsIndirectCountARB_t = function void(PrimitiveType mode, DrawElementsType type, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride);
	private static glMultiDrawElementsIndirectCountARB_t p_glMultiDrawElementsIndirectCountARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsIndirectCountARB(PrimitiveType mode, DrawElementsType type, void* indirect, void* drawcount, int32 maxdrawcount, int32 stride) => p_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);

	private typealias glVertexAttribDivisorARB_t = function void(uint32 index, uint32 divisor);
	private static glVertexAttribDivisorARB_t p_glVertexAttribDivisorARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribDivisorARB(uint32 index, uint32 divisor) => p_glVertexAttribDivisorARB(index, divisor);

	private typealias glCurrentPaletteMatrixARB_t = function void(int32 index);
	private static glCurrentPaletteMatrixARB_t p_glCurrentPaletteMatrixARB;
	[CallingConvention(GL.CallConv)]
	public static void glCurrentPaletteMatrixARB(int32 index) => p_glCurrentPaletteMatrixARB(index);

	private typealias glMatrixIndexubvARB_t = function void(int32 size, uint8* indices);
	private static glMatrixIndexubvARB_t p_glMatrixIndexubvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixIndexubvARB(int32 size, uint8* indices) => p_glMatrixIndexubvARB(size, indices);

	private typealias glMatrixIndexusvARB_t = function void(int32 size, int16* indices);
	private static glMatrixIndexusvARB_t p_glMatrixIndexusvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixIndexusvARB(int32 size, int16* indices) => p_glMatrixIndexusvARB(size, indices);

	private typealias glMatrixIndexuivARB_t = function void(int32 size, uint32* indices);
	private static glMatrixIndexuivARB_t p_glMatrixIndexuivARB;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixIndexuivARB(int32 size, uint32* indices) => p_glMatrixIndexuivARB(size, indices);

	private typealias glMatrixIndexPointerARB_t = function void(int32 size, uint32 type, int32 stride, void* pointer);
	private static glMatrixIndexPointerARB_t p_glMatrixIndexPointerARB;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixIndexPointerARB(int32 size, uint32 type, int32 stride, void* pointer) => p_glMatrixIndexPointerARB(size, type, stride, pointer);

	private typealias glSampleCoverageARB_t = function void(float value, bool invert);
	private static glSampleCoverageARB_t p_glSampleCoverageARB;
	[CallingConvention(GL.CallConv)]
	public static void glSampleCoverageARB(float value, bool invert) => p_glSampleCoverageARB(value, invert);

	private typealias glActiveTextureARB_t = function void(TextureUnit texture);
	private static glActiveTextureARB_t p_glActiveTextureARB;
	[CallingConvention(GL.CallConv)]
	public static void glActiveTextureARB(TextureUnit texture) => p_glActiveTextureARB(texture);

	private typealias glClientActiveTextureARB_t = function void(TextureUnit texture);
	private static glClientActiveTextureARB_t p_glClientActiveTextureARB;
	[CallingConvention(GL.CallConv)]
	public static void glClientActiveTextureARB(TextureUnit texture) => p_glClientActiveTextureARB(texture);

	private typealias glMultiTexCoord1dARB_t = function void(TextureUnit target, double s);
	private static glMultiTexCoord1dARB_t p_glMultiTexCoord1dARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1dARB(TextureUnit target, double s) => p_glMultiTexCoord1dARB(target, s);

	private typealias glMultiTexCoord1dvARB_t = function void(TextureUnit target, double* v);
	private static glMultiTexCoord1dvARB_t p_glMultiTexCoord1dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1dvARB(TextureUnit target, double* v) => p_glMultiTexCoord1dvARB(target, v);

	private typealias glMultiTexCoord1fARB_t = function void(TextureUnit target, float s);
	private static glMultiTexCoord1fARB_t p_glMultiTexCoord1fARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1fARB(TextureUnit target, float s) => p_glMultiTexCoord1fARB(target, s);

	private typealias glMultiTexCoord1fvARB_t = function void(TextureUnit target, float* v);
	private static glMultiTexCoord1fvARB_t p_glMultiTexCoord1fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1fvARB(TextureUnit target, float* v) => p_glMultiTexCoord1fvARB(target, v);

	private typealias glMultiTexCoord1iARB_t = function void(TextureUnit target, int32 s);
	private static glMultiTexCoord1iARB_t p_glMultiTexCoord1iARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1iARB(TextureUnit target, int32 s) => p_glMultiTexCoord1iARB(target, s);

	private typealias glMultiTexCoord1ivARB_t = function void(TextureUnit target, int32* v);
	private static glMultiTexCoord1ivARB_t p_glMultiTexCoord1ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1ivARB(TextureUnit target, int32* v) => p_glMultiTexCoord1ivARB(target, v);

	private typealias glMultiTexCoord1sARB_t = function void(TextureUnit target, int16 s);
	private static glMultiTexCoord1sARB_t p_glMultiTexCoord1sARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1sARB(TextureUnit target, int16 s) => p_glMultiTexCoord1sARB(target, s);

	private typealias glMultiTexCoord1svARB_t = function void(TextureUnit target, int16* v);
	private static glMultiTexCoord1svARB_t p_glMultiTexCoord1svARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1svARB(TextureUnit target, int16* v) => p_glMultiTexCoord1svARB(target, v);

	private typealias glMultiTexCoord2dARB_t = function void(TextureUnit target, double s, double t);
	private static glMultiTexCoord2dARB_t p_glMultiTexCoord2dARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2dARB(TextureUnit target, double s, double t) => p_glMultiTexCoord2dARB(target, s, t);

	private typealias glMultiTexCoord2dvARB_t = function void(TextureUnit target, double* v);
	private static glMultiTexCoord2dvARB_t p_glMultiTexCoord2dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2dvARB(TextureUnit target, double* v) => p_glMultiTexCoord2dvARB(target, v);

	private typealias glMultiTexCoord2fARB_t = function void(TextureUnit target, float s, float t);
	private static glMultiTexCoord2fARB_t p_glMultiTexCoord2fARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2fARB(TextureUnit target, float s, float t) => p_glMultiTexCoord2fARB(target, s, t);

	private typealias glMultiTexCoord2fvARB_t = function void(TextureUnit target, float* v);
	private static glMultiTexCoord2fvARB_t p_glMultiTexCoord2fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2fvARB(TextureUnit target, float* v) => p_glMultiTexCoord2fvARB(target, v);

	private typealias glMultiTexCoord2iARB_t = function void(TextureUnit target, int32 s, int32 t);
	private static glMultiTexCoord2iARB_t p_glMultiTexCoord2iARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2iARB(TextureUnit target, int32 s, int32 t) => p_glMultiTexCoord2iARB(target, s, t);

	private typealias glMultiTexCoord2ivARB_t = function void(TextureUnit target, int32* v);
	private static glMultiTexCoord2ivARB_t p_glMultiTexCoord2ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2ivARB(TextureUnit target, int32* v) => p_glMultiTexCoord2ivARB(target, v);

	private typealias glMultiTexCoord2sARB_t = function void(TextureUnit target, int16 s, int16 t);
	private static glMultiTexCoord2sARB_t p_glMultiTexCoord2sARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2sARB(TextureUnit target, int16 s, int16 t) => p_glMultiTexCoord2sARB(target, s, t);

	private typealias glMultiTexCoord2svARB_t = function void(TextureUnit target, int16* v);
	private static glMultiTexCoord2svARB_t p_glMultiTexCoord2svARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2svARB(TextureUnit target, int16* v) => p_glMultiTexCoord2svARB(target, v);

	private typealias glMultiTexCoord3dARB_t = function void(TextureUnit target, double s, double t, double r);
	private static glMultiTexCoord3dARB_t p_glMultiTexCoord3dARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3dARB(TextureUnit target, double s, double t, double r) => p_glMultiTexCoord3dARB(target, s, t, r);

	private typealias glMultiTexCoord3dvARB_t = function void(TextureUnit target, double* v);
	private static glMultiTexCoord3dvARB_t p_glMultiTexCoord3dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3dvARB(TextureUnit target, double* v) => p_glMultiTexCoord3dvARB(target, v);

	private typealias glMultiTexCoord3fARB_t = function void(TextureUnit target, float s, float t, float r);
	private static glMultiTexCoord3fARB_t p_glMultiTexCoord3fARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3fARB(TextureUnit target, float s, float t, float r) => p_glMultiTexCoord3fARB(target, s, t, r);

	private typealias glMultiTexCoord3fvARB_t = function void(TextureUnit target, float* v);
	private static glMultiTexCoord3fvARB_t p_glMultiTexCoord3fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3fvARB(TextureUnit target, float* v) => p_glMultiTexCoord3fvARB(target, v);

	private typealias glMultiTexCoord3iARB_t = function void(TextureUnit target, int32 s, int32 t, int32 r);
	private static glMultiTexCoord3iARB_t p_glMultiTexCoord3iARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3iARB(TextureUnit target, int32 s, int32 t, int32 r) => p_glMultiTexCoord3iARB(target, s, t, r);

	private typealias glMultiTexCoord3ivARB_t = function void(TextureUnit target, int32* v);
	private static glMultiTexCoord3ivARB_t p_glMultiTexCoord3ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3ivARB(TextureUnit target, int32* v) => p_glMultiTexCoord3ivARB(target, v);

	private typealias glMultiTexCoord3sARB_t = function void(TextureUnit target, int16 s, int16 t, int16 r);
	private static glMultiTexCoord3sARB_t p_glMultiTexCoord3sARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3sARB(TextureUnit target, int16 s, int16 t, int16 r) => p_glMultiTexCoord3sARB(target, s, t, r);

	private typealias glMultiTexCoord3svARB_t = function void(TextureUnit target, int16* v);
	private static glMultiTexCoord3svARB_t p_glMultiTexCoord3svARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3svARB(TextureUnit target, int16* v) => p_glMultiTexCoord3svARB(target, v);

	private typealias glMultiTexCoord4dARB_t = function void(TextureUnit target, double s, double t, double r, double q);
	private static glMultiTexCoord4dARB_t p_glMultiTexCoord4dARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4dARB(TextureUnit target, double s, double t, double r, double q) => p_glMultiTexCoord4dARB(target, s, t, r, q);

	private typealias glMultiTexCoord4dvARB_t = function void(TextureUnit target, double* v);
	private static glMultiTexCoord4dvARB_t p_glMultiTexCoord4dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4dvARB(TextureUnit target, double* v) => p_glMultiTexCoord4dvARB(target, v);

	private typealias glMultiTexCoord4fARB_t = function void(TextureUnit target, float s, float t, float r, float q);
	private static glMultiTexCoord4fARB_t p_glMultiTexCoord4fARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4fARB(TextureUnit target, float s, float t, float r, float q) => p_glMultiTexCoord4fARB(target, s, t, r, q);

	private typealias glMultiTexCoord4fvARB_t = function void(TextureUnit target, float* v);
	private static glMultiTexCoord4fvARB_t p_glMultiTexCoord4fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4fvARB(TextureUnit target, float* v) => p_glMultiTexCoord4fvARB(target, v);

	private typealias glMultiTexCoord4iARB_t = function void(TextureUnit target, int32 s, int32 t, int32 r, int32 q);
	private static glMultiTexCoord4iARB_t p_glMultiTexCoord4iARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4iARB(TextureUnit target, int32 s, int32 t, int32 r, int32 q) => p_glMultiTexCoord4iARB(target, s, t, r, q);

	private typealias glMultiTexCoord4ivARB_t = function void(TextureUnit target, int32* v);
	private static glMultiTexCoord4ivARB_t p_glMultiTexCoord4ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4ivARB(TextureUnit target, int32* v) => p_glMultiTexCoord4ivARB(target, v);

	private typealias glMultiTexCoord4sARB_t = function void(TextureUnit target, int16 s, int16 t, int16 r, int16 q);
	private static glMultiTexCoord4sARB_t p_glMultiTexCoord4sARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4sARB(TextureUnit target, int16 s, int16 t, int16 r, int16 q) => p_glMultiTexCoord4sARB(target, s, t, r, q);

	private typealias glMultiTexCoord4svARB_t = function void(TextureUnit target, int16* v);
	private static glMultiTexCoord4svARB_t p_glMultiTexCoord4svARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4svARB(TextureUnit target, int16* v) => p_glMultiTexCoord4svARB(target, v);

	private typealias glGenQueriesARB_t = function void(int32 n, uint32* ids);
	private static glGenQueriesARB_t p_glGenQueriesARB;
	[CallingConvention(GL.CallConv)]
	public static void glGenQueriesARB(int32 n, uint32* ids) => p_glGenQueriesARB(n, ids);

	private typealias glDeleteQueriesARB_t = function void(int32 n, uint32* ids);
	private static glDeleteQueriesARB_t p_glDeleteQueriesARB;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteQueriesARB(int32 n, uint32* ids) => p_glDeleteQueriesARB(n, ids);

	private typealias glIsQueryARB_t = function bool(uint32 id);
	private static glIsQueryARB_t p_glIsQueryARB;
	[CallingConvention(GL.CallConv)]
	public static bool glIsQueryARB(uint32 id) => p_glIsQueryARB(id);

	private typealias glBeginQueryARB_t = function void(uint32 target, uint32 id);
	private static glBeginQueryARB_t p_glBeginQueryARB;
	[CallingConvention(GL.CallConv)]
	public static void glBeginQueryARB(uint32 target, uint32 id) => p_glBeginQueryARB(target, id);

	private typealias glEndQueryARB_t = function void(QueryTarget target);
	private static glEndQueryARB_t p_glEndQueryARB;
	[CallingConvention(GL.CallConv)]
	public static void glEndQueryARB(QueryTarget target) => p_glEndQueryARB(target);

	private typealias glGetQueryivARB_t = function void(QueryTarget target, QueryParameterName pname, int32* @params);
	private static glGetQueryivARB_t p_glGetQueryivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryivARB(QueryTarget target, QueryParameterName pname, int32* @params) => p_glGetQueryivARB(target, pname, @params);

	private typealias glGetQueryObjectivARB_t = function void(uint32 id, QueryObjectParameterName pname, int32* @params);
	private static glGetQueryObjectivARB_t p_glGetQueryObjectivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectivARB(uint32 id, QueryObjectParameterName pname, int32* @params) => p_glGetQueryObjectivARB(id, pname, @params);

	private typealias glGetQueryObjectuivARB_t = function void(uint32 id, QueryObjectParameterName pname, uint32* @params);
	private static glGetQueryObjectuivARB_t p_glGetQueryObjectuivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectuivARB(uint32 id, QueryObjectParameterName pname, uint32* @params) => p_glGetQueryObjectuivARB(id, pname, @params);

	private typealias glMaxShaderCompilerThreadsARB_t = function void(uint32 count);
	private static glMaxShaderCompilerThreadsARB_t p_glMaxShaderCompilerThreadsARB;
	[CallingConvention(GL.CallConv)]
	public static void glMaxShaderCompilerThreadsARB(uint32 count) => p_glMaxShaderCompilerThreadsARB(count);

	private typealias glPointParameterfARB_t = function void(uint32 pname, float param);
	private static glPointParameterfARB_t p_glPointParameterfARB;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterfARB(uint32 pname, float param) => p_glPointParameterfARB(pname, param);

	private typealias glPointParameterfvARB_t = function void(uint32 pname, float* @params);
	private static glPointParameterfvARB_t p_glPointParameterfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterfvARB(uint32 pname, float* @params) => p_glPointParameterfvARB(pname, @params);

	private typealias glGetGraphicsResetStatusARB_t = function GraphicsResetStatus();
	private static glGetGraphicsResetStatusARB_t p_glGetGraphicsResetStatusARB;
	[CallingConvention(GL.CallConv)]
	public static GraphicsResetStatus glGetGraphicsResetStatusARB() => p_glGetGraphicsResetStatusARB();

	private typealias glGetnTexImageARB_t = function void(TextureTarget target, int32 level, PixelFormat format, PixelType type, int32 bufSize, void* img);
	private static glGetnTexImageARB_t p_glGetnTexImageARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnTexImageARB(TextureTarget target, int32 level, PixelFormat format, PixelType type, int32 bufSize, void* img) => p_glGetnTexImageARB(target, level, format, type, bufSize, img);

	private typealias glReadnPixelsARB_t = function void(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data);
	private static glReadnPixelsARB_t p_glReadnPixelsARB;
	[CallingConvention(GL.CallConv)]
	public static void glReadnPixelsARB(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data) => p_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);

	private typealias glGetnCompressedTexImageARB_t = function void(TextureTarget target, int32 lod, int32 bufSize, void* img);
	private static glGetnCompressedTexImageARB_t p_glGetnCompressedTexImageARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnCompressedTexImageARB(TextureTarget target, int32 lod, int32 bufSize, void* img) => p_glGetnCompressedTexImageARB(target, lod, bufSize, img);

	private typealias glGetnUniformfvARB_t = function void(uint32 program, int32 location, int32 bufSize, float* @params);
	private static glGetnUniformfvARB_t p_glGetnUniformfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformfvARB(uint32 program, int32 location, int32 bufSize, float* @params) => p_glGetnUniformfvARB(program, location, bufSize, @params);

	private typealias glGetnUniformivARB_t = function void(uint32 program, int32 location, int32 bufSize, int32* @params);
	private static glGetnUniformivARB_t p_glGetnUniformivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformivARB(uint32 program, int32 location, int32 bufSize, int32* @params) => p_glGetnUniformivARB(program, location, bufSize, @params);

	private typealias glGetnUniformuivARB_t = function void(uint32 program, int32 location, int32 bufSize, uint32* @params);
	private static glGetnUniformuivARB_t p_glGetnUniformuivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformuivARB(uint32 program, int32 location, int32 bufSize, uint32* @params) => p_glGetnUniformuivARB(program, location, bufSize, @params);

	private typealias glGetnUniformdvARB_t = function void(uint32 program, int32 location, int32 bufSize, double* @params);
	private static glGetnUniformdvARB_t p_glGetnUniformdvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformdvARB(uint32 program, int32 location, int32 bufSize, double* @params) => p_glGetnUniformdvARB(program, location, bufSize, @params);

	private typealias glGetnMapdvARB_t = function void(MapTarget target, MapQuery query, int32 bufSize, double* v);
	private static glGetnMapdvARB_t p_glGetnMapdvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMapdvARB(MapTarget target, MapQuery query, int32 bufSize, double* v) => p_glGetnMapdvARB(target, query, bufSize, v);

	private typealias glGetnMapfvARB_t = function void(MapTarget target, MapQuery query, int32 bufSize, float* v);
	private static glGetnMapfvARB_t p_glGetnMapfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMapfvARB(MapTarget target, MapQuery query, int32 bufSize, float* v) => p_glGetnMapfvARB(target, query, bufSize, v);

	private typealias glGetnMapivARB_t = function void(MapTarget target, MapQuery query, int32 bufSize, int32* v);
	private static glGetnMapivARB_t p_glGetnMapivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMapivARB(MapTarget target, MapQuery query, int32 bufSize, int32* v) => p_glGetnMapivARB(target, query, bufSize, v);

	private typealias glGetnPixelMapfvARB_t = function void(PixelMap map, int32 bufSize, float* values);
	private static glGetnPixelMapfvARB_t p_glGetnPixelMapfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPixelMapfvARB(PixelMap map, int32 bufSize, float* values) => p_glGetnPixelMapfvARB(map, bufSize, values);

	private typealias glGetnPixelMapuivARB_t = function void(PixelMap map, int32 bufSize, uint32* values);
	private static glGetnPixelMapuivARB_t p_glGetnPixelMapuivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPixelMapuivARB(PixelMap map, int32 bufSize, uint32* values) => p_glGetnPixelMapuivARB(map, bufSize, values);

	private typealias glGetnPixelMapusvARB_t = function void(PixelMap map, int32 bufSize, int16* values);
	private static glGetnPixelMapusvARB_t p_glGetnPixelMapusvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPixelMapusvARB(PixelMap map, int32 bufSize, int16* values) => p_glGetnPixelMapusvARB(map, bufSize, values);

	private typealias glGetnPolygonStippleARB_t = function void(int32 bufSize, uint8* pattern);
	private static glGetnPolygonStippleARB_t p_glGetnPolygonStippleARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnPolygonStippleARB(int32 bufSize, uint8* pattern) => p_glGetnPolygonStippleARB(bufSize, pattern);

	private typealias glGetnColorTableARB_t = function void(ColorTableTarget target, PixelFormat format, PixelType type, int32 bufSize, void* table);
	private static glGetnColorTableARB_t p_glGetnColorTableARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int32 bufSize, void* table) => p_glGetnColorTableARB(target, format, type, bufSize, table);

	private typealias glGetnConvolutionFilterARB_t = function void(ConvolutionTarget target, PixelFormat format, PixelType type, int32 bufSize, void* image);
	private static glGetnConvolutionFilterARB_t p_glGetnConvolutionFilterARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int32 bufSize, void* image) => p_glGetnConvolutionFilterARB(target, format, type, bufSize, image);

	private typealias glGetnSeparableFilterARB_t = function void(SeparableTargetEXT target, PixelFormat format, PixelType type, int32 rowBufSize, void* row, int32 columnBufSize, void* column, void* span);
	private static glGetnSeparableFilterARB_t p_glGetnSeparableFilterARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int32 rowBufSize, void* row, int32 columnBufSize, void* column, void* span) => p_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);

	private typealias glGetnHistogramARB_t = function void(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values);
	private static glGetnHistogramARB_t p_glGetnHistogramARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnHistogramARB(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values) => p_glGetnHistogramARB(target, reset, format, type, bufSize, values);

	private typealias glGetnMinmaxARB_t = function void(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values);
	private static glGetnMinmaxARB_t p_glGetnMinmaxARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetnMinmaxARB(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int32 bufSize, void* values) => p_glGetnMinmaxARB(target, reset, format, type, bufSize, values);

	private typealias glFramebufferSampleLocationsfvARB_t = function void(FramebufferTarget target, uint32 start, int32 count, float* v);
	private static glFramebufferSampleLocationsfvARB_t p_glFramebufferSampleLocationsfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferSampleLocationsfvARB(FramebufferTarget target, uint32 start, int32 count, float* v) => p_glFramebufferSampleLocationsfvARB(target, start, count, v);

	private typealias glNamedFramebufferSampleLocationsfvARB_t = function void(uint32 framebuffer, uint32 start, int32 count, float* v);
	private static glNamedFramebufferSampleLocationsfvARB_t p_glNamedFramebufferSampleLocationsfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferSampleLocationsfvARB(uint32 framebuffer, uint32 start, int32 count, float* v) => p_glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);

	private typealias glEvaluateDepthValuesARB_t = function void();
	private static glEvaluateDepthValuesARB_t p_glEvaluateDepthValuesARB;
	[CallingConvention(GL.CallConv)]
	public static void glEvaluateDepthValuesARB() => p_glEvaluateDepthValuesARB();

	private typealias glMinSampleShadingARB_t = function void(float value);
	private static glMinSampleShadingARB_t p_glMinSampleShadingARB;
	[CallingConvention(GL.CallConv)]
	public static void glMinSampleShadingARB(float value) => p_glMinSampleShadingARB(value);

	private typealias glDeleteObjectARB_t = function void(uint32 obj);
	private static glDeleteObjectARB_t p_glDeleteObjectARB;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteObjectARB(uint32 obj) => p_glDeleteObjectARB(obj);

	private typealias glGetHandleARB_t = function uint32(uint32 pname);
	private static glGetHandleARB_t p_glGetHandleARB;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetHandleARB(uint32 pname) => p_glGetHandleARB(pname);

	private typealias glDetachObjectARB_t = function void(uint32 containerObj, uint32 attachedObj);
	private static glDetachObjectARB_t p_glDetachObjectARB;
	[CallingConvention(GL.CallConv)]
	public static void glDetachObjectARB(uint32 containerObj, uint32 attachedObj) => p_glDetachObjectARB(containerObj, attachedObj);

	private typealias glCreateShaderObjectARB_t = function uint32(ShaderType shaderType);
	private static glCreateShaderObjectARB_t p_glCreateShaderObjectARB;
	[CallingConvention(GL.CallConv)]
	public static uint32 glCreateShaderObjectARB(ShaderType shaderType) => p_glCreateShaderObjectARB(shaderType);

	private typealias glShaderSourceARB_t = function void(uint32 shaderObj, int32 count, void* @string, int32* length);
	private static glShaderSourceARB_t p_glShaderSourceARB;
	[CallingConvention(GL.CallConv)]
	public static void glShaderSourceARB(uint32 shaderObj, int32 count, void* @string, int32* length) => p_glShaderSourceARB(shaderObj, count, @string, length);

	private typealias glCompileShaderARB_t = function void(uint32 shaderObj);
	private static glCompileShaderARB_t p_glCompileShaderARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompileShaderARB(uint32 shaderObj) => p_glCompileShaderARB(shaderObj);

	private typealias glCreateProgramObjectARB_t = function uint32();
	private static glCreateProgramObjectARB_t p_glCreateProgramObjectARB;
	[CallingConvention(GL.CallConv)]
	public static uint32 glCreateProgramObjectARB() => p_glCreateProgramObjectARB();

	private typealias glAttachObjectARB_t = function void(uint32 containerObj, uint32 obj);
	private static glAttachObjectARB_t p_glAttachObjectARB;
	[CallingConvention(GL.CallConv)]
	public static void glAttachObjectARB(uint32 containerObj, uint32 obj) => p_glAttachObjectARB(containerObj, obj);

	private typealias glLinkProgramARB_t = function void(uint32 programObj);
	private static glLinkProgramARB_t p_glLinkProgramARB;
	[CallingConvention(GL.CallConv)]
	public static void glLinkProgramARB(uint32 programObj) => p_glLinkProgramARB(programObj);

	private typealias glUseProgramObjectARB_t = function void(uint32 programObj);
	private static glUseProgramObjectARB_t p_glUseProgramObjectARB;
	[CallingConvention(GL.CallConv)]
	public static void glUseProgramObjectARB(uint32 programObj) => p_glUseProgramObjectARB(programObj);

	private typealias glValidateProgramARB_t = function void(uint32 programObj);
	private static glValidateProgramARB_t p_glValidateProgramARB;
	[CallingConvention(GL.CallConv)]
	public static void glValidateProgramARB(uint32 programObj) => p_glValidateProgramARB(programObj);

	private typealias glUniform1fARB_t = function void(int32 location, float v0);
	private static glUniform1fARB_t p_glUniform1fARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1fARB(int32 location, float v0) => p_glUniform1fARB(location, v0);

	private typealias glUniform2fARB_t = function void(int32 location, float v0, float v1);
	private static glUniform2fARB_t p_glUniform2fARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2fARB(int32 location, float v0, float v1) => p_glUniform2fARB(location, v0, v1);

	private typealias glUniform3fARB_t = function void(int32 location, float v0, float v1, float v2);
	private static glUniform3fARB_t p_glUniform3fARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3fARB(int32 location, float v0, float v1, float v2) => p_glUniform3fARB(location, v0, v1, v2);

	private typealias glUniform4fARB_t = function void(int32 location, float v0, float v1, float v2, float v3);
	private static glUniform4fARB_t p_glUniform4fARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4fARB(int32 location, float v0, float v1, float v2, float v3) => p_glUniform4fARB(location, v0, v1, v2, v3);

	private typealias glUniform1iARB_t = function void(int32 location, int32 v0);
	private static glUniform1iARB_t p_glUniform1iARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1iARB(int32 location, int32 v0) => p_glUniform1iARB(location, v0);

	private typealias glUniform2iARB_t = function void(int32 location, int32 v0, int32 v1);
	private static glUniform2iARB_t p_glUniform2iARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2iARB(int32 location, int32 v0, int32 v1) => p_glUniform2iARB(location, v0, v1);

	private typealias glUniform3iARB_t = function void(int32 location, int32 v0, int32 v1, int32 v2);
	private static glUniform3iARB_t p_glUniform3iARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3iARB(int32 location, int32 v0, int32 v1, int32 v2) => p_glUniform3iARB(location, v0, v1, v2);

	private typealias glUniform4iARB_t = function void(int32 location, int32 v0, int32 v1, int32 v2, int32 v3);
	private static glUniform4iARB_t p_glUniform4iARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4iARB(int32 location, int32 v0, int32 v1, int32 v2, int32 v3) => p_glUniform4iARB(location, v0, v1, v2, v3);

	private typealias glUniform1fvARB_t = function void(int32 location, int32 count, float* value);
	private static glUniform1fvARB_t p_glUniform1fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1fvARB(int32 location, int32 count, float* value) => p_glUniform1fvARB(location, count, value);

	private typealias glUniform2fvARB_t = function void(int32 location, int32 count, float* value);
	private static glUniform2fvARB_t p_glUniform2fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2fvARB(int32 location, int32 count, float* value) => p_glUniform2fvARB(location, count, value);

	private typealias glUniform3fvARB_t = function void(int32 location, int32 count, float* value);
	private static glUniform3fvARB_t p_glUniform3fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3fvARB(int32 location, int32 count, float* value) => p_glUniform3fvARB(location, count, value);

	private typealias glUniform4fvARB_t = function void(int32 location, int32 count, float* value);
	private static glUniform4fvARB_t p_glUniform4fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4fvARB(int32 location, int32 count, float* value) => p_glUniform4fvARB(location, count, value);

	private typealias glUniform1ivARB_t = function void(int32 location, int32 count, int32* value);
	private static glUniform1ivARB_t p_glUniform1ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1ivARB(int32 location, int32 count, int32* value) => p_glUniform1ivARB(location, count, value);

	private typealias glUniform2ivARB_t = function void(int32 location, int32 count, int32* value);
	private static glUniform2ivARB_t p_glUniform2ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2ivARB(int32 location, int32 count, int32* value) => p_glUniform2ivARB(location, count, value);

	private typealias glUniform3ivARB_t = function void(int32 location, int32 count, int32* value);
	private static glUniform3ivARB_t p_glUniform3ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3ivARB(int32 location, int32 count, int32* value) => p_glUniform3ivARB(location, count, value);

	private typealias glUniform4ivARB_t = function void(int32 location, int32 count, int32* value);
	private static glUniform4ivARB_t p_glUniform4ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4ivARB(int32 location, int32 count, int32* value) => p_glUniform4ivARB(location, count, value);

	private typealias glUniformMatrix2fvARB_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix2fvARB_t p_glUniformMatrix2fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2fvARB(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix2fvARB(location, count, transpose, value);

	private typealias glUniformMatrix3fvARB_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix3fvARB_t p_glUniformMatrix3fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3fvARB(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix3fvARB(location, count, transpose, value);

	private typealias glUniformMatrix4fvARB_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix4fvARB_t p_glUniformMatrix4fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4fvARB(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix4fvARB(location, count, transpose, value);

	private typealias glGetObjectParameterfvARB_t = function void(uint32 obj, uint32 pname, float* @params);
	private static glGetObjectParameterfvARB_t p_glGetObjectParameterfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectParameterfvARB(uint32 obj, uint32 pname, float* @params) => p_glGetObjectParameterfvARB(obj, pname, @params);

	private typealias glGetObjectParameterivARB_t = function void(uint32 obj, uint32 pname, int32* @params);
	private static glGetObjectParameterivARB_t p_glGetObjectParameterivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectParameterivARB(uint32 obj, uint32 pname, int32* @params) => p_glGetObjectParameterivARB(obj, pname, @params);

	private typealias glGetInfoLogARB_t = function void(uint32 obj, int32 maxLength, int32* length, void* infoLog);
	private static glGetInfoLogARB_t p_glGetInfoLogARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetInfoLogARB(uint32 obj, int32 maxLength, int32* length, void* infoLog) => p_glGetInfoLogARB(obj, maxLength, length, infoLog);

	private typealias glGetAttachedObjectsARB_t = function void(uint32 containerObj, int32 maxCount, int32* count, void* obj);
	private static glGetAttachedObjectsARB_t p_glGetAttachedObjectsARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetAttachedObjectsARB(uint32 containerObj, int32 maxCount, int32* count, void* obj) => p_glGetAttachedObjectsARB(containerObj, maxCount, count, obj);

	private typealias glGetUniformLocationARB_t = function int32(uint32 programObj, void* name);
	private static glGetUniformLocationARB_t p_glGetUniformLocationARB;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetUniformLocationARB(uint32 programObj, void* name) => p_glGetUniformLocationARB(programObj, name);

	private typealias glGetActiveUniformARB_t = function void(uint32 programObj, uint32 index, int32 maxLength, int32* length, int32* size, uint32* type, void* name);
	private static glGetActiveUniformARB_t p_glGetActiveUniformARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveUniformARB(uint32 programObj, uint32 index, int32 maxLength, int32* length, int32* size, uint32* type, void* name) => p_glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);

	private typealias glGetUniformfvARB_t = function void(uint32 programObj, int32 location, float* @params);
	private static glGetUniformfvARB_t p_glGetUniformfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformfvARB(uint32 programObj, int32 location, float* @params) => p_glGetUniformfvARB(programObj, location, @params);

	private typealias glGetUniformivARB_t = function void(uint32 programObj, int32 location, int32* @params);
	private static glGetUniformivARB_t p_glGetUniformivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformivARB(uint32 programObj, int32 location, int32* @params) => p_glGetUniformivARB(programObj, location, @params);

	private typealias glGetShaderSourceARB_t = function void(uint32 obj, int32 maxLength, int32* length, void* source);
	private static glGetShaderSourceARB_t p_glGetShaderSourceARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetShaderSourceARB(uint32 obj, int32 maxLength, int32* length, void* source) => p_glGetShaderSourceARB(obj, maxLength, length, source);

	private typealias glNamedStringARB_t = function void(uint32 type, int32 namelen, char8* name, int32 stringlen, char8* @string);
	private static glNamedStringARB_t p_glNamedStringARB;
	[CallingConvention(GL.CallConv)]
	public static void glNamedStringARB(uint32 type, int32 namelen, char8* name, int32 stringlen, char8* @string) => p_glNamedStringARB(type, namelen, name, stringlen, @string);

	private typealias glDeleteNamedStringARB_t = function void(int32 namelen, char8* name);
	private static glDeleteNamedStringARB_t p_glDeleteNamedStringARB;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteNamedStringARB(int32 namelen, char8* name) => p_glDeleteNamedStringARB(namelen, name);

	private typealias glCompileShaderIncludeARB_t = function void(uint32 shader, int32 count, void* path, int32* length);
	private static glCompileShaderIncludeARB_t p_glCompileShaderIncludeARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompileShaderIncludeARB(uint32 shader, int32 count, void* path, int32* length) => p_glCompileShaderIncludeARB(shader, count, path, length);

	private typealias glIsNamedStringARB_t = function bool(int32 namelen, char8* name);
	private static glIsNamedStringARB_t p_glIsNamedStringARB;
	[CallingConvention(GL.CallConv)]
	public static bool glIsNamedStringARB(int32 namelen, char8* name) => p_glIsNamedStringARB(namelen, name);

	private typealias glGetNamedStringARB_t = function void(int32 namelen, char8* name, int32 bufSize, int32* stringlen, char8* @string);
	private static glGetNamedStringARB_t p_glGetNamedStringARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedStringARB(int32 namelen, char8* name, int32 bufSize, int32* stringlen, char8* @string) => p_glGetNamedStringARB(namelen, name, bufSize, stringlen, @string);

	private typealias glGetNamedStringivARB_t = function void(int32 namelen, char8* name, uint32 pname, int32* @params);
	private static glGetNamedStringivARB_t p_glGetNamedStringivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedStringivARB(int32 namelen, char8* name, uint32 pname, int32* @params) => p_glGetNamedStringivARB(namelen, name, pname, @params);

	private typealias glBufferPageCommitmentARB_t = function void(uint32 target, void* offset, int32 size, bool commit);
	private static glBufferPageCommitmentARB_t p_glBufferPageCommitmentARB;
	[CallingConvention(GL.CallConv)]
	public static void glBufferPageCommitmentARB(uint32 target, void* offset, int32 size, bool commit) => p_glBufferPageCommitmentARB(target, offset, size, commit);

	private typealias glNamedBufferPageCommitmentEXT_t = function void(uint32 buffer, void* offset, int32 size, bool commit);
	private static glNamedBufferPageCommitmentEXT_t p_glNamedBufferPageCommitmentEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferPageCommitmentEXT(uint32 buffer, void* offset, int32 size, bool commit) => p_glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);

	private typealias glNamedBufferPageCommitmentARB_t = function void(uint32 buffer, void* offset, int32 size, bool commit);
	private static glNamedBufferPageCommitmentARB_t p_glNamedBufferPageCommitmentARB;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferPageCommitmentARB(uint32 buffer, void* offset, int32 size, bool commit) => p_glNamedBufferPageCommitmentARB(buffer, offset, size, commit);

	private typealias glTexPageCommitmentARB_t = function void(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, bool commit);
	private static glTexPageCommitmentARB_t p_glTexPageCommitmentARB;
	[CallingConvention(GL.CallConv)]
	public static void glTexPageCommitmentARB(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, bool commit) => p_glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);

	private typealias glTexBufferARB_t = function void(TextureTarget target, InternalFormat internalformat, uint32 buffer);
	private static glTexBufferARB_t p_glTexBufferARB;
	[CallingConvention(GL.CallConv)]
	public static void glTexBufferARB(TextureTarget target, InternalFormat internalformat, uint32 buffer) => p_glTexBufferARB(target, internalformat, buffer);

	private typealias glCompressedTexImage3DARB_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* data);
	private static glCompressedTexImage3DARB_t p_glCompressedTexImage3DARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexImage3DARB(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* data) => p_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);

	private typealias glCompressedTexImage2DARB_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* data);
	private static glCompressedTexImage2DARB_t p_glCompressedTexImage2DARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexImage2DARB(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* data) => p_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);

	private typealias glCompressedTexImage1DARB_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* data);
	private static glCompressedTexImage1DARB_t p_glCompressedTexImage1DARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexImage1DARB(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* data) => p_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);

	private typealias glCompressedTexSubImage3DARB_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTexSubImage3DARB_t p_glCompressedTexSubImage3DARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexSubImage3DARB(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

	private typealias glCompressedTexSubImage2DARB_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTexSubImage2DARB_t p_glCompressedTexSubImage2DARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexSubImage2DARB(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);

	private typealias glCompressedTexSubImage1DARB_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTexSubImage1DARB_t p_glCompressedTexSubImage1DARB;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexSubImage1DARB(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);

	private typealias glGetCompressedTexImageARB_t = function void(TextureTarget target, int32 level, void* img);
	private static glGetCompressedTexImageARB_t p_glGetCompressedTexImageARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetCompressedTexImageARB(TextureTarget target, int32 level, void* img) => p_glGetCompressedTexImageARB(target, level, img);

	private typealias glLoadTransposeMatrixfARB_t = function void(float* m);
	private static glLoadTransposeMatrixfARB_t p_glLoadTransposeMatrixfARB;
	[CallingConvention(GL.CallConv)]
	public static void glLoadTransposeMatrixfARB(float* m) => p_glLoadTransposeMatrixfARB(m);

	private typealias glLoadTransposeMatrixdARB_t = function void(double* m);
	private static glLoadTransposeMatrixdARB_t p_glLoadTransposeMatrixdARB;
	[CallingConvention(GL.CallConv)]
	public static void glLoadTransposeMatrixdARB(double* m) => p_glLoadTransposeMatrixdARB(m);

	private typealias glMultTransposeMatrixfARB_t = function void(float* m);
	private static glMultTransposeMatrixfARB_t p_glMultTransposeMatrixfARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultTransposeMatrixfARB(float* m) => p_glMultTransposeMatrixfARB(m);

	private typealias glMultTransposeMatrixdARB_t = function void(double* m);
	private static glMultTransposeMatrixdARB_t p_glMultTransposeMatrixdARB;
	[CallingConvention(GL.CallConv)]
	public static void glMultTransposeMatrixdARB(double* m) => p_glMultTransposeMatrixdARB(m);

	private typealias glWeightbvARB_t = function void(int32 size, uint8* weights);
	private static glWeightbvARB_t p_glWeightbvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightbvARB(int32 size, uint8* weights) => p_glWeightbvARB(size, weights);

	private typealias glWeightsvARB_t = function void(int32 size, int16* weights);
	private static glWeightsvARB_t p_glWeightsvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightsvARB(int32 size, int16* weights) => p_glWeightsvARB(size, weights);

	private typealias glWeightivARB_t = function void(int32 size, int32* weights);
	private static glWeightivARB_t p_glWeightivARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightivARB(int32 size, int32* weights) => p_glWeightivARB(size, weights);

	private typealias glWeightfvARB_t = function void(int32 size, float* weights);
	private static glWeightfvARB_t p_glWeightfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightfvARB(int32 size, float* weights) => p_glWeightfvARB(size, weights);

	private typealias glWeightdvARB_t = function void(int32 size, double* weights);
	private static glWeightdvARB_t p_glWeightdvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightdvARB(int32 size, double* weights) => p_glWeightdvARB(size, weights);

	private typealias glWeightubvARB_t = function void(int32 size, uint8* weights);
	private static glWeightubvARB_t p_glWeightubvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightubvARB(int32 size, uint8* weights) => p_glWeightubvARB(size, weights);

	private typealias glWeightusvARB_t = function void(int32 size, int16* weights);
	private static glWeightusvARB_t p_glWeightusvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightusvARB(int32 size, int16* weights) => p_glWeightusvARB(size, weights);

	private typealias glWeightuivARB_t = function void(int32 size, uint32* weights);
	private static glWeightuivARB_t p_glWeightuivARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightuivARB(int32 size, uint32* weights) => p_glWeightuivARB(size, weights);

	private typealias glWeightPointerARB_t = function void(int32 size, uint32 type, int32 stride, void* pointer);
	private static glWeightPointerARB_t p_glWeightPointerARB;
	[CallingConvention(GL.CallConv)]
	public static void glWeightPointerARB(int32 size, uint32 type, int32 stride, void* pointer) => p_glWeightPointerARB(size, type, stride, pointer);

	private typealias glVertexBlendARB_t = function void(int32 count);
	private static glVertexBlendARB_t p_glVertexBlendARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexBlendARB(int32 count) => p_glVertexBlendARB(count);

	private typealias glBindBufferARB_t = function void(BufferTargetARB target, uint32 buffer);
	private static glBindBufferARB_t p_glBindBufferARB;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferARB(BufferTargetARB target, uint32 buffer) => p_glBindBufferARB(target, buffer);

	private typealias glDeleteBuffersARB_t = function void(int32 n, uint32* buffers);
	private static glDeleteBuffersARB_t p_glDeleteBuffersARB;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteBuffersARB(int32 n, uint32* buffers) => p_glDeleteBuffersARB(n, buffers);

	private typealias glGenBuffersARB_t = function void(int32 n, uint32* buffers);
	private static glGenBuffersARB_t p_glGenBuffersARB;
	[CallingConvention(GL.CallConv)]
	public static void glGenBuffersARB(int32 n, uint32* buffers) => p_glGenBuffersARB(n, buffers);

	private typealias glIsBufferARB_t = function bool(uint32 buffer);
	private static glIsBufferARB_t p_glIsBufferARB;
	[CallingConvention(GL.CallConv)]
	public static bool glIsBufferARB(uint32 buffer) => p_glIsBufferARB(buffer);

	private typealias glBufferDataARB_t = function void(BufferTargetARB target, int32 size, void* data, BufferUsageARB usage);
	private static glBufferDataARB_t p_glBufferDataARB;
	[CallingConvention(GL.CallConv)]
	public static void glBufferDataARB(BufferTargetARB target, int32 size, void* data, BufferUsageARB usage) => p_glBufferDataARB(target, size, data, usage);

	private typealias glBufferSubDataARB_t = function void(BufferTargetARB target, int32 offset, int32 size, void* data);
	private static glBufferSubDataARB_t p_glBufferSubDataARB;
	[CallingConvention(GL.CallConv)]
	public static void glBufferSubDataARB(BufferTargetARB target, int32 offset, int32 size, void* data) => p_glBufferSubDataARB(target, offset, size, data);

	private typealias glGetBufferSubDataARB_t = function void(BufferTargetARB target, int32 offset, int32 size, void* data);
	private static glGetBufferSubDataARB_t p_glGetBufferSubDataARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferSubDataARB(BufferTargetARB target, int32 offset, int32 size, void* data) => p_glGetBufferSubDataARB(target, offset, size, data);

	private typealias glMapBufferARB_t = function void*(BufferTargetARB target, BufferAccessARB access);
	private static glMapBufferARB_t p_glMapBufferARB;
	[CallingConvention(GL.CallConv)]
	public static void* glMapBufferARB(BufferTargetARB target, BufferAccessARB access) => p_glMapBufferARB(target, access);

	private typealias glUnmapBufferARB_t = function bool(BufferTargetARB target);
	private static glUnmapBufferARB_t p_glUnmapBufferARB;
	[CallingConvention(GL.CallConv)]
	public static bool glUnmapBufferARB(BufferTargetARB target) => p_glUnmapBufferARB(target);

	private typealias glGetBufferParameterivARB_t = function void(BufferTargetARB target, uint32 pname, int32* @params);
	private static glGetBufferParameterivARB_t p_glGetBufferParameterivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferParameterivARB(BufferTargetARB target, uint32 pname, int32* @params) => p_glGetBufferParameterivARB(target, pname, @params);

	private typealias glGetBufferPointervARB_t = function void(BufferTargetARB target, uint32 pname, void** @params);
	private static glGetBufferPointervARB_t p_glGetBufferPointervARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferPointervARB(BufferTargetARB target, uint32 pname, void** @params) => p_glGetBufferPointervARB(target, pname, @params);

	private typealias glVertexAttrib1dARB_t = function void(uint32 index, double x);
	private static glVertexAttrib1dARB_t p_glVertexAttrib1dARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1dARB(uint32 index, double x) => p_glVertexAttrib1dARB(index, x);

	private typealias glVertexAttrib1dvARB_t = function void(uint32 index, double* v);
	private static glVertexAttrib1dvARB_t p_glVertexAttrib1dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1dvARB(uint32 index, double* v) => p_glVertexAttrib1dvARB(index, v);

	private typealias glVertexAttrib1fARB_t = function void(uint32 index, float x);
	private static glVertexAttrib1fARB_t p_glVertexAttrib1fARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1fARB(uint32 index, float x) => p_glVertexAttrib1fARB(index, x);

	private typealias glVertexAttrib1fvARB_t = function void(uint32 index, float* v);
	private static glVertexAttrib1fvARB_t p_glVertexAttrib1fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1fvARB(uint32 index, float* v) => p_glVertexAttrib1fvARB(index, v);

	private typealias glVertexAttrib1sARB_t = function void(uint32 index, int16 x);
	private static glVertexAttrib1sARB_t p_glVertexAttrib1sARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1sARB(uint32 index, int16 x) => p_glVertexAttrib1sARB(index, x);

	private typealias glVertexAttrib1svARB_t = function void(uint32 index, int16* v);
	private static glVertexAttrib1svARB_t p_glVertexAttrib1svARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1svARB(uint32 index, int16* v) => p_glVertexAttrib1svARB(index, v);

	private typealias glVertexAttrib2dARB_t = function void(uint32 index, double x, double y);
	private static glVertexAttrib2dARB_t p_glVertexAttrib2dARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2dARB(uint32 index, double x, double y) => p_glVertexAttrib2dARB(index, x, y);

	private typealias glVertexAttrib2dvARB_t = function void(uint32 index, double* v);
	private static glVertexAttrib2dvARB_t p_glVertexAttrib2dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2dvARB(uint32 index, double* v) => p_glVertexAttrib2dvARB(index, v);

	private typealias glVertexAttrib2fARB_t = function void(uint32 index, float x, float y);
	private static glVertexAttrib2fARB_t p_glVertexAttrib2fARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2fARB(uint32 index, float x, float y) => p_glVertexAttrib2fARB(index, x, y);

	private typealias glVertexAttrib2fvARB_t = function void(uint32 index, float* v);
	private static glVertexAttrib2fvARB_t p_glVertexAttrib2fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2fvARB(uint32 index, float* v) => p_glVertexAttrib2fvARB(index, v);

	private typealias glVertexAttrib2sARB_t = function void(uint32 index, int16 x, int16 y);
	private static glVertexAttrib2sARB_t p_glVertexAttrib2sARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2sARB(uint32 index, int16 x, int16 y) => p_glVertexAttrib2sARB(index, x, y);

	private typealias glVertexAttrib2svARB_t = function void(uint32 index, int16* v);
	private static glVertexAttrib2svARB_t p_glVertexAttrib2svARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2svARB(uint32 index, int16* v) => p_glVertexAttrib2svARB(index, v);

	private typealias glVertexAttrib3dARB_t = function void(uint32 index, double x, double y, double z);
	private static glVertexAttrib3dARB_t p_glVertexAttrib3dARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3dARB(uint32 index, double x, double y, double z) => p_glVertexAttrib3dARB(index, x, y, z);

	private typealias glVertexAttrib3dvARB_t = function void(uint32 index, double* v);
	private static glVertexAttrib3dvARB_t p_glVertexAttrib3dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3dvARB(uint32 index, double* v) => p_glVertexAttrib3dvARB(index, v);

	private typealias glVertexAttrib3fARB_t = function void(uint32 index, float x, float y, float z);
	private static glVertexAttrib3fARB_t p_glVertexAttrib3fARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3fARB(uint32 index, float x, float y, float z) => p_glVertexAttrib3fARB(index, x, y, z);

	private typealias glVertexAttrib3fvARB_t = function void(uint32 index, float* v);
	private static glVertexAttrib3fvARB_t p_glVertexAttrib3fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3fvARB(uint32 index, float* v) => p_glVertexAttrib3fvARB(index, v);

	private typealias glVertexAttrib3sARB_t = function void(uint32 index, int16 x, int16 y, int16 z);
	private static glVertexAttrib3sARB_t p_glVertexAttrib3sARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3sARB(uint32 index, int16 x, int16 y, int16 z) => p_glVertexAttrib3sARB(index, x, y, z);

	private typealias glVertexAttrib3svARB_t = function void(uint32 index, int16* v);
	private static glVertexAttrib3svARB_t p_glVertexAttrib3svARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3svARB(uint32 index, int16* v) => p_glVertexAttrib3svARB(index, v);

	private typealias glVertexAttrib4NbvARB_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4NbvARB_t p_glVertexAttrib4NbvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4NbvARB(uint32 index, uint8* v) => p_glVertexAttrib4NbvARB(index, v);

	private typealias glVertexAttrib4NivARB_t = function void(uint32 index, int32* v);
	private static glVertexAttrib4NivARB_t p_glVertexAttrib4NivARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4NivARB(uint32 index, int32* v) => p_glVertexAttrib4NivARB(index, v);

	private typealias glVertexAttrib4NsvARB_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4NsvARB_t p_glVertexAttrib4NsvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4NsvARB(uint32 index, int16* v) => p_glVertexAttrib4NsvARB(index, v);

	private typealias glVertexAttrib4NubARB_t = function void(uint32 index, uint8 x, uint8 y, uint8 z, uint8 w);
	private static glVertexAttrib4NubARB_t p_glVertexAttrib4NubARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4NubARB(uint32 index, uint8 x, uint8 y, uint8 z, uint8 w) => p_glVertexAttrib4NubARB(index, x, y, z, w);

	private typealias glVertexAttrib4NubvARB_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4NubvARB_t p_glVertexAttrib4NubvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4NubvARB(uint32 index, uint8* v) => p_glVertexAttrib4NubvARB(index, v);

	private typealias glVertexAttrib4NuivARB_t = function void(uint32 index, uint32* v);
	private static glVertexAttrib4NuivARB_t p_glVertexAttrib4NuivARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4NuivARB(uint32 index, uint32* v) => p_glVertexAttrib4NuivARB(index, v);

	private typealias glVertexAttrib4NusvARB_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4NusvARB_t p_glVertexAttrib4NusvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4NusvARB(uint32 index, int16* v) => p_glVertexAttrib4NusvARB(index, v);

	private typealias glVertexAttrib4bvARB_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4bvARB_t p_glVertexAttrib4bvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4bvARB(uint32 index, uint8* v) => p_glVertexAttrib4bvARB(index, v);

	private typealias glVertexAttrib4dARB_t = function void(uint32 index, double x, double y, double z, double w);
	private static glVertexAttrib4dARB_t p_glVertexAttrib4dARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4dARB(uint32 index, double x, double y, double z, double w) => p_glVertexAttrib4dARB(index, x, y, z, w);

	private typealias glVertexAttrib4dvARB_t = function void(uint32 index, double* v);
	private static glVertexAttrib4dvARB_t p_glVertexAttrib4dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4dvARB(uint32 index, double* v) => p_glVertexAttrib4dvARB(index, v);

	private typealias glVertexAttrib4fARB_t = function void(uint32 index, float x, float y, float z, float w);
	private static glVertexAttrib4fARB_t p_glVertexAttrib4fARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4fARB(uint32 index, float x, float y, float z, float w) => p_glVertexAttrib4fARB(index, x, y, z, w);

	private typealias glVertexAttrib4fvARB_t = function void(uint32 index, float* v);
	private static glVertexAttrib4fvARB_t p_glVertexAttrib4fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4fvARB(uint32 index, float* v) => p_glVertexAttrib4fvARB(index, v);

	private typealias glVertexAttrib4ivARB_t = function void(uint32 index, int32* v);
	private static glVertexAttrib4ivARB_t p_glVertexAttrib4ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4ivARB(uint32 index, int32* v) => p_glVertexAttrib4ivARB(index, v);

	private typealias glVertexAttrib4sARB_t = function void(uint32 index, int16 x, int16 y, int16 z, int16 w);
	private static glVertexAttrib4sARB_t p_glVertexAttrib4sARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4sARB(uint32 index, int16 x, int16 y, int16 z, int16 w) => p_glVertexAttrib4sARB(index, x, y, z, w);

	private typealias glVertexAttrib4svARB_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4svARB_t p_glVertexAttrib4svARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4svARB(uint32 index, int16* v) => p_glVertexAttrib4svARB(index, v);

	private typealias glVertexAttrib4ubvARB_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4ubvARB_t p_glVertexAttrib4ubvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4ubvARB(uint32 index, uint8* v) => p_glVertexAttrib4ubvARB(index, v);

	private typealias glVertexAttrib4uivARB_t = function void(uint32 index, uint32* v);
	private static glVertexAttrib4uivARB_t p_glVertexAttrib4uivARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4uivARB(uint32 index, uint32* v) => p_glVertexAttrib4uivARB(index, v);

	private typealias glVertexAttrib4usvARB_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4usvARB_t p_glVertexAttrib4usvARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4usvARB(uint32 index, int16* v) => p_glVertexAttrib4usvARB(index, v);

	private typealias glVertexAttribPointerARB_t = function void(uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, void* pointer);
	private static glVertexAttribPointerARB_t p_glVertexAttribPointerARB;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribPointerARB(uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, void* pointer) => p_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);

	private typealias glEnableVertexAttribArrayARB_t = function void(uint32 index);
	private static glEnableVertexAttribArrayARB_t p_glEnableVertexAttribArrayARB;
	[CallingConvention(GL.CallConv)]
	public static void glEnableVertexAttribArrayARB(uint32 index) => p_glEnableVertexAttribArrayARB(index);

	private typealias glDisableVertexAttribArrayARB_t = function void(uint32 index);
	private static glDisableVertexAttribArrayARB_t p_glDisableVertexAttribArrayARB;
	[CallingConvention(GL.CallConv)]
	public static void glDisableVertexAttribArrayARB(uint32 index) => p_glDisableVertexAttribArrayARB(index);

	private typealias glGetVertexAttribdvARB_t = function void(uint32 index, uint32 pname, double* @params);
	private static glGetVertexAttribdvARB_t p_glGetVertexAttribdvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribdvARB(uint32 index, uint32 pname, double* @params) => p_glGetVertexAttribdvARB(index, pname, @params);

	private typealias glGetVertexAttribfvARB_t = function void(uint32 index, uint32 pname, float* @params);
	private static glGetVertexAttribfvARB_t p_glGetVertexAttribfvARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribfvARB(uint32 index, uint32 pname, float* @params) => p_glGetVertexAttribfvARB(index, pname, @params);

	private typealias glGetVertexAttribivARB_t = function void(uint32 index, uint32 pname, int32* @params);
	private static glGetVertexAttribivARB_t p_glGetVertexAttribivARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribivARB(uint32 index, uint32 pname, int32* @params) => p_glGetVertexAttribivARB(index, pname, @params);

	private typealias glGetVertexAttribPointervARB_t = function void(uint32 index, uint32 pname, void** pointer);
	private static glGetVertexAttribPointervARB_t p_glGetVertexAttribPointervARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribPointervARB(uint32 index, uint32 pname, void** pointer) => p_glGetVertexAttribPointervARB(index, pname, pointer);

	private typealias glBindAttribLocationARB_t = function void(uint32 programObj, uint32 index, void* name);
	private static glBindAttribLocationARB_t p_glBindAttribLocationARB;
	[CallingConvention(GL.CallConv)]
	public static void glBindAttribLocationARB(uint32 programObj, uint32 index, void* name) => p_glBindAttribLocationARB(programObj, index, name);

	private typealias glGetActiveAttribARB_t = function void(uint32 programObj, uint32 index, int32 maxLength, int32* length, int32* size, uint32* type, void* name);
	private static glGetActiveAttribARB_t p_glGetActiveAttribARB;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveAttribARB(uint32 programObj, uint32 index, int32 maxLength, int32* length, int32* size, uint32* type, void* name) => p_glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);

	private typealias glGetAttribLocationARB_t = function int32(uint32 programObj, void* name);
	private static glGetAttribLocationARB_t p_glGetAttribLocationARB;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetAttribLocationARB(uint32 programObj, void* name) => p_glGetAttribLocationARB(programObj, name);

	private typealias glWindowPos2dARB_t = function void(double x, double y);
	private static glWindowPos2dARB_t p_glWindowPos2dARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2dARB(double x, double y) => p_glWindowPos2dARB(x, y);

	private typealias glWindowPos2dvARB_t = function void(double* v);
	private static glWindowPos2dvARB_t p_glWindowPos2dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2dvARB(double* v) => p_glWindowPos2dvARB(v);

	private typealias glWindowPos2fARB_t = function void(float x, float y);
	private static glWindowPos2fARB_t p_glWindowPos2fARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2fARB(float x, float y) => p_glWindowPos2fARB(x, y);

	private typealias glWindowPos2fvARB_t = function void(float* v);
	private static glWindowPos2fvARB_t p_glWindowPos2fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2fvARB(float* v) => p_glWindowPos2fvARB(v);

	private typealias glWindowPos2iARB_t = function void(int32 x, int32 y);
	private static glWindowPos2iARB_t p_glWindowPos2iARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2iARB(int32 x, int32 y) => p_glWindowPos2iARB(x, y);

	private typealias glWindowPos2ivARB_t = function void(int32* v);
	private static glWindowPos2ivARB_t p_glWindowPos2ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2ivARB(int32* v) => p_glWindowPos2ivARB(v);

	private typealias glWindowPos2sARB_t = function void(int16 x, int16 y);
	private static glWindowPos2sARB_t p_glWindowPos2sARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2sARB(int16 x, int16 y) => p_glWindowPos2sARB(x, y);

	private typealias glWindowPos2svARB_t = function void(int16* v);
	private static glWindowPos2svARB_t p_glWindowPos2svARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2svARB(int16* v) => p_glWindowPos2svARB(v);

	private typealias glWindowPos3dARB_t = function void(double x, double y, double z);
	private static glWindowPos3dARB_t p_glWindowPos3dARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3dARB(double x, double y, double z) => p_glWindowPos3dARB(x, y, z);

	private typealias glWindowPos3dvARB_t = function void(double* v);
	private static glWindowPos3dvARB_t p_glWindowPos3dvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3dvARB(double* v) => p_glWindowPos3dvARB(v);

	private typealias glWindowPos3fARB_t = function void(float x, float y, float z);
	private static glWindowPos3fARB_t p_glWindowPos3fARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3fARB(float x, float y, float z) => p_glWindowPos3fARB(x, y, z);

	private typealias glWindowPos3fvARB_t = function void(float* v);
	private static glWindowPos3fvARB_t p_glWindowPos3fvARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3fvARB(float* v) => p_glWindowPos3fvARB(v);

	private typealias glWindowPos3iARB_t = function void(int32 x, int32 y, int32 z);
	private static glWindowPos3iARB_t p_glWindowPos3iARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3iARB(int32 x, int32 y, int32 z) => p_glWindowPos3iARB(x, y, z);

	private typealias glWindowPos3ivARB_t = function void(int32* v);
	private static glWindowPos3ivARB_t p_glWindowPos3ivARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3ivARB(int32* v) => p_glWindowPos3ivARB(v);

	private typealias glWindowPos3sARB_t = function void(int16 x, int16 y, int16 z);
	private static glWindowPos3sARB_t p_glWindowPos3sARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3sARB(int16 x, int16 y, int16 z) => p_glWindowPos3sARB(x, y, z);

	private typealias glWindowPos3svARB_t = function void(int16* v);
	private static glWindowPos3svARB_t p_glWindowPos3svARB;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3svARB(int16* v) => p_glWindowPos3svARB(v);

	private typealias glDrawBuffersATI_t = function void(int32 n, uint32* bufs);
	private static glDrawBuffersATI_t p_glDrawBuffersATI;
	[CallingConvention(GL.CallConv)]
	public static void glDrawBuffersATI(int32 n, uint32* bufs) => p_glDrawBuffersATI(n, bufs);

	private typealias glElementPointerATI_t = function void(uint32 type, void* pointer);
	private static glElementPointerATI_t p_glElementPointerATI;
	[CallingConvention(GL.CallConv)]
	public static void glElementPointerATI(uint32 type, void* pointer) => p_glElementPointerATI(type, pointer);

	private typealias glDrawElementArrayATI_t = function void(PrimitiveType mode, int32 count);
	private static glDrawElementArrayATI_t p_glDrawElementArrayATI;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementArrayATI(PrimitiveType mode, int32 count) => p_glDrawElementArrayATI(mode, count);

	private typealias glDrawRangeElementArrayATI_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32 count);
	private static glDrawRangeElementArrayATI_t p_glDrawRangeElementArrayATI;
	[CallingConvention(GL.CallConv)]
	public static void glDrawRangeElementArrayATI(PrimitiveType mode, uint32 start, uint32 end, int32 count) => p_glDrawRangeElementArrayATI(mode, start, end, count);

	private typealias glTexBumpParameterivATI_t = function void(uint32 pname, int32* param);
	private static glTexBumpParameterivATI_t p_glTexBumpParameterivATI;
	[CallingConvention(GL.CallConv)]
	public static void glTexBumpParameterivATI(uint32 pname, int32* param) => p_glTexBumpParameterivATI(pname, param);

	private typealias glTexBumpParameterfvATI_t = function void(uint32 pname, float* param);
	private static glTexBumpParameterfvATI_t p_glTexBumpParameterfvATI;
	[CallingConvention(GL.CallConv)]
	public static void glTexBumpParameterfvATI(uint32 pname, float* param) => p_glTexBumpParameterfvATI(pname, param);

	private typealias glGetTexBumpParameterivATI_t = function void(uint32 pname, int32* param);
	private static glGetTexBumpParameterivATI_t p_glGetTexBumpParameterivATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexBumpParameterivATI(uint32 pname, int32* param) => p_glGetTexBumpParameterivATI(pname, param);

	private typealias glGetTexBumpParameterfvATI_t = function void(uint32 pname, float* param);
	private static glGetTexBumpParameterfvATI_t p_glGetTexBumpParameterfvATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexBumpParameterfvATI(uint32 pname, float* param) => p_glGetTexBumpParameterfvATI(pname, param);

	private typealias glGenFragmentShadersATI_t = function uint32(uint32 range);
	private static glGenFragmentShadersATI_t p_glGenFragmentShadersATI;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGenFragmentShadersATI(uint32 range) => p_glGenFragmentShadersATI(range);

	private typealias glBindFragmentShaderATI_t = function void(uint32 id);
	private static glBindFragmentShaderATI_t p_glBindFragmentShaderATI;
	[CallingConvention(GL.CallConv)]
	public static void glBindFragmentShaderATI(uint32 id) => p_glBindFragmentShaderATI(id);

	private typealias glDeleteFragmentShaderATI_t = function void(uint32 id);
	private static glDeleteFragmentShaderATI_t p_glDeleteFragmentShaderATI;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteFragmentShaderATI(uint32 id) => p_glDeleteFragmentShaderATI(id);

	private typealias glBeginFragmentShaderATI_t = function void();
	private static glBeginFragmentShaderATI_t p_glBeginFragmentShaderATI;
	[CallingConvention(GL.CallConv)]
	public static void glBeginFragmentShaderATI() => p_glBeginFragmentShaderATI();

	private typealias glEndFragmentShaderATI_t = function void();
	private static glEndFragmentShaderATI_t p_glEndFragmentShaderATI;
	[CallingConvention(GL.CallConv)]
	public static void glEndFragmentShaderATI() => p_glEndFragmentShaderATI();

	private typealias glPassTexCoordATI_t = function void(uint32 dst, uint32 coord, uint32 swizzle);
	private static glPassTexCoordATI_t p_glPassTexCoordATI;
	[CallingConvention(GL.CallConv)]
	public static void glPassTexCoordATI(uint32 dst, uint32 coord, uint32 swizzle) => p_glPassTexCoordATI(dst, coord, swizzle);

	private typealias glSampleMapATI_t = function void(uint32 dst, uint32 interp, uint32 swizzle);
	private static glSampleMapATI_t p_glSampleMapATI;
	[CallingConvention(GL.CallConv)]
	public static void glSampleMapATI(uint32 dst, uint32 interp, uint32 swizzle) => p_glSampleMapATI(dst, interp, swizzle);

	private typealias glColorFragmentOp1ATI_t = function void(FragmentOpATI op, uint32 dst, uint32 dstMask, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod);
	private static glColorFragmentOp1ATI_t p_glColorFragmentOp1ATI;
	[CallingConvention(GL.CallConv)]
	public static void glColorFragmentOp1ATI(FragmentOpATI op, uint32 dst, uint32 dstMask, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod) => p_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);

	private typealias glColorFragmentOp2ATI_t = function void(FragmentOpATI op, uint32 dst, uint32 dstMask, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod);
	private static glColorFragmentOp2ATI_t p_glColorFragmentOp2ATI;
	[CallingConvention(GL.CallConv)]
	public static void glColorFragmentOp2ATI(FragmentOpATI op, uint32 dst, uint32 dstMask, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod) => p_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);

	private typealias glColorFragmentOp3ATI_t = function void(FragmentOpATI op, uint32 dst, uint32 dstMask, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod, uint32 arg3, uint32 arg3Rep, uint32 arg3Mod);
	private static glColorFragmentOp3ATI_t p_glColorFragmentOp3ATI;
	[CallingConvention(GL.CallConv)]
	public static void glColorFragmentOp3ATI(FragmentOpATI op, uint32 dst, uint32 dstMask, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod, uint32 arg3, uint32 arg3Rep, uint32 arg3Mod) => p_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);

	private typealias glAlphaFragmentOp1ATI_t = function void(FragmentOpATI op, uint32 dst, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod);
	private static glAlphaFragmentOp1ATI_t p_glAlphaFragmentOp1ATI;
	[CallingConvention(GL.CallConv)]
	public static void glAlphaFragmentOp1ATI(FragmentOpATI op, uint32 dst, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod) => p_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);

	private typealias glAlphaFragmentOp2ATI_t = function void(FragmentOpATI op, uint32 dst, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod);
	private static glAlphaFragmentOp2ATI_t p_glAlphaFragmentOp2ATI;
	[CallingConvention(GL.CallConv)]
	public static void glAlphaFragmentOp2ATI(FragmentOpATI op, uint32 dst, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod) => p_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);

	private typealias glAlphaFragmentOp3ATI_t = function void(FragmentOpATI op, uint32 dst, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod, uint32 arg3, uint32 arg3Rep, uint32 arg3Mod);
	private static glAlphaFragmentOp3ATI_t p_glAlphaFragmentOp3ATI;
	[CallingConvention(GL.CallConv)]
	public static void glAlphaFragmentOp3ATI(FragmentOpATI op, uint32 dst, uint32 dstMod, uint32 arg1, uint32 arg1Rep, uint32 arg1Mod, uint32 arg2, uint32 arg2Rep, uint32 arg2Mod, uint32 arg3, uint32 arg3Rep, uint32 arg3Mod) => p_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);

	private typealias glSetFragmentShaderConstantATI_t = function void(uint32 dst, float* value);
	private static glSetFragmentShaderConstantATI_t p_glSetFragmentShaderConstantATI;
	[CallingConvention(GL.CallConv)]
	public static void glSetFragmentShaderConstantATI(uint32 dst, float* value) => p_glSetFragmentShaderConstantATI(dst, value);

	private typealias glMapObjectBufferATI_t = function void*(uint32 buffer);
	private static glMapObjectBufferATI_t p_glMapObjectBufferATI;
	[CallingConvention(GL.CallConv)]
	public static void* glMapObjectBufferATI(uint32 buffer) => p_glMapObjectBufferATI(buffer);

	private typealias glUnmapObjectBufferATI_t = function void(uint32 buffer);
	private static glUnmapObjectBufferATI_t p_glUnmapObjectBufferATI;
	[CallingConvention(GL.CallConv)]
	public static void glUnmapObjectBufferATI(uint32 buffer) => p_glUnmapObjectBufferATI(buffer);

	private typealias glPNTrianglesiATI_t = function void(uint32 pname, int32 param);
	private static glPNTrianglesiATI_t p_glPNTrianglesiATI;
	[CallingConvention(GL.CallConv)]
	public static void glPNTrianglesiATI(uint32 pname, int32 param) => p_glPNTrianglesiATI(pname, param);

	private typealias glPNTrianglesfATI_t = function void(uint32 pname, float param);
	private static glPNTrianglesfATI_t p_glPNTrianglesfATI;
	[CallingConvention(GL.CallConv)]
	public static void glPNTrianglesfATI(uint32 pname, float param) => p_glPNTrianglesfATI(pname, param);

	private typealias glStencilOpSeparateATI_t = function void(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
	private static glStencilOpSeparateATI_t p_glStencilOpSeparateATI;
	[CallingConvention(GL.CallConv)]
	public static void glStencilOpSeparateATI(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass) => p_glStencilOpSeparateATI(face, sfail, dpfail, dppass);

	private typealias glStencilFuncSeparateATI_t = function void(StencilFunction frontfunc, StencilFunction backfunc, int32 @ref, uint32 mask);
	private static glStencilFuncSeparateATI_t p_glStencilFuncSeparateATI;
	[CallingConvention(GL.CallConv)]
	public static void glStencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, int32 @ref, uint32 mask) => p_glStencilFuncSeparateATI(frontfunc, backfunc, @ref, mask);

	private typealias glNewObjectBufferATI_t = function uint32(int32 size, void* pointer, uint32 usage);
	private static glNewObjectBufferATI_t p_glNewObjectBufferATI;
	[CallingConvention(GL.CallConv)]
	public static uint32 glNewObjectBufferATI(int32 size, void* pointer, uint32 usage) => p_glNewObjectBufferATI(size, pointer, usage);

	private typealias glIsObjectBufferATI_t = function bool(uint32 buffer);
	private static glIsObjectBufferATI_t p_glIsObjectBufferATI;
	[CallingConvention(GL.CallConv)]
	public static bool glIsObjectBufferATI(uint32 buffer) => p_glIsObjectBufferATI(buffer);

	private typealias glUpdateObjectBufferATI_t = function void(uint32 buffer, uint32 offset, int32 size, void* pointer, uint32 preserve);
	private static glUpdateObjectBufferATI_t p_glUpdateObjectBufferATI;
	[CallingConvention(GL.CallConv)]
	public static void glUpdateObjectBufferATI(uint32 buffer, uint32 offset, int32 size, void* pointer, uint32 preserve) => p_glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);

	private typealias glGetObjectBufferfvATI_t = function void(uint32 buffer, uint32 pname, float* @params);
	private static glGetObjectBufferfvATI_t p_glGetObjectBufferfvATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectBufferfvATI(uint32 buffer, uint32 pname, float* @params) => p_glGetObjectBufferfvATI(buffer, pname, @params);

	private typealias glGetObjectBufferivATI_t = function void(uint32 buffer, uint32 pname, int32* @params);
	private static glGetObjectBufferivATI_t p_glGetObjectBufferivATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectBufferivATI(uint32 buffer, uint32 pname, int32* @params) => p_glGetObjectBufferivATI(buffer, pname, @params);

	private typealias glFreeObjectBufferATI_t = function void(uint32 buffer);
	private static glFreeObjectBufferATI_t p_glFreeObjectBufferATI;
	[CallingConvention(GL.CallConv)]
	public static void glFreeObjectBufferATI(uint32 buffer) => p_glFreeObjectBufferATI(buffer);

	private typealias glArrayObjectATI_t = function void(EnableCap array, int32 size, uint32 type, int32 stride, uint32 buffer, uint32 offset);
	private static glArrayObjectATI_t p_glArrayObjectATI;
	[CallingConvention(GL.CallConv)]
	public static void glArrayObjectATI(EnableCap array, int32 size, uint32 type, int32 stride, uint32 buffer, uint32 offset) => p_glArrayObjectATI(array, size, type, stride, buffer, offset);

	private typealias glGetArrayObjectfvATI_t = function void(EnableCap array, uint32 pname, float* @params);
	private static glGetArrayObjectfvATI_t p_glGetArrayObjectfvATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetArrayObjectfvATI(EnableCap array, uint32 pname, float* @params) => p_glGetArrayObjectfvATI(array, pname, @params);

	private typealias glGetArrayObjectivATI_t = function void(EnableCap array, uint32 pname, int32* @params);
	private static glGetArrayObjectivATI_t p_glGetArrayObjectivATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetArrayObjectivATI(EnableCap array, uint32 pname, int32* @params) => p_glGetArrayObjectivATI(array, pname, @params);

	private typealias glVariantArrayObjectATI_t = function void(uint32 id, uint32 type, int32 stride, uint32 buffer, uint32 offset);
	private static glVariantArrayObjectATI_t p_glVariantArrayObjectATI;
	[CallingConvention(GL.CallConv)]
	public static void glVariantArrayObjectATI(uint32 id, uint32 type, int32 stride, uint32 buffer, uint32 offset) => p_glVariantArrayObjectATI(id, type, stride, buffer, offset);

	private typealias glGetVariantArrayObjectfvATI_t = function void(uint32 id, uint32 pname, float* @params);
	private static glGetVariantArrayObjectfvATI_t p_glGetVariantArrayObjectfvATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetVariantArrayObjectfvATI(uint32 id, uint32 pname, float* @params) => p_glGetVariantArrayObjectfvATI(id, pname, @params);

	private typealias glGetVariantArrayObjectivATI_t = function void(uint32 id, uint32 pname, int32* @params);
	private static glGetVariantArrayObjectivATI_t p_glGetVariantArrayObjectivATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetVariantArrayObjectivATI(uint32 id, uint32 pname, int32* @params) => p_glGetVariantArrayObjectivATI(id, pname, @params);

	private typealias glVertexAttribArrayObjectATI_t = function void(uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, uint32 buffer, uint32 offset);
	private static glVertexAttribArrayObjectATI_t p_glVertexAttribArrayObjectATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribArrayObjectATI(uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, uint32 buffer, uint32 offset) => p_glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);

	private typealias glGetVertexAttribArrayObjectfvATI_t = function void(uint32 index, uint32 pname, float* @params);
	private static glGetVertexAttribArrayObjectfvATI_t p_glGetVertexAttribArrayObjectfvATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribArrayObjectfvATI(uint32 index, uint32 pname, float* @params) => p_glGetVertexAttribArrayObjectfvATI(index, pname, @params);

	private typealias glGetVertexAttribArrayObjectivATI_t = function void(uint32 index, uint32 pname, int32* @params);
	private static glGetVertexAttribArrayObjectivATI_t p_glGetVertexAttribArrayObjectivATI;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribArrayObjectivATI(uint32 index, uint32 pname, int32* @params) => p_glGetVertexAttribArrayObjectivATI(index, pname, @params);

	private typealias glVertexStream1sATI_t = function void(uint32 stream, int16 x);
	private static glVertexStream1sATI_t p_glVertexStream1sATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1sATI(uint32 stream, int16 x) => p_glVertexStream1sATI(stream, x);

	private typealias glVertexStream1svATI_t = function void(uint32 stream, int16* coords);
	private static glVertexStream1svATI_t p_glVertexStream1svATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1svATI(uint32 stream, int16* coords) => p_glVertexStream1svATI(stream, coords);

	private typealias glVertexStream1iATI_t = function void(uint32 stream, int32 x);
	private static glVertexStream1iATI_t p_glVertexStream1iATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1iATI(uint32 stream, int32 x) => p_glVertexStream1iATI(stream, x);

	private typealias glVertexStream1ivATI_t = function void(uint32 stream, int32* coords);
	private static glVertexStream1ivATI_t p_glVertexStream1ivATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1ivATI(uint32 stream, int32* coords) => p_glVertexStream1ivATI(stream, coords);

	private typealias glVertexStream1fATI_t = function void(uint32 stream, float x);
	private static glVertexStream1fATI_t p_glVertexStream1fATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1fATI(uint32 stream, float x) => p_glVertexStream1fATI(stream, x);

	private typealias glVertexStream1fvATI_t = function void(uint32 stream, float* coords);
	private static glVertexStream1fvATI_t p_glVertexStream1fvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1fvATI(uint32 stream, float* coords) => p_glVertexStream1fvATI(stream, coords);

	private typealias glVertexStream1dATI_t = function void(uint32 stream, double x);
	private static glVertexStream1dATI_t p_glVertexStream1dATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1dATI(uint32 stream, double x) => p_glVertexStream1dATI(stream, x);

	private typealias glVertexStream1dvATI_t = function void(uint32 stream, double* coords);
	private static glVertexStream1dvATI_t p_glVertexStream1dvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream1dvATI(uint32 stream, double* coords) => p_glVertexStream1dvATI(stream, coords);

	private typealias glVertexStream2sATI_t = function void(uint32 stream, int16 x, int16 y);
	private static glVertexStream2sATI_t p_glVertexStream2sATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2sATI(uint32 stream, int16 x, int16 y) => p_glVertexStream2sATI(stream, x, y);

	private typealias glVertexStream2svATI_t = function void(uint32 stream, int16* coords);
	private static glVertexStream2svATI_t p_glVertexStream2svATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2svATI(uint32 stream, int16* coords) => p_glVertexStream2svATI(stream, coords);

	private typealias glVertexStream2iATI_t = function void(uint32 stream, int32 x, int32 y);
	private static glVertexStream2iATI_t p_glVertexStream2iATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2iATI(uint32 stream, int32 x, int32 y) => p_glVertexStream2iATI(stream, x, y);

	private typealias glVertexStream2ivATI_t = function void(uint32 stream, int32* coords);
	private static glVertexStream2ivATI_t p_glVertexStream2ivATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2ivATI(uint32 stream, int32* coords) => p_glVertexStream2ivATI(stream, coords);

	private typealias glVertexStream2fATI_t = function void(uint32 stream, float x, float y);
	private static glVertexStream2fATI_t p_glVertexStream2fATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2fATI(uint32 stream, float x, float y) => p_glVertexStream2fATI(stream, x, y);

	private typealias glVertexStream2fvATI_t = function void(uint32 stream, float* coords);
	private static glVertexStream2fvATI_t p_glVertexStream2fvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2fvATI(uint32 stream, float* coords) => p_glVertexStream2fvATI(stream, coords);

	private typealias glVertexStream2dATI_t = function void(uint32 stream, double x, double y);
	private static glVertexStream2dATI_t p_glVertexStream2dATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2dATI(uint32 stream, double x, double y) => p_glVertexStream2dATI(stream, x, y);

	private typealias glVertexStream2dvATI_t = function void(uint32 stream, double* coords);
	private static glVertexStream2dvATI_t p_glVertexStream2dvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream2dvATI(uint32 stream, double* coords) => p_glVertexStream2dvATI(stream, coords);

	private typealias glVertexStream3sATI_t = function void(uint32 stream, int16 x, int16 y, int16 z);
	private static glVertexStream3sATI_t p_glVertexStream3sATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3sATI(uint32 stream, int16 x, int16 y, int16 z) => p_glVertexStream3sATI(stream, x, y, z);

	private typealias glVertexStream3svATI_t = function void(uint32 stream, int16* coords);
	private static glVertexStream3svATI_t p_glVertexStream3svATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3svATI(uint32 stream, int16* coords) => p_glVertexStream3svATI(stream, coords);

	private typealias glVertexStream3iATI_t = function void(uint32 stream, int32 x, int32 y, int32 z);
	private static glVertexStream3iATI_t p_glVertexStream3iATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3iATI(uint32 stream, int32 x, int32 y, int32 z) => p_glVertexStream3iATI(stream, x, y, z);

	private typealias glVertexStream3ivATI_t = function void(uint32 stream, int32* coords);
	private static glVertexStream3ivATI_t p_glVertexStream3ivATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3ivATI(uint32 stream, int32* coords) => p_glVertexStream3ivATI(stream, coords);

	private typealias glVertexStream3fATI_t = function void(uint32 stream, float x, float y, float z);
	private static glVertexStream3fATI_t p_glVertexStream3fATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3fATI(uint32 stream, float x, float y, float z) => p_glVertexStream3fATI(stream, x, y, z);

	private typealias glVertexStream3fvATI_t = function void(uint32 stream, float* coords);
	private static glVertexStream3fvATI_t p_glVertexStream3fvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3fvATI(uint32 stream, float* coords) => p_glVertexStream3fvATI(stream, coords);

	private typealias glVertexStream3dATI_t = function void(uint32 stream, double x, double y, double z);
	private static glVertexStream3dATI_t p_glVertexStream3dATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3dATI(uint32 stream, double x, double y, double z) => p_glVertexStream3dATI(stream, x, y, z);

	private typealias glVertexStream3dvATI_t = function void(uint32 stream, double* coords);
	private static glVertexStream3dvATI_t p_glVertexStream3dvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream3dvATI(uint32 stream, double* coords) => p_glVertexStream3dvATI(stream, coords);

	private typealias glVertexStream4sATI_t = function void(uint32 stream, int16 x, int16 y, int16 z, int16 w);
	private static glVertexStream4sATI_t p_glVertexStream4sATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4sATI(uint32 stream, int16 x, int16 y, int16 z, int16 w) => p_glVertexStream4sATI(stream, x, y, z, w);

	private typealias glVertexStream4svATI_t = function void(uint32 stream, int16* coords);
	private static glVertexStream4svATI_t p_glVertexStream4svATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4svATI(uint32 stream, int16* coords) => p_glVertexStream4svATI(stream, coords);

	private typealias glVertexStream4iATI_t = function void(uint32 stream, int32 x, int32 y, int32 z, int32 w);
	private static glVertexStream4iATI_t p_glVertexStream4iATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4iATI(uint32 stream, int32 x, int32 y, int32 z, int32 w) => p_glVertexStream4iATI(stream, x, y, z, w);

	private typealias glVertexStream4ivATI_t = function void(uint32 stream, int32* coords);
	private static glVertexStream4ivATI_t p_glVertexStream4ivATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4ivATI(uint32 stream, int32* coords) => p_glVertexStream4ivATI(stream, coords);

	private typealias glVertexStream4fATI_t = function void(uint32 stream, float x, float y, float z, float w);
	private static glVertexStream4fATI_t p_glVertexStream4fATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4fATI(uint32 stream, float x, float y, float z, float w) => p_glVertexStream4fATI(stream, x, y, z, w);

	private typealias glVertexStream4fvATI_t = function void(uint32 stream, float* coords);
	private static glVertexStream4fvATI_t p_glVertexStream4fvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4fvATI(uint32 stream, float* coords) => p_glVertexStream4fvATI(stream, coords);

	private typealias glVertexStream4dATI_t = function void(uint32 stream, double x, double y, double z, double w);
	private static glVertexStream4dATI_t p_glVertexStream4dATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4dATI(uint32 stream, double x, double y, double z, double w) => p_glVertexStream4dATI(stream, x, y, z, w);

	private typealias glVertexStream4dvATI_t = function void(uint32 stream, double* coords);
	private static glVertexStream4dvATI_t p_glVertexStream4dvATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexStream4dvATI(uint32 stream, double* coords) => p_glVertexStream4dvATI(stream, coords);

	private typealias glNormalStream3bATI_t = function void(uint32 stream, int8 nx, int8 ny, int8 nz);
	private static glNormalStream3bATI_t p_glNormalStream3bATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3bATI(uint32 stream, int8 nx, int8 ny, int8 nz) => p_glNormalStream3bATI(stream, nx, ny, nz);

	private typealias glNormalStream3bvATI_t = function void(uint32 stream, uint8* coords);
	private static glNormalStream3bvATI_t p_glNormalStream3bvATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3bvATI(uint32 stream, uint8* coords) => p_glNormalStream3bvATI(stream, coords);

	private typealias glNormalStream3sATI_t = function void(uint32 stream, int16 nx, int16 ny, int16 nz);
	private static glNormalStream3sATI_t p_glNormalStream3sATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3sATI(uint32 stream, int16 nx, int16 ny, int16 nz) => p_glNormalStream3sATI(stream, nx, ny, nz);

	private typealias glNormalStream3svATI_t = function void(uint32 stream, int16* coords);
	private static glNormalStream3svATI_t p_glNormalStream3svATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3svATI(uint32 stream, int16* coords) => p_glNormalStream3svATI(stream, coords);

	private typealias glNormalStream3iATI_t = function void(uint32 stream, int32 nx, int32 ny, int32 nz);
	private static glNormalStream3iATI_t p_glNormalStream3iATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3iATI(uint32 stream, int32 nx, int32 ny, int32 nz) => p_glNormalStream3iATI(stream, nx, ny, nz);

	private typealias glNormalStream3ivATI_t = function void(uint32 stream, int32* coords);
	private static glNormalStream3ivATI_t p_glNormalStream3ivATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3ivATI(uint32 stream, int32* coords) => p_glNormalStream3ivATI(stream, coords);

	private typealias glNormalStream3fATI_t = function void(uint32 stream, float nx, float ny, float nz);
	private static glNormalStream3fATI_t p_glNormalStream3fATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3fATI(uint32 stream, float nx, float ny, float nz) => p_glNormalStream3fATI(stream, nx, ny, nz);

	private typealias glNormalStream3fvATI_t = function void(uint32 stream, float* coords);
	private static glNormalStream3fvATI_t p_glNormalStream3fvATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3fvATI(uint32 stream, float* coords) => p_glNormalStream3fvATI(stream, coords);

	private typealias glNormalStream3dATI_t = function void(uint32 stream, double nx, double ny, double nz);
	private static glNormalStream3dATI_t p_glNormalStream3dATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3dATI(uint32 stream, double nx, double ny, double nz) => p_glNormalStream3dATI(stream, nx, ny, nz);

	private typealias glNormalStream3dvATI_t = function void(uint32 stream, double* coords);
	private static glNormalStream3dvATI_t p_glNormalStream3dvATI;
	[CallingConvention(GL.CallConv)]
	public static void glNormalStream3dvATI(uint32 stream, double* coords) => p_glNormalStream3dvATI(stream, coords);

	private typealias glClientActiveVertexStreamATI_t = function void(uint32 stream);
	private static glClientActiveVertexStreamATI_t p_glClientActiveVertexStreamATI;
	[CallingConvention(GL.CallConv)]
	public static void glClientActiveVertexStreamATI(uint32 stream) => p_glClientActiveVertexStreamATI(stream);

	private typealias glVertexBlendEnviATI_t = function void(uint32 pname, int32 param);
	private static glVertexBlendEnviATI_t p_glVertexBlendEnviATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexBlendEnviATI(uint32 pname, int32 param) => p_glVertexBlendEnviATI(pname, param);

	private typealias glVertexBlendEnvfATI_t = function void(uint32 pname, float param);
	private static glVertexBlendEnvfATI_t p_glVertexBlendEnvfATI;
	[CallingConvention(GL.CallConv)]
	public static void glVertexBlendEnvfATI(uint32 pname, float param) => p_glVertexBlendEnvfATI(pname, param);

	private typealias glEGLImageTargetTexStorageEXT_t = function void(uint32 target, void* image, void* attrib_list);
	private static glEGLImageTargetTexStorageEXT_t p_glEGLImageTargetTexStorageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEGLImageTargetTexStorageEXT(uint32 target, void* image, void* attrib_list) => p_glEGLImageTargetTexStorageEXT(target, image, attrib_list);

	private typealias glEGLImageTargetTextureStorageEXT_t = function void(uint32 texture, void* image, void* attrib_list);
	private static glEGLImageTargetTextureStorageEXT_t p_glEGLImageTargetTextureStorageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEGLImageTargetTextureStorageEXT(uint32 texture, void* image, void* attrib_list) => p_glEGLImageTargetTextureStorageEXT(texture, image, attrib_list);

	private typealias glDrawArraysInstancedBaseInstanceEXT_t = function void(PrimitiveType mode, int32 first, int32 count, int32 instancecount, uint32 baseinstance);
	private static glDrawArraysInstancedBaseInstanceEXT_t p_glDrawArraysInstancedBaseInstanceEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysInstancedBaseInstanceEXT(PrimitiveType mode, int32 first, int32 count, int32 instancecount, uint32 baseinstance) => p_glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance);

	private typealias glDrawElementsInstancedBaseInstanceEXT_t = function void(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 instancecount, uint32 baseinstance);
	private static glDrawElementsInstancedBaseInstanceEXT_t p_glDrawElementsInstancedBaseInstanceEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedBaseInstanceEXT(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 instancecount, uint32 baseinstance) => p_glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance);

	private typealias glDrawElementsInstancedBaseVertexBaseInstanceEXT_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex, uint32 baseinstance);
	private static glDrawElementsInstancedBaseVertexBaseInstanceEXT_t p_glDrawElementsInstancedBaseVertexBaseInstanceEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedBaseVertexBaseInstanceEXT(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex, uint32 baseinstance) => p_glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance);

	private typealias glUniformBufferEXT_t = function void(uint32 program, int32 location, uint32 buffer);
	private static glUniformBufferEXT_t p_glUniformBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniformBufferEXT(uint32 program, int32 location, uint32 buffer) => p_glUniformBufferEXT(program, location, buffer);

	private typealias glGetUniformBufferSizeEXT_t = function int32(uint32 program, int32 location);
	private static glGetUniformBufferSizeEXT_t p_glGetUniformBufferSizeEXT;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetUniformBufferSizeEXT(uint32 program, int32 location) => p_glGetUniformBufferSizeEXT(program, location);

	private typealias glGetUniformOffsetEXT_t = function void*(uint32 program, int32 location);
	private static glGetUniformOffsetEXT_t p_glGetUniformOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void* glGetUniformOffsetEXT(uint32 program, int32 location) => p_glGetUniformOffsetEXT(program, location);

	private typealias glBlendColorEXT_t = function void(float red, float green, float blue, float alpha);
	private static glBlendColorEXT_t p_glBlendColorEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendColorEXT(float red, float green, float blue, float alpha) => p_glBlendColorEXT(red, green, blue, alpha);

	private typealias glBlendEquationSeparateEXT_t = function void(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparateEXT_t p_glBlendEquationSeparateEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparateEXT(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparateEXT(modeRGB, modeAlpha);

	private typealias glBindFragDataLocationIndexedEXT_t = function void(uint32 program, uint32 colorNumber, uint32 index, char8* name);
	private static glBindFragDataLocationIndexedEXT_t p_glBindFragDataLocationIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindFragDataLocationIndexedEXT(uint32 program, uint32 colorNumber, uint32 index, char8* name) => p_glBindFragDataLocationIndexedEXT(program, colorNumber, index, name);

	private typealias glBindFragDataLocationEXT_t = function void(uint32 program, uint32 color, char8* name);
	private static glBindFragDataLocationEXT_t p_glBindFragDataLocationEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindFragDataLocationEXT(uint32 program, uint32 color, char8* name) => p_glBindFragDataLocationEXT(program, color, name);

	private typealias glGetProgramResourceLocationIndexEXT_t = function int32(uint32 program, ProgramInterface programInterface, char8* name);
	private static glGetProgramResourceLocationIndexEXT_t p_glGetProgramResourceLocationIndexEXT;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetProgramResourceLocationIndexEXT(uint32 program, ProgramInterface programInterface, char8* name) => p_glGetProgramResourceLocationIndexEXT(program, programInterface, name);

	private typealias glGetFragDataIndexEXT_t = function int32(uint32 program, char8* name);
	private static glGetFragDataIndexEXT_t p_glGetFragDataIndexEXT;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetFragDataIndexEXT(uint32 program, char8* name) => p_glGetFragDataIndexEXT(program, name);

	private typealias glBlendFuncSeparateEXT_t = function void(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
	private static glBlendFuncSeparateEXT_t p_glBlendFuncSeparateEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparateEXT(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) => p_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

	private typealias glBlendEquationEXT_t = function void(BlendEquationModeEXT mode);
	private static glBlendEquationEXT_t p_glBlendEquationEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationEXT(BlendEquationModeEXT mode) => p_glBlendEquationEXT(mode);

	private typealias glBufferStorageEXT_t = function void(BufferStorageTarget target, int32 size, void* data, uint32 flags);
	private static glBufferStorageEXT_t p_glBufferStorageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBufferStorageEXT(BufferStorageTarget target, int32 size, void* data, uint32 flags) => p_glBufferStorageEXT(target, size, data, flags);

	private typealias glClearTexImageEXT_t = function void(uint32 texture, int32 level, PixelFormat format, PixelType type, void* data);
	private static glClearTexImageEXT_t p_glClearTexImageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClearTexImageEXT(uint32 texture, int32 level, PixelFormat format, PixelType type, void* data) => p_glClearTexImageEXT(texture, level, format, type, data);

	private typealias glClearTexSubImageEXT_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* data);
	private static glClearTexSubImageEXT_t p_glClearTexSubImageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClearTexSubImageEXT(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* data) => p_glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

	private typealias glClipControlEXT_t = function void(uint32 origin, uint32 depth);
	private static glClipControlEXT_t p_glClipControlEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClipControlEXT(uint32 origin, uint32 depth) => p_glClipControlEXT(origin, depth);

	private typealias glColorSubTableEXT_t = function void(ColorTableTarget target, int32 start, int32 count, PixelFormat format, PixelType type, void* data);
	private static glColorSubTableEXT_t p_glColorSubTableEXT;
	[CallingConvention(GL.CallConv)]
	public static void glColorSubTableEXT(ColorTableTarget target, int32 start, int32 count, PixelFormat format, PixelType type, void* data) => p_glColorSubTableEXT(target, start, count, format, type, data);

	private typealias glCopyColorSubTableEXT_t = function void(ColorTableTarget target, int32 start, int32 x, int32 y, int32 width);
	private static glCopyColorSubTableEXT_t p_glCopyColorSubTableEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyColorSubTableEXT(ColorTableTarget target, int32 start, int32 x, int32 y, int32 width) => p_glCopyColorSubTableEXT(target, start, x, y, width);

	private typealias glLockArraysEXT_t = function void(int32 first, int32 count);
	private static glLockArraysEXT_t p_glLockArraysEXT;
	[CallingConvention(GL.CallConv)]
	public static void glLockArraysEXT(int32 first, int32 count) => p_glLockArraysEXT(first, count);

	private typealias glUnlockArraysEXT_t = function void();
	private static glUnlockArraysEXT_t p_glUnlockArraysEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUnlockArraysEXT() => p_glUnlockArraysEXT();

	private typealias glConvolutionFilter1DEXT_t = function void(ConvolutionTargetEXT target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* image);
	private static glConvolutionFilter1DEXT_t p_glConvolutionFilter1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* image) => p_glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);

	private typealias glConvolutionFilter2DEXT_t = function void(ConvolutionTargetEXT target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* image);
	private static glConvolutionFilter2DEXT_t p_glConvolutionFilter2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* image) => p_glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);

	private typealias glConvolutionParameterfEXT_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float @params);
	private static glConvolutionParameterfEXT_t p_glConvolutionParameterfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameterfEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float @params) => p_glConvolutionParameterfEXT(target, pname, @params);

	private typealias glConvolutionParameterfvEXT_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float* @params);
	private static glConvolutionParameterfvEXT_t p_glConvolutionParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float* @params) => p_glConvolutionParameterfvEXT(target, pname, @params);

	private typealias glConvolutionParameteriEXT_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32 @params);
	private static glConvolutionParameteriEXT_t p_glConvolutionParameteriEXT;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameteriEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32 @params) => p_glConvolutionParameteriEXT(target, pname, @params);

	private typealias glConvolutionParameterivEXT_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32* @params);
	private static glConvolutionParameterivEXT_t p_glConvolutionParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32* @params) => p_glConvolutionParameterivEXT(target, pname, @params);

	private typealias glCopyConvolutionFilter1DEXT_t = function void(ConvolutionTargetEXT target, InternalFormat internalformat, int32 x, int32 y, int32 width);
	private static glCopyConvolutionFilter1DEXT_t p_glCopyConvolutionFilter1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int32 x, int32 y, int32 width) => p_glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);

	private typealias glCopyConvolutionFilter2DEXT_t = function void(ConvolutionTargetEXT target, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height);
	private static glCopyConvolutionFilter2DEXT_t p_glCopyConvolutionFilter2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height) => p_glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);

	private typealias glGetConvolutionFilterEXT_t = function void(ConvolutionTargetEXT target, PixelFormat format, PixelType type, void* image);
	private static glGetConvolutionFilterEXT_t p_glGetConvolutionFilterEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, void* image) => p_glGetConvolutionFilterEXT(target, format, type, image);

	private typealias glGetConvolutionParameterfvEXT_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float* @params);
	private static glGetConvolutionParameterfvEXT_t p_glGetConvolutionParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float* @params) => p_glGetConvolutionParameterfvEXT(target, pname, @params);

	private typealias glGetConvolutionParameterivEXT_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32* @params);
	private static glGetConvolutionParameterivEXT_t p_glGetConvolutionParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32* @params) => p_glGetConvolutionParameterivEXT(target, pname, @params);

	private typealias glGetSeparableFilterEXT_t = function void(SeparableTargetEXT target, PixelFormat format, PixelType type, void* row, void* column, void* span);
	private static glGetSeparableFilterEXT_t p_glGetSeparableFilterEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, void* row, void* column, void* span) => p_glGetSeparableFilterEXT(target, format, type, row, column, span);

	private typealias glSeparableFilter2DEXT_t = function void(SeparableTargetEXT target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* row, void* column);
	private static glSeparableFilter2DEXT_t p_glSeparableFilter2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSeparableFilter2DEXT(SeparableTargetEXT target, InternalFormat internalformat, int32 width, int32 height, PixelFormat format, PixelType type, void* row, void* column) => p_glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);

	private typealias glTangent3bEXT_t = function void(int8 tx, int8 ty, int8 tz);
	private static glTangent3bEXT_t p_glTangent3bEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3bEXT(int8 tx, int8 ty, int8 tz) => p_glTangent3bEXT(tx, ty, tz);

	private typealias glTangent3bvEXT_t = function void(uint8* v);
	private static glTangent3bvEXT_t p_glTangent3bvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3bvEXT(uint8* v) => p_glTangent3bvEXT(v);

	private typealias glTangent3dEXT_t = function void(double tx, double ty, double tz);
	private static glTangent3dEXT_t p_glTangent3dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3dEXT(double tx, double ty, double tz) => p_glTangent3dEXT(tx, ty, tz);

	private typealias glTangent3dvEXT_t = function void(double* v);
	private static glTangent3dvEXT_t p_glTangent3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3dvEXT(double* v) => p_glTangent3dvEXT(v);

	private typealias glTangent3fEXT_t = function void(float tx, float ty, float tz);
	private static glTangent3fEXT_t p_glTangent3fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3fEXT(float tx, float ty, float tz) => p_glTangent3fEXT(tx, ty, tz);

	private typealias glTangent3fvEXT_t = function void(float* v);
	private static glTangent3fvEXT_t p_glTangent3fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3fvEXT(float* v) => p_glTangent3fvEXT(v);

	private typealias glTangent3iEXT_t = function void(int32 tx, int32 ty, int32 tz);
	private static glTangent3iEXT_t p_glTangent3iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3iEXT(int32 tx, int32 ty, int32 tz) => p_glTangent3iEXT(tx, ty, tz);

	private typealias glTangent3ivEXT_t = function void(int32* v);
	private static glTangent3ivEXT_t p_glTangent3ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3ivEXT(int32* v) => p_glTangent3ivEXT(v);

	private typealias glTangent3sEXT_t = function void(int16 tx, int16 ty, int16 tz);
	private static glTangent3sEXT_t p_glTangent3sEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3sEXT(int16 tx, int16 ty, int16 tz) => p_glTangent3sEXT(tx, ty, tz);

	private typealias glTangent3svEXT_t = function void(int16* v);
	private static glTangent3svEXT_t p_glTangent3svEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangent3svEXT(int16* v) => p_glTangent3svEXT(v);

	private typealias glBinormal3bEXT_t = function void(int8 bx, int8 by, int8 bz);
	private static glBinormal3bEXT_t p_glBinormal3bEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3bEXT(int8 bx, int8 by, int8 bz) => p_glBinormal3bEXT(bx, by, bz);

	private typealias glBinormal3bvEXT_t = function void(uint8* v);
	private static glBinormal3bvEXT_t p_glBinormal3bvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3bvEXT(uint8* v) => p_glBinormal3bvEXT(v);

	private typealias glBinormal3dEXT_t = function void(double bx, double by, double bz);
	private static glBinormal3dEXT_t p_glBinormal3dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3dEXT(double bx, double by, double bz) => p_glBinormal3dEXT(bx, by, bz);

	private typealias glBinormal3dvEXT_t = function void(double* v);
	private static glBinormal3dvEXT_t p_glBinormal3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3dvEXT(double* v) => p_glBinormal3dvEXT(v);

	private typealias glBinormal3fEXT_t = function void(float bx, float by, float bz);
	private static glBinormal3fEXT_t p_glBinormal3fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3fEXT(float bx, float by, float bz) => p_glBinormal3fEXT(bx, by, bz);

	private typealias glBinormal3fvEXT_t = function void(float* v);
	private static glBinormal3fvEXT_t p_glBinormal3fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3fvEXT(float* v) => p_glBinormal3fvEXT(v);

	private typealias glBinormal3iEXT_t = function void(int32 bx, int32 by, int32 bz);
	private static glBinormal3iEXT_t p_glBinormal3iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3iEXT(int32 bx, int32 by, int32 bz) => p_glBinormal3iEXT(bx, by, bz);

	private typealias glBinormal3ivEXT_t = function void(int32* v);
	private static glBinormal3ivEXT_t p_glBinormal3ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3ivEXT(int32* v) => p_glBinormal3ivEXT(v);

	private typealias glBinormal3sEXT_t = function void(int16 bx, int16 by, int16 bz);
	private static glBinormal3sEXT_t p_glBinormal3sEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3sEXT(int16 bx, int16 by, int16 bz) => p_glBinormal3sEXT(bx, by, bz);

	private typealias glBinormal3svEXT_t = function void(int16* v);
	private static glBinormal3svEXT_t p_glBinormal3svEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormal3svEXT(int16* v) => p_glBinormal3svEXT(v);

	private typealias glTangentPointerEXT_t = function void(uint32 type, int32 stride, void* pointer);
	private static glTangentPointerEXT_t p_glTangentPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTangentPointerEXT(uint32 type, int32 stride, void* pointer) => p_glTangentPointerEXT(type, stride, pointer);

	private typealias glBinormalPointerEXT_t = function void(uint32 type, int32 stride, void* pointer);
	private static glBinormalPointerEXT_t p_glBinormalPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBinormalPointerEXT(uint32 type, int32 stride, void* pointer) => p_glBinormalPointerEXT(type, stride, pointer);

	private typealias glCopyImageSubDataEXT_t = function void(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth);
	private static glCopyImageSubDataEXT_t p_glCopyImageSubDataEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyImageSubDataEXT(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth) => p_glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

	private typealias glCopyTexImage1DEXT_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border);
	private static glCopyTexImage1DEXT_t p_glCopyTexImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexImage1DEXT(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border) => p_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);

	private typealias glCopyTexImage2DEXT_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border);
	private static glCopyTexImage2DEXT_t p_glCopyTexImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexImage2DEXT(TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border) => p_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);

	private typealias glCopyTexSubImage1DEXT_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width);
	private static glCopyTexSubImage1DEXT_t p_glCopyTexSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexSubImage1DEXT(TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width) => p_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);

	private typealias glCopyTexSubImage2DEXT_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTexSubImage2DEXT_t p_glCopyTexSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexSubImage2DEXT(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);

	private typealias glCopyTexSubImage3DEXT_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTexSubImage3DEXT_t p_glCopyTexSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexSubImage3DEXT(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);

	private typealias glCullParameterdvEXT_t = function void(uint32 pname, double* @params);
	private static glCullParameterdvEXT_t p_glCullParameterdvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCullParameterdvEXT(uint32 pname, double* @params) => p_glCullParameterdvEXT(pname, @params);

	private typealias glCullParameterfvEXT_t = function void(uint32 pname, float* @params);
	private static glCullParameterfvEXT_t p_glCullParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCullParameterfvEXT(uint32 pname, float* @params) => p_glCullParameterfvEXT(pname, @params);

	private typealias glLabelObjectEXT_t = function void(uint32 type, uint32 _object, int32 length, char8* label);
	private static glLabelObjectEXT_t p_glLabelObjectEXT;
	[CallingConvention(GL.CallConv)]
	public static void glLabelObjectEXT(uint32 type, uint32 _object, int32 length, char8* label) => p_glLabelObjectEXT(type, _object, length, label);

	private typealias glGetObjectLabelEXT_t = function void(uint32 type, uint32 _object, int32 bufSize, int32* length, char8* label);
	private static glGetObjectLabelEXT_t p_glGetObjectLabelEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectLabelEXT(uint32 type, uint32 _object, int32 bufSize, int32* length, char8* label) => p_glGetObjectLabelEXT(type, _object, bufSize, length, label);

	private typealias glInsertEventMarkerEXT_t = function void(int32 length, char8* marker);
	private static glInsertEventMarkerEXT_t p_glInsertEventMarkerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glInsertEventMarkerEXT(int32 length, char8* marker) => p_glInsertEventMarkerEXT(length, marker);

	private typealias glPushGroupMarkerEXT_t = function void(int32 length, char8* marker);
	private static glPushGroupMarkerEXT_t p_glPushGroupMarkerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPushGroupMarkerEXT(int32 length, char8* marker) => p_glPushGroupMarkerEXT(length, marker);

	private typealias glPopGroupMarkerEXT_t = function void();
	private static glPopGroupMarkerEXT_t p_glPopGroupMarkerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPopGroupMarkerEXT() => p_glPopGroupMarkerEXT();

	private typealias glDepthBoundsEXT_t = function void(double zmin, double zmax);
	private static glDepthBoundsEXT_t p_glDepthBoundsEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDepthBoundsEXT(double zmin, double zmax) => p_glDepthBoundsEXT(zmin, zmax);

	private typealias glMatrixLoadfEXT_t = function void(MatrixMode mode, float* m);
	private static glMatrixLoadfEXT_t p_glMatrixLoadfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoadfEXT(MatrixMode mode, float* m) => p_glMatrixLoadfEXT(mode, m);

	private typealias glMatrixLoaddEXT_t = function void(MatrixMode mode, double* m);
	private static glMatrixLoaddEXT_t p_glMatrixLoaddEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoaddEXT(MatrixMode mode, double* m) => p_glMatrixLoaddEXT(mode, m);

	private typealias glMatrixMultfEXT_t = function void(MatrixMode mode, float* m);
	private static glMatrixMultfEXT_t p_glMatrixMultfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixMultfEXT(MatrixMode mode, float* m) => p_glMatrixMultfEXT(mode, m);

	private typealias glMatrixMultdEXT_t = function void(MatrixMode mode, double* m);
	private static glMatrixMultdEXT_t p_glMatrixMultdEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixMultdEXT(MatrixMode mode, double* m) => p_glMatrixMultdEXT(mode, m);

	private typealias glMatrixLoadIdentityEXT_t = function void(MatrixMode mode);
	private static glMatrixLoadIdentityEXT_t p_glMatrixLoadIdentityEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoadIdentityEXT(MatrixMode mode) => p_glMatrixLoadIdentityEXT(mode);

	private typealias glMatrixRotatefEXT_t = function void(MatrixMode mode, float angle, float x, float y, float z);
	private static glMatrixRotatefEXT_t p_glMatrixRotatefEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixRotatefEXT(MatrixMode mode, float angle, float x, float y, float z) => p_glMatrixRotatefEXT(mode, angle, x, y, z);

	private typealias glMatrixRotatedEXT_t = function void(MatrixMode mode, double angle, double x, double y, double z);
	private static glMatrixRotatedEXT_t p_glMatrixRotatedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixRotatedEXT(MatrixMode mode, double angle, double x, double y, double z) => p_glMatrixRotatedEXT(mode, angle, x, y, z);

	private typealias glMatrixScalefEXT_t = function void(MatrixMode mode, float x, float y, float z);
	private static glMatrixScalefEXT_t p_glMatrixScalefEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixScalefEXT(MatrixMode mode, float x, float y, float z) => p_glMatrixScalefEXT(mode, x, y, z);

	private typealias glMatrixScaledEXT_t = function void(MatrixMode mode, double x, double y, double z);
	private static glMatrixScaledEXT_t p_glMatrixScaledEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixScaledEXT(MatrixMode mode, double x, double y, double z) => p_glMatrixScaledEXT(mode, x, y, z);

	private typealias glMatrixTranslatefEXT_t = function void(MatrixMode mode, float x, float y, float z);
	private static glMatrixTranslatefEXT_t p_glMatrixTranslatefEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixTranslatefEXT(MatrixMode mode, float x, float y, float z) => p_glMatrixTranslatefEXT(mode, x, y, z);

	private typealias glMatrixTranslatedEXT_t = function void(MatrixMode mode, double x, double y, double z);
	private static glMatrixTranslatedEXT_t p_glMatrixTranslatedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixTranslatedEXT(MatrixMode mode, double x, double y, double z) => p_glMatrixTranslatedEXT(mode, x, y, z);

	private typealias glMatrixFrustumEXT_t = function void(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);
	private static glMatrixFrustumEXT_t p_glMatrixFrustumEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar) => p_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);

	private typealias glMatrixOrthoEXT_t = function void(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);
	private static glMatrixOrthoEXT_t p_glMatrixOrthoEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar) => p_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);

	private typealias glMatrixPopEXT_t = function void(MatrixMode mode);
	private static glMatrixPopEXT_t p_glMatrixPopEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixPopEXT(MatrixMode mode) => p_glMatrixPopEXT(mode);

	private typealias glMatrixPushEXT_t = function void(MatrixMode mode);
	private static glMatrixPushEXT_t p_glMatrixPushEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixPushEXT(MatrixMode mode) => p_glMatrixPushEXT(mode);

	private typealias glClientAttribDefaultEXT_t = function void(uint32 mask);
	private static glClientAttribDefaultEXT_t p_glClientAttribDefaultEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClientAttribDefaultEXT(uint32 mask) => p_glClientAttribDefaultEXT(mask);

	private typealias glPushClientAttribDefaultEXT_t = function void(uint32 mask);
	private static glPushClientAttribDefaultEXT_t p_glPushClientAttribDefaultEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPushClientAttribDefaultEXT(uint32 mask) => p_glPushClientAttribDefaultEXT(mask);

	private typealias glTextureParameterfEXT_t = function void(uint32 texture, TextureTarget target, TextureParameterName pname, float param);
	private static glTextureParameterfEXT_t p_glTextureParameterfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterfEXT(uint32 texture, TextureTarget target, TextureParameterName pname, float param) => p_glTextureParameterfEXT(texture, target, pname, param);

	private typealias glTextureParameterfvEXT_t = function void(uint32 texture, TextureTarget target, TextureParameterName pname, float* @params);
	private static glTextureParameterfvEXT_t p_glTextureParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterfvEXT(uint32 texture, TextureTarget target, TextureParameterName pname, float* @params) => p_glTextureParameterfvEXT(texture, target, pname, @params);

	private typealias glTextureParameteriEXT_t = function void(uint32 texture, TextureTarget target, TextureParameterName pname, int32 param);
	private static glTextureParameteriEXT_t p_glTextureParameteriEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameteriEXT(uint32 texture, TextureTarget target, TextureParameterName pname, int32 param) => p_glTextureParameteriEXT(texture, target, pname, param);

	private typealias glTextureParameterivEXT_t = function void(uint32 texture, TextureTarget target, TextureParameterName pname, int32* @params);
	private static glTextureParameterivEXT_t p_glTextureParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterivEXT(uint32 texture, TextureTarget target, TextureParameterName pname, int32* @params) => p_glTextureParameterivEXT(texture, target, pname, @params);

	private typealias glTextureImage1DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTextureImage1DEXT_t p_glTextureImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureImage1DEXT(uint32 texture, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);

	private typealias glTextureImage2DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTextureImage2DEXT_t p_glTextureImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureImage2DEXT(uint32 texture, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);

	private typealias glTextureSubImage1DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels);
	private static glTextureSubImage1DEXT_t p_glTextureSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureSubImage1DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels) => p_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);

	private typealias glTextureSubImage2DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels);
	private static glTextureSubImage2DEXT_t p_glTextureSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureSubImage2DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels) => p_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);

	private typealias glCopyTextureImage1DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border);
	private static glCopyTextureImage1DEXT_t p_glCopyTextureImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureImage1DEXT(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border) => p_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);

	private typealias glCopyTextureImage2DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border);
	private static glCopyTextureImage2DEXT_t p_glCopyTextureImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureImage2DEXT(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border) => p_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);

	private typealias glCopyTextureSubImage1DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width);
	private static glCopyTextureSubImage1DEXT_t p_glCopyTextureSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureSubImage1DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width) => p_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);

	private typealias glCopyTextureSubImage2DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTextureSubImage2DEXT_t p_glCopyTextureSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureSubImage2DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);

	private typealias glGetTextureImageEXT_t = function void(uint32 texture, TextureTarget target, int32 level, PixelFormat format, PixelType type, void* pixels);
	private static glGetTextureImageEXT_t p_glGetTextureImageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureImageEXT(uint32 texture, TextureTarget target, int32 level, PixelFormat format, PixelType type, void* pixels) => p_glGetTextureImageEXT(texture, target, level, format, type, pixels);

	private typealias glGetTextureParameterfvEXT_t = function void(uint32 texture, TextureTarget target, GetTextureParameter pname, float* @params);
	private static glGetTextureParameterfvEXT_t p_glGetTextureParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameterfvEXT(uint32 texture, TextureTarget target, GetTextureParameter pname, float* @params) => p_glGetTextureParameterfvEXT(texture, target, pname, @params);

	private typealias glGetTextureParameterivEXT_t = function void(uint32 texture, TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetTextureParameterivEXT_t p_glGetTextureParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameterivEXT(uint32 texture, TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetTextureParameterivEXT(texture, target, pname, @params);

	private typealias glGetTextureLevelParameterfvEXT_t = function void(uint32 texture, TextureTarget target, int32 level, GetTextureParameter pname, float* @params);
	private static glGetTextureLevelParameterfvEXT_t p_glGetTextureLevelParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureLevelParameterfvEXT(uint32 texture, TextureTarget target, int32 level, GetTextureParameter pname, float* @params) => p_glGetTextureLevelParameterfvEXT(texture, target, level, pname, @params);

	private typealias glGetTextureLevelParameterivEXT_t = function void(uint32 texture, TextureTarget target, int32 level, GetTextureParameter pname, int32* @params);
	private static glGetTextureLevelParameterivEXT_t p_glGetTextureLevelParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureLevelParameterivEXT(uint32 texture, TextureTarget target, int32 level, GetTextureParameter pname, int32* @params) => p_glGetTextureLevelParameterivEXT(texture, target, level, pname, @params);

	private typealias glTextureImage3DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTextureImage3DEXT_t p_glTextureImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureImage3DEXT(uint32 texture, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);

	private typealias glTextureSubImage3DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels);
	private static glTextureSubImage3DEXT_t p_glTextureSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureSubImage3DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels) => p_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

	private typealias glCopyTextureSubImage3DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTextureSubImage3DEXT_t p_glCopyTextureSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTextureSubImage3DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);

	private typealias glBindMultiTextureEXT_t = function void(TextureUnit texunit, TextureTarget target, uint32 texture);
	private static glBindMultiTextureEXT_t p_glBindMultiTextureEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindMultiTextureEXT(TextureUnit texunit, TextureTarget target, uint32 texture) => p_glBindMultiTextureEXT(texunit, target, texture);

	private typealias glMultiTexCoordPointerEXT_t = function void(TextureUnit texunit, int32 size, TexCoordPointerType type, int32 stride, void* pointer);
	private static glMultiTexCoordPointerEXT_t p_glMultiTexCoordPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoordPointerEXT(TextureUnit texunit, int32 size, TexCoordPointerType type, int32 stride, void* pointer) => p_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);

	private typealias glMultiTexEnvfEXT_t = function void(TextureUnit texunit, uint32 target, uint32 pname, float param);
	private static glMultiTexEnvfEXT_t p_glMultiTexEnvfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexEnvfEXT(TextureUnit texunit, uint32 target, uint32 pname, float param) => p_glMultiTexEnvfEXT(texunit, target, pname, param);

	private typealias glMultiTexEnvfvEXT_t = function void(TextureUnit texunit, uint32 target, uint32 pname, float* @params);
	private static glMultiTexEnvfvEXT_t p_glMultiTexEnvfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexEnvfvEXT(TextureUnit texunit, uint32 target, uint32 pname, float* @params) => p_glMultiTexEnvfvEXT(texunit, target, pname, @params);

	private typealias glMultiTexEnviEXT_t = function void(TextureUnit texunit, uint32 target, uint32 pname, int32 param);
	private static glMultiTexEnviEXT_t p_glMultiTexEnviEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexEnviEXT(TextureUnit texunit, uint32 target, uint32 pname, int32 param) => p_glMultiTexEnviEXT(texunit, target, pname, param);

	private typealias glMultiTexEnvivEXT_t = function void(TextureUnit texunit, uint32 target, uint32 pname, int32* @params);
	private static glMultiTexEnvivEXT_t p_glMultiTexEnvivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexEnvivEXT(TextureUnit texunit, uint32 target, uint32 pname, int32* @params) => p_glMultiTexEnvivEXT(texunit, target, pname, @params);

	private typealias glMultiTexGendEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, double param);
	private static glMultiTexGendEXT_t p_glMultiTexGendEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexGendEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, double param) => p_glMultiTexGendEXT(texunit, coord, pname, param);

	private typealias glMultiTexGendvEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, double* @params);
	private static glMultiTexGendvEXT_t p_glMultiTexGendvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexGendvEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, double* @params) => p_glMultiTexGendvEXT(texunit, coord, pname, @params);

	private typealias glMultiTexGenfEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, float param);
	private static glMultiTexGenfEXT_t p_glMultiTexGenfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexGenfEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, float param) => p_glMultiTexGenfEXT(texunit, coord, pname, param);

	private typealias glMultiTexGenfvEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, float* @params);
	private static glMultiTexGenfvEXT_t p_glMultiTexGenfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexGenfvEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, float* @params) => p_glMultiTexGenfvEXT(texunit, coord, pname, @params);

	private typealias glMultiTexGeniEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, int32 param);
	private static glMultiTexGeniEXT_t p_glMultiTexGeniEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexGeniEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, int32 param) => p_glMultiTexGeniEXT(texunit, coord, pname, param);

	private typealias glMultiTexGenivEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, int32* @params);
	private static glMultiTexGenivEXT_t p_glMultiTexGenivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexGenivEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, int32* @params) => p_glMultiTexGenivEXT(texunit, coord, pname, @params);

	private typealias glGetMultiTexEnvfvEXT_t = function void(TextureUnit texunit, uint32 target, uint32 pname, float* @params);
	private static glGetMultiTexEnvfvEXT_t p_glGetMultiTexEnvfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexEnvfvEXT(TextureUnit texunit, uint32 target, uint32 pname, float* @params) => p_glGetMultiTexEnvfvEXT(texunit, target, pname, @params);

	private typealias glGetMultiTexEnvivEXT_t = function void(TextureUnit texunit, uint32 target, uint32 pname, int32* @params);
	private static glGetMultiTexEnvivEXT_t p_glGetMultiTexEnvivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexEnvivEXT(TextureUnit texunit, uint32 target, uint32 pname, int32* @params) => p_glGetMultiTexEnvivEXT(texunit, target, pname, @params);

	private typealias glGetMultiTexGendvEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, double* @params);
	private static glGetMultiTexGendvEXT_t p_glGetMultiTexGendvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexGendvEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, double* @params) => p_glGetMultiTexGendvEXT(texunit, coord, pname, @params);

	private typealias glGetMultiTexGenfvEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, float* @params);
	private static glGetMultiTexGenfvEXT_t p_glGetMultiTexGenfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexGenfvEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, float* @params) => p_glGetMultiTexGenfvEXT(texunit, coord, pname, @params);

	private typealias glGetMultiTexGenivEXT_t = function void(TextureUnit texunit, uint32 coord, TextureGenParameter pname, int32* @params);
	private static glGetMultiTexGenivEXT_t p_glGetMultiTexGenivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexGenivEXT(TextureUnit texunit, uint32 coord, TextureGenParameter pname, int32* @params) => p_glGetMultiTexGenivEXT(texunit, coord, pname, @params);

	private typealias glMultiTexParameteriEXT_t = function void(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int32 param);
	private static glMultiTexParameteriEXT_t p_glMultiTexParameteriEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexParameteriEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int32 param) => p_glMultiTexParameteriEXT(texunit, target, pname, param);

	private typealias glMultiTexParameterivEXT_t = function void(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int32* @params);
	private static glMultiTexParameterivEXT_t p_glMultiTexParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int32* @params) => p_glMultiTexParameterivEXT(texunit, target, pname, @params);

	private typealias glMultiTexParameterfEXT_t = function void(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param);
	private static glMultiTexParameterfEXT_t p_glMultiTexParameterfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexParameterfEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param) => p_glMultiTexParameterfEXT(texunit, target, pname, param);

	private typealias glMultiTexParameterfvEXT_t = function void(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float* @params);
	private static glMultiTexParameterfvEXT_t p_glMultiTexParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float* @params) => p_glMultiTexParameterfvEXT(texunit, target, pname, @params);

	private typealias glMultiTexImage1DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glMultiTexImage1DEXT_t p_glMultiTexImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);

	private typealias glMultiTexImage2DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glMultiTexImage2DEXT_t p_glMultiTexImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);

	private typealias glMultiTexSubImage1DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels);
	private static glMultiTexSubImage1DEXT_t p_glMultiTexSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels) => p_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);

	private typealias glMultiTexSubImage2DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels);
	private static glMultiTexSubImage2DEXT_t p_glMultiTexSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels) => p_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);

	private typealias glCopyMultiTexImage1DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border);
	private static glCopyMultiTexImage1DEXT_t p_glCopyMultiTexImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 border) => p_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);

	private typealias glCopyMultiTexImage2DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border);
	private static glCopyMultiTexImage2DEXT_t p_glCopyMultiTexImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 x, int32 y, int32 width, int32 height, int32 border) => p_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);

	private typealias glCopyMultiTexSubImage1DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width);
	private static glCopyMultiTexSubImage1DEXT_t p_glCopyMultiTexSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 x, int32 y, int32 width) => p_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);

	private typealias glCopyMultiTexSubImage2DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyMultiTexSubImage2DEXT_t p_glCopyMultiTexSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);

	private typealias glGetMultiTexImageEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, PixelFormat format, PixelType type, void* pixels);
	private static glGetMultiTexImageEXT_t p_glGetMultiTexImageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int32 level, PixelFormat format, PixelType type, void* pixels) => p_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);

	private typealias glGetMultiTexParameterfvEXT_t = function void(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, float* @params);
	private static glGetMultiTexParameterfvEXT_t p_glGetMultiTexParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, float* @params) => p_glGetMultiTexParameterfvEXT(texunit, target, pname, @params);

	private typealias glGetMultiTexParameterivEXT_t = function void(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetMultiTexParameterivEXT_t p_glGetMultiTexParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetMultiTexParameterivEXT(texunit, target, pname, @params);

	private typealias glGetMultiTexLevelParameterfvEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, GetTextureParameter pname, float* @params);
	private static glGetMultiTexLevelParameterfvEXT_t p_glGetMultiTexLevelParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int32 level, GetTextureParameter pname, float* @params) => p_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, @params);

	private typealias glGetMultiTexLevelParameterivEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, GetTextureParameter pname, int32* @params);
	private static glGetMultiTexLevelParameterivEXT_t p_glGetMultiTexLevelParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int32 level, GetTextureParameter pname, int32* @params) => p_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, @params);

	private typealias glMultiTexImage3DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glMultiTexImage3DEXT_t p_glMultiTexImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);

	private typealias glMultiTexSubImage3DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels);
	private static glMultiTexSubImage3DEXT_t p_glMultiTexSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels) => p_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

	private typealias glCopyMultiTexSubImage3DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyMultiTexSubImage3DEXT_t p_glCopyMultiTexSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCopyMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);

	private typealias glEnableClientStateIndexedEXT_t = function void(EnableCap array, uint32 index);
	private static glEnableClientStateIndexedEXT_t p_glEnableClientStateIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEnableClientStateIndexedEXT(EnableCap array, uint32 index) => p_glEnableClientStateIndexedEXT(array, index);

	private typealias glDisableClientStateIndexedEXT_t = function void(EnableCap array, uint32 index);
	private static glDisableClientStateIndexedEXT_t p_glDisableClientStateIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDisableClientStateIndexedEXT(EnableCap array, uint32 index) => p_glDisableClientStateIndexedEXT(array, index);

	private typealias glGetFloatIndexedvEXT_t = function void(TypeEnum target, uint32 index, float* data);
	private static glGetFloatIndexedvEXT_t p_glGetFloatIndexedvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetFloatIndexedvEXT(TypeEnum target, uint32 index, float* data) => p_glGetFloatIndexedvEXT(target, index, data);

	private typealias glGetDoubleIndexedvEXT_t = function void(TypeEnum target, uint32 index, double* data);
	private static glGetDoubleIndexedvEXT_t p_glGetDoubleIndexedvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetDoubleIndexedvEXT(TypeEnum target, uint32 index, double* data) => p_glGetDoubleIndexedvEXT(target, index, data);

	private typealias glGetPointerIndexedvEXT_t = function void(TypeEnum target, uint32 index, void** data);
	private static glGetPointerIndexedvEXT_t p_glGetPointerIndexedvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetPointerIndexedvEXT(TypeEnum target, uint32 index, void** data) => p_glGetPointerIndexedvEXT(target, index, data);

	private typealias glEnableIndexedEXT_t = function void(EnableCap target, uint32 index);
	private static glEnableIndexedEXT_t p_glEnableIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEnableIndexedEXT(EnableCap target, uint32 index) => p_glEnableIndexedEXT(target, index);

	private typealias glDisableIndexedEXT_t = function void(EnableCap target, uint32 index);
	private static glDisableIndexedEXT_t p_glDisableIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDisableIndexedEXT(EnableCap target, uint32 index) => p_glDisableIndexedEXT(target, index);

	private typealias glIsEnabledIndexedEXT_t = function bool(EnableCap target, uint32 index);
	private static glIsEnabledIndexedEXT_t p_glIsEnabledIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsEnabledIndexedEXT(EnableCap target, uint32 index) => p_glIsEnabledIndexedEXT(target, index);

	private typealias glGetIntegerIndexedvEXT_t = function void(uint32 target, uint32 index, int32* data);
	private static glGetIntegerIndexedvEXT_t p_glGetIntegerIndexedvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetIntegerIndexedvEXT(uint32 target, uint32 index, int32* data) => p_glGetIntegerIndexedvEXT(target, index, data);

	private typealias glGetBooleanIndexedvEXT_t = function void(BufferTargetARB target, uint32 index, bool* data);
	private static glGetBooleanIndexedvEXT_t p_glGetBooleanIndexedvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetBooleanIndexedvEXT(BufferTargetARB target, uint32 index, bool* data) => p_glGetBooleanIndexedvEXT(target, index, data);

	private typealias glCompressedTextureImage3DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* bits);
	private static glCompressedTextureImage3DEXT_t p_glCompressedTextureImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureImage3DEXT(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* bits) => p_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);

	private typealias glCompressedTextureImage2DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* bits);
	private static glCompressedTextureImage2DEXT_t p_glCompressedTextureImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureImage2DEXT(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* bits) => p_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);

	private typealias glCompressedTextureImage1DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* bits);
	private static glCompressedTextureImage1DEXT_t p_glCompressedTextureImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureImage1DEXT(uint32 texture, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* bits) => p_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);

	private typealias glCompressedTextureSubImage3DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* bits);
	private static glCompressedTextureSubImage3DEXT_t p_glCompressedTextureSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureSubImage3DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* bits) => p_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);

	private typealias glCompressedTextureSubImage2DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* bits);
	private static glCompressedTextureSubImage2DEXT_t p_glCompressedTextureSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureSubImage2DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* bits) => p_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);

	private typealias glCompressedTextureSubImage1DEXT_t = function void(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* bits);
	private static glCompressedTextureSubImage1DEXT_t p_glCompressedTextureSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTextureSubImage1DEXT(uint32 texture, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* bits) => p_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);

	private typealias glGetCompressedTextureImageEXT_t = function void(uint32 texture, TextureTarget target, int32 lod, void* img);
	private static glGetCompressedTextureImageEXT_t p_glGetCompressedTextureImageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetCompressedTextureImageEXT(uint32 texture, TextureTarget target, int32 lod, void* img) => p_glGetCompressedTextureImageEXT(texture, target, lod, img);

	private typealias glCompressedMultiTexImage3DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* bits);
	private static glCompressedMultiTexImage3DEXT_t p_glCompressedMultiTexImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* bits) => p_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);

	private typealias glCompressedMultiTexImage2DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* bits);
	private static glCompressedMultiTexImage2DEXT_t p_glCompressedMultiTexImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 border, int32 imageSize, void* bits) => p_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);

	private typealias glCompressedMultiTexImage1DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* bits);
	private static glCompressedMultiTexImage1DEXT_t p_glCompressedMultiTexImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 border, int32 imageSize, void* bits) => p_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);

	private typealias glCompressedMultiTexSubImage3DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* bits);
	private static glCompressedMultiTexSubImage3DEXT_t p_glCompressedMultiTexSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* bits) => p_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);

	private typealias glCompressedMultiTexSubImage2DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* bits);
	private static glCompressedMultiTexSubImage2DEXT_t p_glCompressedMultiTexSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, int32 imageSize, void* bits) => p_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);

	private typealias glCompressedMultiTexSubImage1DEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* bits);
	private static glCompressedMultiTexSubImage1DEXT_t p_glCompressedMultiTexSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, int32 imageSize, void* bits) => p_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);

	private typealias glGetCompressedMultiTexImageEXT_t = function void(TextureUnit texunit, TextureTarget target, int32 lod, void* img);
	private static glGetCompressedMultiTexImageEXT_t p_glGetCompressedMultiTexImageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int32 lod, void* img) => p_glGetCompressedMultiTexImageEXT(texunit, target, lod, img);

	private typealias glMatrixLoadTransposefEXT_t = function void(MatrixMode mode, float* m);
	private static glMatrixLoadTransposefEXT_t p_glMatrixLoadTransposefEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoadTransposefEXT(MatrixMode mode, float* m) => p_glMatrixLoadTransposefEXT(mode, m);

	private typealias glMatrixLoadTransposedEXT_t = function void(MatrixMode mode, double* m);
	private static glMatrixLoadTransposedEXT_t p_glMatrixLoadTransposedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoadTransposedEXT(MatrixMode mode, double* m) => p_glMatrixLoadTransposedEXT(mode, m);

	private typealias glMatrixMultTransposefEXT_t = function void(MatrixMode mode, float* m);
	private static glMatrixMultTransposefEXT_t p_glMatrixMultTransposefEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixMultTransposefEXT(MatrixMode mode, float* m) => p_glMatrixMultTransposefEXT(mode, m);

	private typealias glMatrixMultTransposedEXT_t = function void(MatrixMode mode, double* m);
	private static glMatrixMultTransposedEXT_t p_glMatrixMultTransposedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixMultTransposedEXT(MatrixMode mode, double* m) => p_glMatrixMultTransposedEXT(mode, m);

	private typealias glNamedBufferDataEXT_t = function void(uint32 buffer, int32 size, void* data, VertexBufferObjectUsage usage);
	private static glNamedBufferDataEXT_t p_glNamedBufferDataEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferDataEXT(uint32 buffer, int32 size, void* data, VertexBufferObjectUsage usage) => p_glNamedBufferDataEXT(buffer, size, data, usage);

	private typealias glNamedBufferSubDataEXT_t = function void(uint32 buffer, void* offset, int32 size, void* data);
	private static glNamedBufferSubDataEXT_t p_glNamedBufferSubDataEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferSubDataEXT(uint32 buffer, void* offset, int32 size, void* data) => p_glNamedBufferSubDataEXT(buffer, offset, size, data);

	private typealias glMapNamedBufferEXT_t = function void*(uint32 buffer, BufferAccessARB access);
	private static glMapNamedBufferEXT_t p_glMapNamedBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void* glMapNamedBufferEXT(uint32 buffer, BufferAccessARB access) => p_glMapNamedBufferEXT(buffer, access);

	private typealias glUnmapNamedBufferEXT_t = function bool(uint32 buffer);
	private static glUnmapNamedBufferEXT_t p_glUnmapNamedBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glUnmapNamedBufferEXT(uint32 buffer) => p_glUnmapNamedBufferEXT(buffer);

	private typealias glGetNamedBufferParameterivEXT_t = function void(uint32 buffer, VertexBufferObjectParameter pname, int32* @params);
	private static glGetNamedBufferParameterivEXT_t p_glGetNamedBufferParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferParameterivEXT(uint32 buffer, VertexBufferObjectParameter pname, int32* @params) => p_glGetNamedBufferParameterivEXT(buffer, pname, @params);

	private typealias glGetNamedBufferPointervEXT_t = function void(uint32 buffer, VertexBufferObjectParameter pname, void** @params);
	private static glGetNamedBufferPointervEXT_t p_glGetNamedBufferPointervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferPointervEXT(uint32 buffer, VertexBufferObjectParameter pname, void** @params) => p_glGetNamedBufferPointervEXT(buffer, pname, @params);

	private typealias glGetNamedBufferSubDataEXT_t = function void(uint32 buffer, void* offset, int32 size, void* data);
	private static glGetNamedBufferSubDataEXT_t p_glGetNamedBufferSubDataEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferSubDataEXT(uint32 buffer, void* offset, int32 size, void* data) => p_glGetNamedBufferSubDataEXT(buffer, offset, size, data);

	private typealias glProgramUniform1fEXT_t = function void(uint32 program, int32 location, float v0);
	private static glProgramUniform1fEXT_t p_glProgramUniform1fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1fEXT(uint32 program, int32 location, float v0) => p_glProgramUniform1fEXT(program, location, v0);

	private typealias glProgramUniform2fEXT_t = function void(uint32 program, int32 location, float v0, float v1);
	private static glProgramUniform2fEXT_t p_glProgramUniform2fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2fEXT(uint32 program, int32 location, float v0, float v1) => p_glProgramUniform2fEXT(program, location, v0, v1);

	private typealias glProgramUniform3fEXT_t = function void(uint32 program, int32 location, float v0, float v1, float v2);
	private static glProgramUniform3fEXT_t p_glProgramUniform3fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3fEXT(uint32 program, int32 location, float v0, float v1, float v2) => p_glProgramUniform3fEXT(program, location, v0, v1, v2);

	private typealias glProgramUniform4fEXT_t = function void(uint32 program, int32 location, float v0, float v1, float v2, float v3);
	private static glProgramUniform4fEXT_t p_glProgramUniform4fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4fEXT(uint32 program, int32 location, float v0, float v1, float v2, float v3) => p_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);

	private typealias glProgramUniform1iEXT_t = function void(uint32 program, int32 location, int32 v0);
	private static glProgramUniform1iEXT_t p_glProgramUniform1iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1iEXT(uint32 program, int32 location, int32 v0) => p_glProgramUniform1iEXT(program, location, v0);

	private typealias glProgramUniform2iEXT_t = function void(uint32 program, int32 location, int32 v0, int32 v1);
	private static glProgramUniform2iEXT_t p_glProgramUniform2iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2iEXT(uint32 program, int32 location, int32 v0, int32 v1) => p_glProgramUniform2iEXT(program, location, v0, v1);

	private typealias glProgramUniform3iEXT_t = function void(uint32 program, int32 location, int32 v0, int32 v1, int32 v2);
	private static glProgramUniform3iEXT_t p_glProgramUniform3iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3iEXT(uint32 program, int32 location, int32 v0, int32 v1, int32 v2) => p_glProgramUniform3iEXT(program, location, v0, v1, v2);

	private typealias glProgramUniform4iEXT_t = function void(uint32 program, int32 location, int32 v0, int32 v1, int32 v2, int32 v3);
	private static glProgramUniform4iEXT_t p_glProgramUniform4iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4iEXT(uint32 program, int32 location, int32 v0, int32 v1, int32 v2, int32 v3) => p_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);

	private typealias glProgramUniform1fvEXT_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform1fvEXT_t p_glProgramUniform1fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1fvEXT(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform1fvEXT(program, location, count, value);

	private typealias glProgramUniform2fvEXT_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform2fvEXT_t p_glProgramUniform2fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2fvEXT(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform2fvEXT(program, location, count, value);

	private typealias glProgramUniform3fvEXT_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform3fvEXT_t p_glProgramUniform3fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3fvEXT(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform3fvEXT(program, location, count, value);

	private typealias glProgramUniform4fvEXT_t = function void(uint32 program, int32 location, int32 count, float* value);
	private static glProgramUniform4fvEXT_t p_glProgramUniform4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4fvEXT(uint32 program, int32 location, int32 count, float* value) => p_glProgramUniform4fvEXT(program, location, count, value);

	private typealias glProgramUniform1ivEXT_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform1ivEXT_t p_glProgramUniform1ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1ivEXT(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform1ivEXT(program, location, count, value);

	private typealias glProgramUniform2ivEXT_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform2ivEXT_t p_glProgramUniform2ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2ivEXT(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform2ivEXT(program, location, count, value);

	private typealias glProgramUniform3ivEXT_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform3ivEXT_t p_glProgramUniform3ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3ivEXT(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform3ivEXT(program, location, count, value);

	private typealias glProgramUniform4ivEXT_t = function void(uint32 program, int32 location, int32 count, int32* value);
	private static glProgramUniform4ivEXT_t p_glProgramUniform4ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4ivEXT(uint32 program, int32 location, int32 count, int32* value) => p_glProgramUniform4ivEXT(program, location, count, value);

	private typealias glProgramUniformMatrix2fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix2fvEXT_t p_glProgramUniformMatrix2fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix3fvEXT_t p_glProgramUniformMatrix3fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix4fvEXT_t p_glProgramUniformMatrix4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x3fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix2x3fvEXT_t p_glProgramUniformMatrix2x3fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x3fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x2fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix3x2fvEXT_t p_glProgramUniformMatrix3x2fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x2fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x4fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix2x4fvEXT_t p_glProgramUniformMatrix2x4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x4fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x2fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix4x2fvEXT_t p_glProgramUniformMatrix4x2fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x2fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x4fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix3x4fvEXT_t p_glProgramUniformMatrix3x4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x4fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x3fvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, float* value);
	private static glProgramUniformMatrix4x3fvEXT_t p_glProgramUniformMatrix4x3fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x3fvEXT(uint32 program, int32 location, int32 count, bool transpose, float* value) => p_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);

	private typealias glTextureBufferEXT_t = function void(uint32 texture, TextureTarget target, InternalFormat internalformat, uint32 buffer);
	private static glTextureBufferEXT_t p_glTextureBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureBufferEXT(uint32 texture, TextureTarget target, InternalFormat internalformat, uint32 buffer) => p_glTextureBufferEXT(texture, target, internalformat, buffer);

	private typealias glMultiTexBufferEXT_t = function void(TextureUnit texunit, TextureTarget target, TypeEnum internalformat, uint32 buffer);
	private static glMultiTexBufferEXT_t p_glMultiTexBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexBufferEXT(TextureUnit texunit, TextureTarget target, TypeEnum internalformat, uint32 buffer) => p_glMultiTexBufferEXT(texunit, target, internalformat, buffer);

	private typealias glTextureParameterIivEXT_t = function void(uint32 texture, TextureTarget target, TextureParameterName pname, int32* @params);
	private static glTextureParameterIivEXT_t p_glTextureParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterIivEXT(uint32 texture, TextureTarget target, TextureParameterName pname, int32* @params) => p_glTextureParameterIivEXT(texture, target, pname, @params);

	private typealias glTextureParameterIuivEXT_t = function void(uint32 texture, TextureTarget target, TextureParameterName pname, uint32* @params);
	private static glTextureParameterIuivEXT_t p_glTextureParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureParameterIuivEXT(uint32 texture, TextureTarget target, TextureParameterName pname, uint32* @params) => p_glTextureParameterIuivEXT(texture, target, pname, @params);

	private typealias glGetTextureParameterIivEXT_t = function void(uint32 texture, TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetTextureParameterIivEXT_t p_glGetTextureParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameterIivEXT(uint32 texture, TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetTextureParameterIivEXT(texture, target, pname, @params);

	private typealias glGetTextureParameterIuivEXT_t = function void(uint32 texture, TextureTarget target, GetTextureParameter pname, uint32* @params);
	private static glGetTextureParameterIuivEXT_t p_glGetTextureParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTextureParameterIuivEXT(uint32 texture, TextureTarget target, GetTextureParameter pname, uint32* @params) => p_glGetTextureParameterIuivEXT(texture, target, pname, @params);

	private typealias glMultiTexParameterIivEXT_t = function void(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int32* @params);
	private static glMultiTexParameterIivEXT_t p_glMultiTexParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int32* @params) => p_glMultiTexParameterIivEXT(texunit, target, pname, @params);

	private typealias glMultiTexParameterIuivEXT_t = function void(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint32* @params);
	private static glMultiTexParameterIuivEXT_t p_glMultiTexParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint32* @params) => p_glMultiTexParameterIuivEXT(texunit, target, pname, @params);

	private typealias glGetMultiTexParameterIivEXT_t = function void(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetMultiTexParameterIivEXT_t p_glGetMultiTexParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetMultiTexParameterIivEXT(texunit, target, pname, @params);

	private typealias glGetMultiTexParameterIuivEXT_t = function void(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, uint32* @params);
	private static glGetMultiTexParameterIuivEXT_t p_glGetMultiTexParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, uint32* @params) => p_glGetMultiTexParameterIuivEXT(texunit, target, pname, @params);

	private typealias glProgramUniform1uiEXT_t = function void(uint32 program, int32 location, uint32 v0);
	private static glProgramUniform1uiEXT_t p_glProgramUniform1uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1uiEXT(uint32 program, int32 location, uint32 v0) => p_glProgramUniform1uiEXT(program, location, v0);

	private typealias glProgramUniform2uiEXT_t = function void(uint32 program, int32 location, uint32 v0, uint32 v1);
	private static glProgramUniform2uiEXT_t p_glProgramUniform2uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2uiEXT(uint32 program, int32 location, uint32 v0, uint32 v1) => p_glProgramUniform2uiEXT(program, location, v0, v1);

	private typealias glProgramUniform3uiEXT_t = function void(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2);
	private static glProgramUniform3uiEXT_t p_glProgramUniform3uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3uiEXT(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2) => p_glProgramUniform3uiEXT(program, location, v0, v1, v2);

	private typealias glProgramUniform4uiEXT_t = function void(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3);
	private static glProgramUniform4uiEXT_t p_glProgramUniform4uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4uiEXT(uint32 program, int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3) => p_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);

	private typealias glProgramUniform1uivEXT_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform1uivEXT_t p_glProgramUniform1uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1uivEXT(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform1uivEXT(program, location, count, value);

	private typealias glProgramUniform2uivEXT_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform2uivEXT_t p_glProgramUniform2uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2uivEXT(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform2uivEXT(program, location, count, value);

	private typealias glProgramUniform3uivEXT_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform3uivEXT_t p_glProgramUniform3uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3uivEXT(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform3uivEXT(program, location, count, value);

	private typealias glProgramUniform4uivEXT_t = function void(uint32 program, int32 location, int32 count, uint32* value);
	private static glProgramUniform4uivEXT_t p_glProgramUniform4uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4uivEXT(uint32 program, int32 location, int32 count, uint32* value) => p_glProgramUniform4uivEXT(program, location, count, value);

	private typealias glNamedProgramLocalParameters4fvEXT_t = function void(uint32 program, uint32 target, uint32 index, int32 count, float* @params);
	private static glNamedProgramLocalParameters4fvEXT_t p_glNamedProgramLocalParameters4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameters4fvEXT(uint32 program, uint32 target, uint32 index, int32 count, float* @params) => p_glNamedProgramLocalParameters4fvEXT(program, target, index, count, @params);

	private typealias glNamedProgramLocalParameterI4iEXT_t = function void(uint32 program, uint32 target, uint32 index, int32 x, int32 y, int32 z, int32 w);
	private static glNamedProgramLocalParameterI4iEXT_t p_glNamedProgramLocalParameterI4iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameterI4iEXT(uint32 program, uint32 target, uint32 index, int32 x, int32 y, int32 z, int32 w) => p_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);

	private typealias glNamedProgramLocalParameterI4ivEXT_t = function void(uint32 program, uint32 target, uint32 index, int32* @params);
	private static glNamedProgramLocalParameterI4ivEXT_t p_glNamedProgramLocalParameterI4ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameterI4ivEXT(uint32 program, uint32 target, uint32 index, int32* @params) => p_glNamedProgramLocalParameterI4ivEXT(program, target, index, @params);

	private typealias glNamedProgramLocalParametersI4ivEXT_t = function void(uint32 program, uint32 target, uint32 index, int32 count, int32* @params);
	private static glNamedProgramLocalParametersI4ivEXT_t p_glNamedProgramLocalParametersI4ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParametersI4ivEXT(uint32 program, uint32 target, uint32 index, int32 count, int32* @params) => p_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, @params);

	private typealias glNamedProgramLocalParameterI4uiEXT_t = function void(uint32 program, uint32 target, uint32 index, uint32 x, uint32 y, uint32 z, uint32 w);
	private static glNamedProgramLocalParameterI4uiEXT_t p_glNamedProgramLocalParameterI4uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameterI4uiEXT(uint32 program, uint32 target, uint32 index, uint32 x, uint32 y, uint32 z, uint32 w) => p_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);

	private typealias glNamedProgramLocalParameterI4uivEXT_t = function void(uint32 program, uint32 target, uint32 index, uint32* @params);
	private static glNamedProgramLocalParameterI4uivEXT_t p_glNamedProgramLocalParameterI4uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameterI4uivEXT(uint32 program, uint32 target, uint32 index, uint32* @params) => p_glNamedProgramLocalParameterI4uivEXT(program, target, index, @params);

	private typealias glNamedProgramLocalParametersI4uivEXT_t = function void(uint32 program, uint32 target, uint32 index, int32 count, uint32* @params);
	private static glNamedProgramLocalParametersI4uivEXT_t p_glNamedProgramLocalParametersI4uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParametersI4uivEXT(uint32 program, uint32 target, uint32 index, int32 count, uint32* @params) => p_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, @params);

	private typealias glGetNamedProgramLocalParameterIivEXT_t = function void(uint32 program, uint32 target, uint32 index, int32* @params);
	private static glGetNamedProgramLocalParameterIivEXT_t p_glGetNamedProgramLocalParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedProgramLocalParameterIivEXT(uint32 program, uint32 target, uint32 index, int32* @params) => p_glGetNamedProgramLocalParameterIivEXT(program, target, index, @params);

	private typealias glGetNamedProgramLocalParameterIuivEXT_t = function void(uint32 program, uint32 target, uint32 index, uint32* @params);
	private static glGetNamedProgramLocalParameterIuivEXT_t p_glGetNamedProgramLocalParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedProgramLocalParameterIuivEXT(uint32 program, uint32 target, uint32 index, uint32* @params) => p_glGetNamedProgramLocalParameterIuivEXT(program, target, index, @params);

	private typealias glEnableClientStateiEXT_t = function void(EnableCap array, uint32 index);
	private static glEnableClientStateiEXT_t p_glEnableClientStateiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEnableClientStateiEXT(EnableCap array, uint32 index) => p_glEnableClientStateiEXT(array, index);

	private typealias glDisableClientStateiEXT_t = function void(EnableCap array, uint32 index);
	private static glDisableClientStateiEXT_t p_glDisableClientStateiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDisableClientStateiEXT(EnableCap array, uint32 index) => p_glDisableClientStateiEXT(array, index);

	private typealias glGetFloati_vEXT_t = function void(TypeEnum pname, uint32 index, float* @params);
	private static glGetFloati_vEXT_t p_glGetFloati_vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetFloati_vEXT(TypeEnum pname, uint32 index, float* @params) => p_glGetFloati_vEXT(pname, index, @params);

	private typealias glGetDoublei_vEXT_t = function void(TypeEnum pname, uint32 index, double* @params);
	private static glGetDoublei_vEXT_t p_glGetDoublei_vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetDoublei_vEXT(TypeEnum pname, uint32 index, double* @params) => p_glGetDoublei_vEXT(pname, index, @params);

	private typealias glGetPointeri_vEXT_t = function void(TypeEnum pname, uint32 index, void** @params);
	private static glGetPointeri_vEXT_t p_glGetPointeri_vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetPointeri_vEXT(TypeEnum pname, uint32 index, void** @params) => p_glGetPointeri_vEXT(pname, index, @params);

	private typealias glNamedProgramStringEXT_t = function void(uint32 program, uint32 target, uint32 format, int32 len, void* @string);
	private static glNamedProgramStringEXT_t p_glNamedProgramStringEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramStringEXT(uint32 program, uint32 target, uint32 format, int32 len, void* @string) => p_glNamedProgramStringEXT(program, target, format, len, @string);

	private typealias glNamedProgramLocalParameter4dEXT_t = function void(uint32 program, uint32 target, uint32 index, double x, double y, double z, double w);
	private static glNamedProgramLocalParameter4dEXT_t p_glNamedProgramLocalParameter4dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameter4dEXT(uint32 program, uint32 target, uint32 index, double x, double y, double z, double w) => p_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);

	private typealias glNamedProgramLocalParameter4dvEXT_t = function void(uint32 program, uint32 target, uint32 index, double* @params);
	private static glNamedProgramLocalParameter4dvEXT_t p_glNamedProgramLocalParameter4dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameter4dvEXT(uint32 program, uint32 target, uint32 index, double* @params) => p_glNamedProgramLocalParameter4dvEXT(program, target, index, @params);

	private typealias glNamedProgramLocalParameter4fEXT_t = function void(uint32 program, uint32 target, uint32 index, float x, float y, float z, float w);
	private static glNamedProgramLocalParameter4fEXT_t p_glNamedProgramLocalParameter4fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameter4fEXT(uint32 program, uint32 target, uint32 index, float x, float y, float z, float w) => p_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);

	private typealias glNamedProgramLocalParameter4fvEXT_t = function void(uint32 program, uint32 target, uint32 index, float* @params);
	private static glNamedProgramLocalParameter4fvEXT_t p_glNamedProgramLocalParameter4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedProgramLocalParameter4fvEXT(uint32 program, uint32 target, uint32 index, float* @params) => p_glNamedProgramLocalParameter4fvEXT(program, target, index, @params);

	private typealias glGetNamedProgramLocalParameterdvEXT_t = function void(uint32 program, uint32 target, uint32 index, double* @params);
	private static glGetNamedProgramLocalParameterdvEXT_t p_glGetNamedProgramLocalParameterdvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedProgramLocalParameterdvEXT(uint32 program, uint32 target, uint32 index, double* @params) => p_glGetNamedProgramLocalParameterdvEXT(program, target, index, @params);

	private typealias glGetNamedProgramLocalParameterfvEXT_t = function void(uint32 program, uint32 target, uint32 index, float* @params);
	private static glGetNamedProgramLocalParameterfvEXT_t p_glGetNamedProgramLocalParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedProgramLocalParameterfvEXT(uint32 program, uint32 target, uint32 index, float* @params) => p_glGetNamedProgramLocalParameterfvEXT(program, target, index, @params);

	private typealias glGetNamedProgramivEXT_t = function void(uint32 program, uint32 target, ProgramPropertyARB pname, int32* @params);
	private static glGetNamedProgramivEXT_t p_glGetNamedProgramivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedProgramivEXT(uint32 program, uint32 target, ProgramPropertyARB pname, int32* @params) => p_glGetNamedProgramivEXT(program, target, pname, @params);

	private typealias glGetNamedProgramStringEXT_t = function void(uint32 program, uint32 target, uint32 pname, void* @string);
	private static glGetNamedProgramStringEXT_t p_glGetNamedProgramStringEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedProgramStringEXT(uint32 program, uint32 target, uint32 pname, void* @string) => p_glGetNamedProgramStringEXT(program, target, pname, @string);

	private typealias glNamedRenderbufferStorageEXT_t = function void(uint32 renderbuffer, InternalFormat internalformat, int32 width, int32 height);
	private static glNamedRenderbufferStorageEXT_t p_glNamedRenderbufferStorageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedRenderbufferStorageEXT(uint32 renderbuffer, InternalFormat internalformat, int32 width, int32 height) => p_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);

	private typealias glGetNamedRenderbufferParameterivEXT_t = function void(uint32 renderbuffer, RenderbufferParameterName pname, int32* @params);
	private static glGetNamedRenderbufferParameterivEXT_t p_glGetNamedRenderbufferParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedRenderbufferParameterivEXT(uint32 renderbuffer, RenderbufferParameterName pname, int32* @params) => p_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, @params);

	private typealias glNamedRenderbufferStorageMultisampleEXT_t = function void(uint32 renderbuffer, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glNamedRenderbufferStorageMultisampleEXT_t p_glNamedRenderbufferStorageMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedRenderbufferStorageMultisampleEXT(uint32 renderbuffer, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);

	private typealias glNamedRenderbufferStorageMultisampleCoverageEXT_t = function void(uint32 renderbuffer, int32 coverageSamples, int32 colorSamples, InternalFormat internalformat, int32 width, int32 height);
	private static glNamedRenderbufferStorageMultisampleCoverageEXT_t p_glNamedRenderbufferStorageMultisampleCoverageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedRenderbufferStorageMultisampleCoverageEXT(uint32 renderbuffer, int32 coverageSamples, int32 colorSamples, InternalFormat internalformat, int32 width, int32 height) => p_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);

	private typealias glCheckNamedFramebufferStatusEXT_t = function FramebufferStatus(uint32 framebuffer, FramebufferTarget target);
	private static glCheckNamedFramebufferStatusEXT_t p_glCheckNamedFramebufferStatusEXT;
	[CallingConvention(GL.CallConv)]
	public static FramebufferStatus glCheckNamedFramebufferStatusEXT(uint32 framebuffer, FramebufferTarget target) => p_glCheckNamedFramebufferStatusEXT(framebuffer, target);

	private typealias glNamedFramebufferTexture1DEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level);
	private static glNamedFramebufferTexture1DEXT_t p_glNamedFramebufferTexture1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTexture1DEXT(uint32 framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level) => p_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);

	private typealias glNamedFramebufferTexture2DEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level);
	private static glNamedFramebufferTexture2DEXT_t p_glNamedFramebufferTexture2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTexture2DEXT(uint32 framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level) => p_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);

	private typealias glNamedFramebufferTexture3DEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset);
	private static glNamedFramebufferTexture3DEXT_t p_glNamedFramebufferTexture3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTexture3DEXT(uint32 framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset) => p_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);

	private typealias glNamedFramebufferRenderbufferEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer);
	private static glNamedFramebufferRenderbufferEXT_t p_glNamedFramebufferRenderbufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferRenderbufferEXT(uint32 framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer) => p_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);

	private typealias glGetNamedFramebufferAttachmentParameterivEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params);
	private static glGetNamedFramebufferAttachmentParameterivEXT_t p_glGetNamedFramebufferAttachmentParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedFramebufferAttachmentParameterivEXT(uint32 framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params) => p_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, @params);

	private typealias glGenerateTextureMipmapEXT_t = function void(uint32 texture, TextureTarget target);
	private static glGenerateTextureMipmapEXT_t p_glGenerateTextureMipmapEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenerateTextureMipmapEXT(uint32 texture, TextureTarget target) => p_glGenerateTextureMipmapEXT(texture, target);

	private typealias glGenerateMultiTexMipmapEXT_t = function void(TextureUnit texunit, TextureTarget target);
	private static glGenerateMultiTexMipmapEXT_t p_glGenerateMultiTexMipmapEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenerateMultiTexMipmapEXT(TextureUnit texunit, TextureTarget target) => p_glGenerateMultiTexMipmapEXT(texunit, target);

	private typealias glFramebufferDrawBufferEXT_t = function void(uint32 framebuffer, DrawBufferMode mode);
	private static glFramebufferDrawBufferEXT_t p_glFramebufferDrawBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferDrawBufferEXT(uint32 framebuffer, DrawBufferMode mode) => p_glFramebufferDrawBufferEXT(framebuffer, mode);

	private typealias glFramebufferDrawBuffersEXT_t = function void(uint32 framebuffer, int32 n, uint32* bufs);
	private static glFramebufferDrawBuffersEXT_t p_glFramebufferDrawBuffersEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferDrawBuffersEXT(uint32 framebuffer, int32 n, uint32* bufs) => p_glFramebufferDrawBuffersEXT(framebuffer, n, bufs);

	private typealias glFramebufferReadBufferEXT_t = function void(uint32 framebuffer, ReadBufferMode mode);
	private static glFramebufferReadBufferEXT_t p_glFramebufferReadBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferReadBufferEXT(uint32 framebuffer, ReadBufferMode mode) => p_glFramebufferReadBufferEXT(framebuffer, mode);

	private typealias glGetFramebufferParameterivEXT_t = function void(uint32 framebuffer, GetFramebufferParameter pname, int32* @params);
	private static glGetFramebufferParameterivEXT_t p_glGetFramebufferParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetFramebufferParameterivEXT(uint32 framebuffer, GetFramebufferParameter pname, int32* @params) => p_glGetFramebufferParameterivEXT(framebuffer, pname, @params);

	private typealias glNamedCopyBufferSubDataEXT_t = function void(uint32 readBuffer, uint32 writeBuffer, void* readOffset, void* writeOffset, int32 size);
	private static glNamedCopyBufferSubDataEXT_t p_glNamedCopyBufferSubDataEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedCopyBufferSubDataEXT(uint32 readBuffer, uint32 writeBuffer, void* readOffset, void* writeOffset, int32 size) => p_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);

	private typealias glNamedFramebufferTextureEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level);
	private static glNamedFramebufferTextureEXT_t p_glNamedFramebufferTextureEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTextureEXT(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level) => p_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);

	private typealias glNamedFramebufferTextureLayerEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer);
	private static glNamedFramebufferTextureLayerEXT_t p_glNamedFramebufferTextureLayerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTextureLayerEXT(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer) => p_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);

	private typealias glNamedFramebufferTextureFaceEXT_t = function void(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level, TextureTarget face);
	private static glNamedFramebufferTextureFaceEXT_t p_glNamedFramebufferTextureFaceEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferTextureFaceEXT(uint32 framebuffer, FramebufferAttachment attachment, uint32 texture, int32 level, TextureTarget face) => p_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);

	private typealias glTextureRenderbufferEXT_t = function void(uint32 texture, TextureTarget target, uint32 renderbuffer);
	private static glTextureRenderbufferEXT_t p_glTextureRenderbufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureRenderbufferEXT(uint32 texture, TextureTarget target, uint32 renderbuffer) => p_glTextureRenderbufferEXT(texture, target, renderbuffer);

	private typealias glMultiTexRenderbufferEXT_t = function void(TextureUnit texunit, TextureTarget target, uint32 renderbuffer);
	private static glMultiTexRenderbufferEXT_t p_glMultiTexRenderbufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexRenderbufferEXT(TextureUnit texunit, TextureTarget target, uint32 renderbuffer) => p_glMultiTexRenderbufferEXT(texunit, target, renderbuffer);

	private typealias glVertexArrayVertexOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, int32 size, VertexPointerType type, int32 stride, void* offset);
	private static glVertexArrayVertexOffsetEXT_t p_glVertexArrayVertexOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexOffsetEXT(uint32 vaobj, uint32 buffer, int32 size, VertexPointerType type, int32 stride, void* offset) => p_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);

	private typealias glVertexArrayColorOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, int32 size, ColorPointerType type, int32 stride, void* offset);
	private static glVertexArrayColorOffsetEXT_t p_glVertexArrayColorOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayColorOffsetEXT(uint32 vaobj, uint32 buffer, int32 size, ColorPointerType type, int32 stride, void* offset) => p_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);

	private typealias glVertexArrayEdgeFlagOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, int32 stride, void* offset);
	private static glVertexArrayEdgeFlagOffsetEXT_t p_glVertexArrayEdgeFlagOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayEdgeFlagOffsetEXT(uint32 vaobj, uint32 buffer, int32 stride, void* offset) => p_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);

	private typealias glVertexArrayIndexOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, IndexPointerType type, int32 stride, void* offset);
	private static glVertexArrayIndexOffsetEXT_t p_glVertexArrayIndexOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayIndexOffsetEXT(uint32 vaobj, uint32 buffer, IndexPointerType type, int32 stride, void* offset) => p_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);

	private typealias glVertexArrayNormalOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, NormalPointerType type, int32 stride, void* offset);
	private static glVertexArrayNormalOffsetEXT_t p_glVertexArrayNormalOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayNormalOffsetEXT(uint32 vaobj, uint32 buffer, NormalPointerType type, int32 stride, void* offset) => p_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);

	private typealias glVertexArrayTexCoordOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, int32 size, TexCoordPointerType type, int32 stride, void* offset);
	private static glVertexArrayTexCoordOffsetEXT_t p_glVertexArrayTexCoordOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayTexCoordOffsetEXT(uint32 vaobj, uint32 buffer, int32 size, TexCoordPointerType type, int32 stride, void* offset) => p_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);

	private typealias glVertexArrayMultiTexCoordOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, uint32 texunit, int32 size, TexCoordPointerType type, int32 stride, void* offset);
	private static glVertexArrayMultiTexCoordOffsetEXT_t p_glVertexArrayMultiTexCoordOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayMultiTexCoordOffsetEXT(uint32 vaobj, uint32 buffer, uint32 texunit, int32 size, TexCoordPointerType type, int32 stride, void* offset) => p_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);

	private typealias glVertexArrayFogCoordOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, uint32 type, int32 stride, void* offset);
	private static glVertexArrayFogCoordOffsetEXT_t p_glVertexArrayFogCoordOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayFogCoordOffsetEXT(uint32 vaobj, uint32 buffer, uint32 type, int32 stride, void* offset) => p_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);

	private typealias glVertexArraySecondaryColorOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, int32 size, ColorPointerType type, int32 stride, void* offset);
	private static glVertexArraySecondaryColorOffsetEXT_t p_glVertexArraySecondaryColorOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArraySecondaryColorOffsetEXT(uint32 vaobj, uint32 buffer, int32 size, ColorPointerType type, int32 stride, void* offset) => p_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);

	private typealias glVertexArrayVertexAttribOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, void* offset);
	private static glVertexArrayVertexAttribOffsetEXT_t p_glVertexArrayVertexAttribOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribOffsetEXT(uint32 vaobj, uint32 buffer, uint32 index, int32 size, VertexAttribPointerType type, bool normalized, int32 stride, void* offset) => p_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);

	private typealias glVertexArrayVertexAttribIOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, uint32 index, int32 size, VertexAttribEnum type, int32 stride, void* offset);
	private static glVertexArrayVertexAttribIOffsetEXT_t p_glVertexArrayVertexAttribIOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribIOffsetEXT(uint32 vaobj, uint32 buffer, uint32 index, int32 size, VertexAttribEnum type, int32 stride, void* offset) => p_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);

	private typealias glEnableVertexArrayEXT_t = function void(uint32 vaobj, EnableCap array);
	private static glEnableVertexArrayEXT_t p_glEnableVertexArrayEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEnableVertexArrayEXT(uint32 vaobj, EnableCap array) => p_glEnableVertexArrayEXT(vaobj, array);

	private typealias glDisableVertexArrayEXT_t = function void(uint32 vaobj, EnableCap array);
	private static glDisableVertexArrayEXT_t p_glDisableVertexArrayEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDisableVertexArrayEXT(uint32 vaobj, EnableCap array) => p_glDisableVertexArrayEXT(vaobj, array);

	private typealias glEnableVertexArrayAttribEXT_t = function void(uint32 vaobj, uint32 index);
	private static glEnableVertexArrayAttribEXT_t p_glEnableVertexArrayAttribEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEnableVertexArrayAttribEXT(uint32 vaobj, uint32 index) => p_glEnableVertexArrayAttribEXT(vaobj, index);

	private typealias glDisableVertexArrayAttribEXT_t = function void(uint32 vaobj, uint32 index);
	private static glDisableVertexArrayAttribEXT_t p_glDisableVertexArrayAttribEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDisableVertexArrayAttribEXT(uint32 vaobj, uint32 index) => p_glDisableVertexArrayAttribEXT(vaobj, index);

	private typealias glGetVertexArrayIntegervEXT_t = function void(uint32 vaobj, VertexArrayPName pname, int32* param);
	private static glGetVertexArrayIntegervEXT_t p_glGetVertexArrayIntegervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexArrayIntegervEXT(uint32 vaobj, VertexArrayPName pname, int32* param) => p_glGetVertexArrayIntegervEXT(vaobj, pname, param);

	private typealias glGetVertexArrayPointervEXT_t = function void(uint32 vaobj, VertexArrayPName pname, void** param);
	private static glGetVertexArrayPointervEXT_t p_glGetVertexArrayPointervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexArrayPointervEXT(uint32 vaobj, VertexArrayPName pname, void** param) => p_glGetVertexArrayPointervEXT(vaobj, pname, param);

	private typealias glGetVertexArrayIntegeri_vEXT_t = function void(uint32 vaobj, uint32 index, VertexArrayPName pname, int32* param);
	private static glGetVertexArrayIntegeri_vEXT_t p_glGetVertexArrayIntegeri_vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexArrayIntegeri_vEXT(uint32 vaobj, uint32 index, VertexArrayPName pname, int32* param) => p_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);

	private typealias glGetVertexArrayPointeri_vEXT_t = function void(uint32 vaobj, uint32 index, VertexArrayPName pname, void** param);
	private static glGetVertexArrayPointeri_vEXT_t p_glGetVertexArrayPointeri_vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexArrayPointeri_vEXT(uint32 vaobj, uint32 index, VertexArrayPName pname, void** param) => p_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);

	private typealias glMapNamedBufferRangeEXT_t = function void*(uint32 buffer, void* offset, int32 length, uint32 access);
	private static glMapNamedBufferRangeEXT_t p_glMapNamedBufferRangeEXT;
	[CallingConvention(GL.CallConv)]
	public static void* glMapNamedBufferRangeEXT(uint32 buffer, void* offset, int32 length, uint32 access) => p_glMapNamedBufferRangeEXT(buffer, offset, length, access);

	private typealias glFlushMappedNamedBufferRangeEXT_t = function void(uint32 buffer, void* offset, int32 length);
	private static glFlushMappedNamedBufferRangeEXT_t p_glFlushMappedNamedBufferRangeEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFlushMappedNamedBufferRangeEXT(uint32 buffer, void* offset, int32 length) => p_glFlushMappedNamedBufferRangeEXT(buffer, offset, length);

	private typealias glNamedBufferStorageEXT_t = function void(uint32 buffer, int32 size, void* data, uint32 flags);
	private static glNamedBufferStorageEXT_t p_glNamedBufferStorageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferStorageEXT(uint32 buffer, int32 size, void* data, uint32 flags) => p_glNamedBufferStorageEXT(buffer, size, data, flags);

	private typealias glClearNamedBufferDataEXT_t = function void(uint32 buffer, InternalFormat internalformat, PixelFormat format, PixelType type, void* data);
	private static glClearNamedBufferDataEXT_t p_glClearNamedBufferDataEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedBufferDataEXT(uint32 buffer, InternalFormat internalformat, PixelFormat format, PixelType type, void* data) => p_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);

	private typealias glClearNamedBufferSubDataEXT_t = function void(uint32 buffer, uint32 internalformat, int32 offset, int32 size, PixelFormat format, PixelType type, void* data);
	private static glClearNamedBufferSubDataEXT_t p_glClearNamedBufferSubDataEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClearNamedBufferSubDataEXT(uint32 buffer, uint32 internalformat, int32 offset, int32 size, PixelFormat format, PixelType type, void* data) => p_glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);

	private typealias glNamedFramebufferParameteriEXT_t = function void(uint32 framebuffer, FramebufferParameterName pname, int32 param);
	private static glNamedFramebufferParameteriEXT_t p_glNamedFramebufferParameteriEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferParameteriEXT(uint32 framebuffer, FramebufferParameterName pname, int32 param) => p_glNamedFramebufferParameteriEXT(framebuffer, pname, param);

	private typealias glGetNamedFramebufferParameterivEXT_t = function void(uint32 framebuffer, GetFramebufferParameter pname, int32* @params);
	private static glGetNamedFramebufferParameterivEXT_t p_glGetNamedFramebufferParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedFramebufferParameterivEXT(uint32 framebuffer, GetFramebufferParameter pname, int32* @params) => p_glGetNamedFramebufferParameterivEXT(framebuffer, pname, @params);

	private typealias glProgramUniform1dEXT_t = function void(uint32 program, int32 location, double x);
	private static glProgramUniform1dEXT_t p_glProgramUniform1dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1dEXT(uint32 program, int32 location, double x) => p_glProgramUniform1dEXT(program, location, x);

	private typealias glProgramUniform2dEXT_t = function void(uint32 program, int32 location, double x, double y);
	private static glProgramUniform2dEXT_t p_glProgramUniform2dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2dEXT(uint32 program, int32 location, double x, double y) => p_glProgramUniform2dEXT(program, location, x, y);

	private typealias glProgramUniform3dEXT_t = function void(uint32 program, int32 location, double x, double y, double z);
	private static glProgramUniform3dEXT_t p_glProgramUniform3dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3dEXT(uint32 program, int32 location, double x, double y, double z) => p_glProgramUniform3dEXT(program, location, x, y, z);

	private typealias glProgramUniform4dEXT_t = function void(uint32 program, int32 location, double x, double y, double z, double w);
	private static glProgramUniform4dEXT_t p_glProgramUniform4dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4dEXT(uint32 program, int32 location, double x, double y, double z, double w) => p_glProgramUniform4dEXT(program, location, x, y, z, w);

	private typealias glProgramUniform1dvEXT_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform1dvEXT_t p_glProgramUniform1dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform1dvEXT(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform1dvEXT(program, location, count, value);

	private typealias glProgramUniform2dvEXT_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform2dvEXT_t p_glProgramUniform2dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform2dvEXT(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform2dvEXT(program, location, count, value);

	private typealias glProgramUniform3dvEXT_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform3dvEXT_t p_glProgramUniform3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform3dvEXT(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform3dvEXT(program, location, count, value);

	private typealias glProgramUniform4dvEXT_t = function void(uint32 program, int32 location, int32 count, double* value);
	private static glProgramUniform4dvEXT_t p_glProgramUniform4dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniform4dvEXT(uint32 program, int32 location, int32 count, double* value) => p_glProgramUniform4dvEXT(program, location, count, value);

	private typealias glProgramUniformMatrix2dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix2dvEXT_t p_glProgramUniformMatrix2dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix3dvEXT_t p_glProgramUniformMatrix3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix4dvEXT_t p_glProgramUniformMatrix4dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x3dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix2x3dvEXT_t p_glProgramUniformMatrix2x3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x3dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix2x4dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix2x4dvEXT_t p_glProgramUniformMatrix2x4dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix2x4dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x2dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix3x2dvEXT_t p_glProgramUniformMatrix3x2dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x2dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix3x4dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix3x4dvEXT_t p_glProgramUniformMatrix3x4dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix3x4dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x2dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix4x2dvEXT_t p_glProgramUniformMatrix4x2dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x2dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);

	private typealias glProgramUniformMatrix4x3dvEXT_t = function void(uint32 program, int32 location, int32 count, bool transpose, double* value);
	private static glProgramUniformMatrix4x3dvEXT_t p_glProgramUniformMatrix4x3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformMatrix4x3dvEXT(uint32 program, int32 location, int32 count, bool transpose, double* value) => p_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);

	private typealias glTextureBufferRangeEXT_t = function void(uint32 texture, TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size);
	private static glTextureBufferRangeEXT_t p_glTextureBufferRangeEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureBufferRangeEXT(uint32 texture, TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size) => p_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);

	private typealias glTextureStorage1DEXT_t = function void(uint32 texture, uint32 target, int32 levels, InternalFormat internalformat, int32 width);
	private static glTextureStorage1DEXT_t p_glTextureStorage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage1DEXT(uint32 texture, uint32 target, int32 levels, InternalFormat internalformat, int32 width) => p_glTextureStorage1DEXT(texture, target, levels, internalformat, width);

	private typealias glTextureStorage2DEXT_t = function void(uint32 texture, uint32 target, int32 levels, InternalFormat internalformat, int32 width, int32 height);
	private static glTextureStorage2DEXT_t p_glTextureStorage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage2DEXT(uint32 texture, uint32 target, int32 levels, InternalFormat internalformat, int32 width, int32 height) => p_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);

	private typealias glTextureStorage3DEXT_t = function void(uint32 texture, uint32 target, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth);
	private static glTextureStorage3DEXT_t p_glTextureStorage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage3DEXT(uint32 texture, uint32 target, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth) => p_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);

	private typealias glTextureStorage2DMultisampleEXT_t = function void(uint32 texture, TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations);
	private static glTextureStorage2DMultisampleEXT_t p_glTextureStorage2DMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage2DMultisampleEXT(uint32 texture, TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, bool fixedsamplelocations) => p_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);

	private typealias glTextureStorage3DMultisampleEXT_t = function void(uint32 texture, uint32 target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations);
	private static glTextureStorage3DMultisampleEXT_t p_glTextureStorage3DMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorage3DMultisampleEXT(uint32 texture, uint32 target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations) => p_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);

	private typealias glVertexArrayBindVertexBufferEXT_t = function void(uint32 vaobj, uint32 bindingindex, uint32 buffer, void* offset, int32 stride);
	private static glVertexArrayBindVertexBufferEXT_t p_glVertexArrayBindVertexBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayBindVertexBufferEXT(uint32 vaobj, uint32 bindingindex, uint32 buffer, void* offset, int32 stride) => p_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);

	private typealias glVertexArrayVertexAttribFormatEXT_t = function void(uint32 vaobj, uint32 attribindex, int32 size, uint32 type, bool normalized, uint32 relativeoffset);
	private static glVertexArrayVertexAttribFormatEXT_t p_glVertexArrayVertexAttribFormatEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribFormatEXT(uint32 vaobj, uint32 attribindex, int32 size, uint32 type, bool normalized, uint32 relativeoffset) => p_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);

	private typealias glVertexArrayVertexAttribIFormatEXT_t = function void(uint32 vaobj, uint32 attribindex, int32 size, uint32 type, uint32 relativeoffset);
	private static glVertexArrayVertexAttribIFormatEXT_t p_glVertexArrayVertexAttribIFormatEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribIFormatEXT(uint32 vaobj, uint32 attribindex, int32 size, uint32 type, uint32 relativeoffset) => p_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);

	private typealias glVertexArrayVertexAttribLFormatEXT_t = function void(uint32 vaobj, uint32 attribindex, int32 size, uint32 type, uint32 relativeoffset);
	private static glVertexArrayVertexAttribLFormatEXT_t p_glVertexArrayVertexAttribLFormatEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribLFormatEXT(uint32 vaobj, uint32 attribindex, int32 size, uint32 type, uint32 relativeoffset) => p_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);

	private typealias glVertexArrayVertexAttribBindingEXT_t = function void(uint32 vaobj, uint32 attribindex, uint32 bindingindex);
	private static glVertexArrayVertexAttribBindingEXT_t p_glVertexArrayVertexAttribBindingEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribBindingEXT(uint32 vaobj, uint32 attribindex, uint32 bindingindex) => p_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);

	private typealias glVertexArrayVertexBindingDivisorEXT_t = function void(uint32 vaobj, uint32 bindingindex, uint32 divisor);
	private static glVertexArrayVertexBindingDivisorEXT_t p_glVertexArrayVertexBindingDivisorEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexBindingDivisorEXT(uint32 vaobj, uint32 bindingindex, uint32 divisor) => p_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);

	private typealias glVertexArrayVertexAttribLOffsetEXT_t = function void(uint32 vaobj, uint32 buffer, uint32 index, int32 size, uint32 type, int32 stride, void* offset);
	private static glVertexArrayVertexAttribLOffsetEXT_t p_glVertexArrayVertexAttribLOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribLOffsetEXT(uint32 vaobj, uint32 buffer, uint32 index, int32 size, uint32 type, int32 stride, void* offset) => p_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);

	private typealias glTexturePageCommitmentEXT_t = function void(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, bool commit);
	private static glTexturePageCommitmentEXT_t p_glTexturePageCommitmentEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexturePageCommitmentEXT(uint32 texture, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, bool commit) => p_glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);

	private typealias glVertexArrayVertexAttribDivisorEXT_t = function void(uint32 vaobj, uint32 index, uint32 divisor);
	private static glVertexArrayVertexAttribDivisorEXT_t p_glVertexArrayVertexAttribDivisorEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayVertexAttribDivisorEXT(uint32 vaobj, uint32 index, uint32 divisor) => p_glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);

	private typealias glDiscardFramebufferEXT_t = function void(uint32 target, int32 numAttachments, uint32* attachments);
	private static glDiscardFramebufferEXT_t p_glDiscardFramebufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDiscardFramebufferEXT(uint32 target, int32 numAttachments, uint32* attachments) => p_glDiscardFramebufferEXT(target, numAttachments, attachments);

	private typealias glGenQueriesEXT_t = function void(int32 n, uint32* ids);
	private static glGenQueriesEXT_t p_glGenQueriesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenQueriesEXT(int32 n, uint32* ids) => p_glGenQueriesEXT(n, ids);

	private typealias glDeleteQueriesEXT_t = function void(int32 n, uint32* ids);
	private static glDeleteQueriesEXT_t p_glDeleteQueriesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteQueriesEXT(int32 n, uint32* ids) => p_glDeleteQueriesEXT(n, ids);

	private typealias glIsQueryEXT_t = function bool(uint32 id);
	private static glIsQueryEXT_t p_glIsQueryEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsQueryEXT(uint32 id) => p_glIsQueryEXT(id);

	private typealias glBeginQueryEXT_t = function void(QueryTarget target, uint32 id);
	private static glBeginQueryEXT_t p_glBeginQueryEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBeginQueryEXT(QueryTarget target, uint32 id) => p_glBeginQueryEXT(target, id);

	private typealias glEndQueryEXT_t = function void(QueryTarget target);
	private static glEndQueryEXT_t p_glEndQueryEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEndQueryEXT(QueryTarget target) => p_glEndQueryEXT(target);

	private typealias glQueryCounterEXT_t = function void(uint32 id, QueryCounterTarget target);
	private static glQueryCounterEXT_t p_glQueryCounterEXT;
	[CallingConvention(GL.CallConv)]
	public static void glQueryCounterEXT(uint32 id, QueryCounterTarget target) => p_glQueryCounterEXT(id, target);

	private typealias glGetQueryivEXT_t = function void(QueryTarget target, QueryParameterName pname, int32* @params);
	private static glGetQueryivEXT_t p_glGetQueryivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryivEXT(QueryTarget target, QueryParameterName pname, int32* @params) => p_glGetQueryivEXT(target, pname, @params);

	private typealias glGetQueryObjectivEXT_t = function void(uint32 id, QueryObjectParameterName pname, int32* @params);
	private static glGetQueryObjectivEXT_t p_glGetQueryObjectivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectivEXT(uint32 id, QueryObjectParameterName pname, int32* @params) => p_glGetQueryObjectivEXT(id, pname, @params);

	private typealias glGetQueryObjectuivEXT_t = function void(uint32 id, QueryObjectParameterName pname, uint32* @params);
	private static glGetQueryObjectuivEXT_t p_glGetQueryObjectuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectuivEXT(uint32 id, QueryObjectParameterName pname, uint32* @params) => p_glGetQueryObjectuivEXT(id, pname, @params);

	private typealias glGetQueryObjecti64vEXT_t = function void(uint32 id, QueryObjectParameterName pname, int64* @params);
	private static glGetQueryObjecti64vEXT_t p_glGetQueryObjecti64vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjecti64vEXT(uint32 id, QueryObjectParameterName pname, int64* @params) => p_glGetQueryObjecti64vEXT(id, pname, @params);

	private typealias glGetQueryObjectui64vEXT_t = function void(uint32 id, QueryObjectParameterName pname, uint64* @params);
	private static glGetQueryObjectui64vEXT_t p_glGetQueryObjectui64vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetQueryObjectui64vEXT(uint32 id, QueryObjectParameterName pname, uint64* @params) => p_glGetQueryObjectui64vEXT(id, pname, @params);

	private typealias glDrawBuffersEXT_t = function void(int32 n, uint32* bufs);
	private static glDrawBuffersEXT_t p_glDrawBuffersEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawBuffersEXT(int32 n, uint32* bufs) => p_glDrawBuffersEXT(n, bufs);

	private typealias glColorMaskIndexedEXT_t = function void(uint32 index, bool r, bool g, bool b, bool a);
	private static glColorMaskIndexedEXT_t p_glColorMaskIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glColorMaskIndexedEXT(uint32 index, bool r, bool g, bool b, bool a) => p_glColorMaskIndexedEXT(index, r, g, b, a);

	private typealias glEnableiEXT_t = function void(EnableCap target, uint32 index);
	private static glEnableiEXT_t p_glEnableiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEnableiEXT(EnableCap target, uint32 index) => p_glEnableiEXT(target, index);

	private typealias glDisableiEXT_t = function void(EnableCap target, uint32 index);
	private static glDisableiEXT_t p_glDisableiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDisableiEXT(EnableCap target, uint32 index) => p_glDisableiEXT(target, index);

	private typealias glBlendEquationiEXT_t = function void(uint32 buf, BlendEquationModeEXT mode);
	private static glBlendEquationiEXT_t p_glBlendEquationiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationiEXT(uint32 buf, BlendEquationModeEXT mode) => p_glBlendEquationiEXT(buf, mode);

	private typealias glBlendEquationSeparateiEXT_t = function void(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparateiEXT_t p_glBlendEquationSeparateiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparateiEXT(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha);

	private typealias glBlendFunciEXT_t = function void(uint32 buf, BlendingFactor src, BlendingFactor dst);
	private static glBlendFunciEXT_t p_glBlendFunciEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFunciEXT(uint32 buf, BlendingFactor src, BlendingFactor dst) => p_glBlendFunciEXT(buf, src, dst);

	private typealias glBlendFuncSeparateiEXT_t = function void(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
	private static glBlendFuncSeparateiEXT_t p_glBlendFuncSeparateiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparateiEXT(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) => p_glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

	private typealias glColorMaskiEXT_t = function void(uint32 index, bool r, bool g, bool b, bool a);
	private static glColorMaskiEXT_t p_glColorMaskiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glColorMaskiEXT(uint32 index, bool r, bool g, bool b, bool a) => p_glColorMaskiEXT(index, r, g, b, a);

	private typealias glIsEnablediEXT_t = function bool(EnableCap target, uint32 index);
	private static glIsEnablediEXT_t p_glIsEnablediEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsEnablediEXT(EnableCap target, uint32 index) => p_glIsEnablediEXT(target, index);

	private typealias glDrawElementsBaseVertexEXT_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 basevertex);
	private static glDrawElementsBaseVertexEXT_t p_glDrawElementsBaseVertexEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsBaseVertexEXT(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 basevertex) => p_glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);

	private typealias glDrawRangeElementsBaseVertexEXT_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices, int32 basevertex);
	private static glDrawRangeElementsBaseVertexEXT_t p_glDrawRangeElementsBaseVertexEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawRangeElementsBaseVertexEXT(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices, int32 basevertex) => p_glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);

	private typealias glDrawElementsInstancedBaseVertexEXT_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex);
	private static glDrawElementsInstancedBaseVertexEXT_t p_glDrawElementsInstancedBaseVertexEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedBaseVertexEXT(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex) => p_glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex);

	private typealias glMultiDrawElementsBaseVertexEXT_t = function void(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 primcount, int32* basevertex);
	private static glMultiDrawElementsBaseVertexEXT_t p_glMultiDrawElementsBaseVertexEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsBaseVertexEXT(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 primcount, int32* basevertex) => p_glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex);

	private typealias glDrawArraysInstancedEXT_t = function void(PrimitiveType mode, int32 start, int32 count, int32 primcount);
	private static glDrawArraysInstancedEXT_t p_glDrawArraysInstancedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysInstancedEXT(PrimitiveType mode, int32 start, int32 count, int32 primcount) => p_glDrawArraysInstancedEXT(mode, start, count, primcount);

	private typealias glDrawElementsInstancedEXT_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 primcount);
	private static glDrawElementsInstancedEXT_t p_glDrawElementsInstancedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedEXT(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 primcount) => p_glDrawElementsInstancedEXT(mode, count, type, indices, primcount);

	private typealias glDrawRangeElementsEXT_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices);
	private static glDrawRangeElementsEXT_t p_glDrawRangeElementsEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawRangeElementsEXT(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices) => p_glDrawRangeElementsEXT(mode, start, end, count, type, indices);

	private typealias glDrawTransformFeedbackEXT_t = function void(PrimitiveType mode, uint32 id);
	private static glDrawTransformFeedbackEXT_t p_glDrawTransformFeedbackEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTransformFeedbackEXT(PrimitiveType mode, uint32 id) => p_glDrawTransformFeedbackEXT(mode, id);

	private typealias glDrawTransformFeedbackInstancedEXT_t = function void(PrimitiveType mode, uint32 id, int32 instancecount);
	private static glDrawTransformFeedbackInstancedEXT_t p_glDrawTransformFeedbackInstancedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTransformFeedbackInstancedEXT(PrimitiveType mode, uint32 id, int32 instancecount) => p_glDrawTransformFeedbackInstancedEXT(mode, id, instancecount);

	private typealias glBufferStorageExternalEXT_t = function void(uint32 target, void* offset, int32 size, void* clientBuffer, uint32 flags);
	private static glBufferStorageExternalEXT_t p_glBufferStorageExternalEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBufferStorageExternalEXT(uint32 target, void* offset, int32 size, void* clientBuffer, uint32 flags) => p_glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);

	private typealias glNamedBufferStorageExternalEXT_t = function void(uint32 buffer, void* offset, int32 size, void* clientBuffer, uint32 flags);
	private static glNamedBufferStorageExternalEXT_t p_glNamedBufferStorageExternalEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferStorageExternalEXT(uint32 buffer, void* offset, int32 size, void* clientBuffer, uint32 flags) => p_glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);

	private typealias glFogCoordfEXT_t = function void(float coord);
	private static glFogCoordfEXT_t p_glFogCoordfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoordfEXT(float coord) => p_glFogCoordfEXT(coord);

	private typealias glFogCoordfvEXT_t = function void(float* coord);
	private static glFogCoordfvEXT_t p_glFogCoordfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoordfvEXT(float* coord) => p_glFogCoordfvEXT(coord);

	private typealias glFogCoorddEXT_t = function void(double coord);
	private static glFogCoorddEXT_t p_glFogCoorddEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoorddEXT(double coord) => p_glFogCoorddEXT(coord);

	private typealias glFogCoorddvEXT_t = function void(double* coord);
	private static glFogCoorddvEXT_t p_glFogCoorddvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoorddvEXT(double* coord) => p_glFogCoorddvEXT(coord);

	private typealias glFogCoordPointerEXT_t = function void(FogPointerTypeEXT type, int32 stride, void* pointer);
	private static glFogCoordPointerEXT_t p_glFogCoordPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoordPointerEXT(FogPointerTypeEXT type, int32 stride, void* pointer) => p_glFogCoordPointerEXT(type, stride, pointer);

	private typealias glBlitFramebufferEXT_t = function void(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter);
	private static glBlitFramebufferEXT_t p_glBlitFramebufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBlitFramebufferEXT(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter) => p_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

	private typealias glRenderbufferStorageMultisampleEXT_t = function void(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisampleEXT_t p_glRenderbufferStorageMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisampleEXT(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);

	private typealias glIsRenderbufferEXT_t = function bool(uint32 renderbuffer);
	private static glIsRenderbufferEXT_t p_glIsRenderbufferEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsRenderbufferEXT(uint32 renderbuffer) => p_glIsRenderbufferEXT(renderbuffer);

	private typealias glBindRenderbufferEXT_t = function void(RenderbufferTarget target, uint32 renderbuffer);
	private static glBindRenderbufferEXT_t p_glBindRenderbufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindRenderbufferEXT(RenderbufferTarget target, uint32 renderbuffer) => p_glBindRenderbufferEXT(target, renderbuffer);

	private typealias glDeleteRenderbuffersEXT_t = function void(int32 n, uint32* renderbuffers);
	private static glDeleteRenderbuffersEXT_t p_glDeleteRenderbuffersEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteRenderbuffersEXT(int32 n, uint32* renderbuffers) => p_glDeleteRenderbuffersEXT(n, renderbuffers);

	private typealias glGenRenderbuffersEXT_t = function void(int32 n, uint32* renderbuffers);
	private static glGenRenderbuffersEXT_t p_glGenRenderbuffersEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenRenderbuffersEXT(int32 n, uint32* renderbuffers) => p_glGenRenderbuffersEXT(n, renderbuffers);

	private typealias glRenderbufferStorageEXT_t = function void(RenderbufferTarget target, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageEXT_t p_glRenderbufferStorageEXT;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageEXT(RenderbufferTarget target, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageEXT(target, internalformat, width, height);

	private typealias glGetRenderbufferParameterivEXT_t = function void(RenderbufferTarget target, RenderbufferParameterName pname, int32* @params);
	private static glGetRenderbufferParameterivEXT_t p_glGetRenderbufferParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, int32* @params) => p_glGetRenderbufferParameterivEXT(target, pname, @params);

	private typealias glIsFramebufferEXT_t = function bool(uint32 framebuffer);
	private static glIsFramebufferEXT_t p_glIsFramebufferEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsFramebufferEXT(uint32 framebuffer) => p_glIsFramebufferEXT(framebuffer);

	private typealias glBindFramebufferEXT_t = function void(FramebufferTarget target, uint32 framebuffer);
	private static glBindFramebufferEXT_t p_glBindFramebufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindFramebufferEXT(FramebufferTarget target, uint32 framebuffer) => p_glBindFramebufferEXT(target, framebuffer);

	private typealias glDeleteFramebuffersEXT_t = function void(int32 n, uint32* framebuffers);
	private static glDeleteFramebuffersEXT_t p_glDeleteFramebuffersEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteFramebuffersEXT(int32 n, uint32* framebuffers) => p_glDeleteFramebuffersEXT(n, framebuffers);

	private typealias glGenFramebuffersEXT_t = function void(int32 n, uint32* framebuffers);
	private static glGenFramebuffersEXT_t p_glGenFramebuffersEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenFramebuffersEXT(int32 n, uint32* framebuffers) => p_glGenFramebuffersEXT(n, framebuffers);

	private typealias glCheckFramebufferStatusEXT_t = function FramebufferStatus(FramebufferTarget target);
	private static glCheckFramebufferStatusEXT_t p_glCheckFramebufferStatusEXT;
	[CallingConvention(GL.CallConv)]
	public static FramebufferStatus glCheckFramebufferStatusEXT(FramebufferTarget target) => p_glCheckFramebufferStatusEXT(target);

	private typealias glFramebufferTexture1DEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level);
	private static glFramebufferTexture1DEXT_t p_glFramebufferTexture1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture1DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level) => p_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);

	private typealias glFramebufferTexture2DEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level);
	private static glFramebufferTexture2DEXT_t p_glFramebufferTexture2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture2DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level) => p_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);

	private typealias glFramebufferTexture3DEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset);
	private static glFramebufferTexture3DEXT_t p_glFramebufferTexture3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture3DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset) => p_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);

	private typealias glFramebufferRenderbufferEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer);
	private static glFramebufferRenderbufferEXT_t p_glFramebufferRenderbufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferRenderbufferEXT(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer) => p_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);

	private typealias glGetFramebufferAttachmentParameterivEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params);
	private static glGetFramebufferAttachmentParameterivEXT_t p_glGetFramebufferAttachmentParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params) => p_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, @params);

	private typealias glGenerateMipmapEXT_t = function void(TextureTarget target);
	private static glGenerateMipmapEXT_t p_glGenerateMipmapEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenerateMipmapEXT(TextureTarget target) => p_glGenerateMipmapEXT(target);

	private typealias glFramebufferTextureEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level);
	private static glFramebufferTextureEXT_t p_glFramebufferTextureEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureEXT(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level) => p_glFramebufferTextureEXT(target, attachment, texture, level);

	private typealias glProgramParameteriEXT_t = function void(uint32 program, ProgramParameterPName pname, int32 value);
	private static glProgramParameteriEXT_t p_glProgramParameteriEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameteriEXT(uint32 program, ProgramParameterPName pname, int32 value) => p_glProgramParameteriEXT(program, pname, value);

	private typealias glProgramEnvParameters4fvEXT_t = function void(uint32 target, uint32 index, int32 count, float* @params);
	private static glProgramEnvParameters4fvEXT_t p_glProgramEnvParameters4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameters4fvEXT(uint32 target, uint32 index, int32 count, float* @params) => p_glProgramEnvParameters4fvEXT(target, index, count, @params);

	private typealias glProgramLocalParameters4fvEXT_t = function void(uint32 target, uint32 index, int32 count, float* @params);
	private static glProgramLocalParameters4fvEXT_t p_glProgramLocalParameters4fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameters4fvEXT(uint32 target, uint32 index, int32 count, float* @params) => p_glProgramLocalParameters4fvEXT(target, index, count, @params);

	private typealias glGetUniformuivEXT_t = function void(uint32 program, int32 location, uint32* @params);
	private static glGetUniformuivEXT_t p_glGetUniformuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetUniformuivEXT(uint32 program, int32 location, uint32* @params) => p_glGetUniformuivEXT(program, location, @params);

	private typealias glGetFragDataLocationEXT_t = function int32(uint32 program, char8* name);
	private static glGetFragDataLocationEXT_t p_glGetFragDataLocationEXT;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetFragDataLocationEXT(uint32 program, char8* name) => p_glGetFragDataLocationEXT(program, name);

	private typealias glUniform1uiEXT_t = function void(int32 location, uint32 v0);
	private static glUniform1uiEXT_t p_glUniform1uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1uiEXT(int32 location, uint32 v0) => p_glUniform1uiEXT(location, v0);

	private typealias glUniform2uiEXT_t = function void(int32 location, uint32 v0, uint32 v1);
	private static glUniform2uiEXT_t p_glUniform2uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2uiEXT(int32 location, uint32 v0, uint32 v1) => p_glUniform2uiEXT(location, v0, v1);

	private typealias glUniform3uiEXT_t = function void(int32 location, uint32 v0, uint32 v1, uint32 v2);
	private static glUniform3uiEXT_t p_glUniform3uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3uiEXT(int32 location, uint32 v0, uint32 v1, uint32 v2) => p_glUniform3uiEXT(location, v0, v1, v2);

	private typealias glUniform4uiEXT_t = function void(int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3);
	private static glUniform4uiEXT_t p_glUniform4uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4uiEXT(int32 location, uint32 v0, uint32 v1, uint32 v2, uint32 v3) => p_glUniform4uiEXT(location, v0, v1, v2, v3);

	private typealias glUniform1uivEXT_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform1uivEXT_t p_glUniform1uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform1uivEXT(int32 location, int32 count, uint32* value) => p_glUniform1uivEXT(location, count, value);

	private typealias glUniform2uivEXT_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform2uivEXT_t p_glUniform2uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform2uivEXT(int32 location, int32 count, uint32* value) => p_glUniform2uivEXT(location, count, value);

	private typealias glUniform3uivEXT_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform3uivEXT_t p_glUniform3uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform3uivEXT(int32 location, int32 count, uint32* value) => p_glUniform3uivEXT(location, count, value);

	private typealias glUniform4uivEXT_t = function void(int32 location, int32 count, uint32* value);
	private static glUniform4uivEXT_t p_glUniform4uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUniform4uivEXT(int32 location, int32 count, uint32* value) => p_glUniform4uivEXT(location, count, value);

	private typealias glGetHistogramEXT_t = function void(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values);
	private static glGetHistogramEXT_t p_glGetHistogramEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetHistogramEXT(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values) => p_glGetHistogramEXT(target, reset, format, type, values);

	private typealias glGetHistogramParameterfvEXT_t = function void(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float* @params);
	private static glGetHistogramParameterfvEXT_t p_glGetHistogramParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float* @params) => p_glGetHistogramParameterfvEXT(target, pname, @params);

	private typealias glGetHistogramParameterivEXT_t = function void(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int32* @params);
	private static glGetHistogramParameterivEXT_t p_glGetHistogramParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int32* @params) => p_glGetHistogramParameterivEXT(target, pname, @params);

	private typealias glGetMinmaxEXT_t = function void(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values);
	private static glGetMinmaxEXT_t p_glGetMinmaxEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMinmaxEXT(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, void* values) => p_glGetMinmaxEXT(target, reset, format, type, values);

	private typealias glGetMinmaxParameterfvEXT_t = function void(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float* @params);
	private static glGetMinmaxParameterfvEXT_t p_glGetMinmaxParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float* @params) => p_glGetMinmaxParameterfvEXT(target, pname, @params);

	private typealias glGetMinmaxParameterivEXT_t = function void(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int32* @params);
	private static glGetMinmaxParameterivEXT_t p_glGetMinmaxParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int32* @params) => p_glGetMinmaxParameterivEXT(target, pname, @params);

	private typealias glHistogramEXT_t = function void(HistogramTargetEXT target, int32 width, InternalFormat internalformat, bool sink);
	private static glHistogramEXT_t p_glHistogramEXT;
	[CallingConvention(GL.CallConv)]
	public static void glHistogramEXT(HistogramTargetEXT target, int32 width, InternalFormat internalformat, bool sink) => p_glHistogramEXT(target, width, internalformat, sink);

	private typealias glMinmaxEXT_t = function void(MinmaxTargetEXT target, InternalFormat internalformat, bool sink);
	private static glMinmaxEXT_t p_glMinmaxEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMinmaxEXT(MinmaxTargetEXT target, InternalFormat internalformat, bool sink) => p_glMinmaxEXT(target, internalformat, sink);

	private typealias glResetHistogramEXT_t = function void(HistogramTargetEXT target);
	private static glResetHistogramEXT_t p_glResetHistogramEXT;
	[CallingConvention(GL.CallConv)]
	public static void glResetHistogramEXT(HistogramTargetEXT target) => p_glResetHistogramEXT(target);

	private typealias glResetMinmaxEXT_t = function void(MinmaxTargetEXT target);
	private static glResetMinmaxEXT_t p_glResetMinmaxEXT;
	[CallingConvention(GL.CallConv)]
	public static void glResetMinmaxEXT(MinmaxTargetEXT target) => p_glResetMinmaxEXT(target);

	private typealias glIndexFuncEXT_t = function void(uint32 func, float @ref);
	private static glIndexFuncEXT_t p_glIndexFuncEXT;
	[CallingConvention(GL.CallConv)]
	public static void glIndexFuncEXT(uint32 func, float @ref) => p_glIndexFuncEXT(func, @ref);

	private typealias glIndexMaterialEXT_t = function void(MaterialFace face, uint32 mode);
	private static glIndexMaterialEXT_t p_glIndexMaterialEXT;
	[CallingConvention(GL.CallConv)]
	public static void glIndexMaterialEXT(MaterialFace face, uint32 mode) => p_glIndexMaterialEXT(face, mode);

	private typealias glVertexAttribDivisorEXT_t = function void(uint32 index, uint32 divisor);
	private static glVertexAttribDivisorEXT_t p_glVertexAttribDivisorEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribDivisorEXT(uint32 index, uint32 divisor) => p_glVertexAttribDivisorEXT(index, divisor);

	private typealias glApplyTextureEXT_t = function void(uint32 mode);
	private static glApplyTextureEXT_t p_glApplyTextureEXT;
	[CallingConvention(GL.CallConv)]
	public static void glApplyTextureEXT(uint32 mode) => p_glApplyTextureEXT(mode);

	private typealias glTextureLightEXT_t = function void(uint32 pname);
	private static glTextureLightEXT_t p_glTextureLightEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureLightEXT(uint32 pname) => p_glTextureLightEXT(pname);

	private typealias glTextureMaterialEXT_t = function void(MaterialFace face, uint32 mode);
	private static glTextureMaterialEXT_t p_glTextureMaterialEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureMaterialEXT(MaterialFace face, uint32 mode) => p_glTextureMaterialEXT(face, mode);

	private typealias glMapBufferRangeEXT_t = function void*(BufferTargetARB target, void* offset, int32 length, uint32 access);
	private static glMapBufferRangeEXT_t p_glMapBufferRangeEXT;
	[CallingConvention(GL.CallConv)]
	public static void* glMapBufferRangeEXT(BufferTargetARB target, void* offset, int32 length, uint32 access) => p_glMapBufferRangeEXT(target, offset, length, access);

	private typealias glFlushMappedBufferRangeEXT_t = function void(BufferTargetARB target, void* offset, int32 length);
	private static glFlushMappedBufferRangeEXT_t p_glFlushMappedBufferRangeEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFlushMappedBufferRangeEXT(BufferTargetARB target, void* offset, int32 length) => p_glFlushMappedBufferRangeEXT(target, offset, length);

	private typealias glGetUnsignedBytevEXT_t = function void(GetPName pname, uint8* data);
	private static glGetUnsignedBytevEXT_t p_glGetUnsignedBytevEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetUnsignedBytevEXT(GetPName pname, uint8* data) => p_glGetUnsignedBytevEXT(pname, data);

	private typealias glGetUnsignedBytei_vEXT_t = function void(uint32 target, uint32 index, uint8* data);
	private static glGetUnsignedBytei_vEXT_t p_glGetUnsignedBytei_vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetUnsignedBytei_vEXT(uint32 target, uint32 index, uint8* data) => p_glGetUnsignedBytei_vEXT(target, index, data);

	private typealias glDeleteMemoryObjectsEXT_t = function void(int32 n, uint32* memoryObjects);
	private static glDeleteMemoryObjectsEXT_t p_glDeleteMemoryObjectsEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteMemoryObjectsEXT(int32 n, uint32* memoryObjects) => p_glDeleteMemoryObjectsEXT(n, memoryObjects);

	private typealias glIsMemoryObjectEXT_t = function bool(uint32 memoryObject);
	private static glIsMemoryObjectEXT_t p_glIsMemoryObjectEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsMemoryObjectEXT(uint32 memoryObject) => p_glIsMemoryObjectEXT(memoryObject);

	private typealias glCreateMemoryObjectsEXT_t = function void(int32 n, uint32* memoryObjects);
	private static glCreateMemoryObjectsEXT_t p_glCreateMemoryObjectsEXT;
	[CallingConvention(GL.CallConv)]
	public static void glCreateMemoryObjectsEXT(int32 n, uint32* memoryObjects) => p_glCreateMemoryObjectsEXT(n, memoryObjects);

	private typealias glMemoryObjectParameterivEXT_t = function void(uint32 memoryObject, MemoryObjectParameterName pname, int32* @params);
	private static glMemoryObjectParameterivEXT_t p_glMemoryObjectParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMemoryObjectParameterivEXT(uint32 memoryObject, MemoryObjectParameterName pname, int32* @params) => p_glMemoryObjectParameterivEXT(memoryObject, pname, @params);

	private typealias glGetMemoryObjectParameterivEXT_t = function void(uint32 memoryObject, MemoryObjectParameterName pname, int32* @params);
	private static glGetMemoryObjectParameterivEXT_t p_glGetMemoryObjectParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetMemoryObjectParameterivEXT(uint32 memoryObject, MemoryObjectParameterName pname, int32* @params) => p_glGetMemoryObjectParameterivEXT(memoryObject, pname, @params);

	private typealias glTexStorageMem2DEXT_t = function void(TextureTarget target, int32 levels, uint32 internalFormat, int32 width, int32 height, uint32 memory, uint64 offset);
	private static glTexStorageMem2DEXT_t p_glTexStorageMem2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorageMem2DEXT(TextureTarget target, int32 levels, uint32 internalFormat, int32 width, int32 height, uint32 memory, uint64 offset) => p_glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);

	private typealias glTexStorageMem2DMultisampleEXT_t = function void(TextureTarget target, int32 samples, uint32 internalFormat, int32 width, int32 height, bool fixedSampleLocations, uint32 memory, uint64 offset);
	private static glTexStorageMem2DMultisampleEXT_t p_glTexStorageMem2DMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorageMem2DMultisampleEXT(TextureTarget target, int32 samples, uint32 internalFormat, int32 width, int32 height, bool fixedSampleLocations, uint32 memory, uint64 offset) => p_glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);

	private typealias glTexStorageMem3DEXT_t = function void(TextureTarget target, int32 levels, uint32 internalFormat, int32 width, int32 height, int32 depth, uint32 memory, uint64 offset);
	private static glTexStorageMem3DEXT_t p_glTexStorageMem3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorageMem3DEXT(TextureTarget target, int32 levels, uint32 internalFormat, int32 width, int32 height, int32 depth, uint32 memory, uint64 offset) => p_glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);

	private typealias glTexStorageMem3DMultisampleEXT_t = function void(TextureTarget target, int32 samples, uint32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations, uint32 memory, uint64 offset);
	private static glTexStorageMem3DMultisampleEXT_t p_glTexStorageMem3DMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorageMem3DMultisampleEXT(TextureTarget target, int32 samples, uint32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations, uint32 memory, uint64 offset) => p_glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);

	private typealias glBufferStorageMemEXT_t = function void(BufferTargetARB target, int32 size, uint32 memory, uint64 offset);
	private static glBufferStorageMemEXT_t p_glBufferStorageMemEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBufferStorageMemEXT(BufferTargetARB target, int32 size, uint32 memory, uint64 offset) => p_glBufferStorageMemEXT(target, size, memory, offset);

	private typealias glTextureStorageMem2DEXT_t = function void(uint32 texture, int32 levels, uint32 internalFormat, int32 width, int32 height, uint32 memory, uint64 offset);
	private static glTextureStorageMem2DEXT_t p_glTextureStorageMem2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorageMem2DEXT(uint32 texture, int32 levels, uint32 internalFormat, int32 width, int32 height, uint32 memory, uint64 offset) => p_glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);

	private typealias glTextureStorageMem2DMultisampleEXT_t = function void(uint32 texture, int32 samples, uint32 internalFormat, int32 width, int32 height, bool fixedSampleLocations, uint32 memory, uint64 offset);
	private static glTextureStorageMem2DMultisampleEXT_t p_glTextureStorageMem2DMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorageMem2DMultisampleEXT(uint32 texture, int32 samples, uint32 internalFormat, int32 width, int32 height, bool fixedSampleLocations, uint32 memory, uint64 offset) => p_glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);

	private typealias glTextureStorageMem3DEXT_t = function void(uint32 texture, int32 levels, uint32 internalFormat, int32 width, int32 height, int32 depth, uint32 memory, uint64 offset);
	private static glTextureStorageMem3DEXT_t p_glTextureStorageMem3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorageMem3DEXT(uint32 texture, int32 levels, uint32 internalFormat, int32 width, int32 height, int32 depth, uint32 memory, uint64 offset) => p_glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);

	private typealias glTextureStorageMem3DMultisampleEXT_t = function void(uint32 texture, int32 samples, uint32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations, uint32 memory, uint64 offset);
	private static glTextureStorageMem3DMultisampleEXT_t p_glTextureStorageMem3DMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorageMem3DMultisampleEXT(uint32 texture, int32 samples, uint32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations, uint32 memory, uint64 offset) => p_glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);

	private typealias glNamedBufferStorageMemEXT_t = function void(uint32 buffer, int32 size, uint32 memory, uint64 offset);
	private static glNamedBufferStorageMemEXT_t p_glNamedBufferStorageMemEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferStorageMemEXT(uint32 buffer, int32 size, uint32 memory, uint64 offset) => p_glNamedBufferStorageMemEXT(buffer, size, memory, offset);

	private typealias glTexStorageMem1DEXT_t = function void(TextureTarget target, int32 levels, uint32 internalFormat, int32 width, uint32 memory, uint64 offset);
	private static glTexStorageMem1DEXT_t p_glTexStorageMem1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorageMem1DEXT(TextureTarget target, int32 levels, uint32 internalFormat, int32 width, uint32 memory, uint64 offset) => p_glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);

	private typealias glTextureStorageMem1DEXT_t = function void(uint32 texture, int32 levels, uint32 internalFormat, int32 width, uint32 memory, uint64 offset);
	private static glTextureStorageMem1DEXT_t p_glTextureStorageMem1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureStorageMem1DEXT(uint32 texture, int32 levels, uint32 internalFormat, int32 width, uint32 memory, uint64 offset) => p_glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);

	private typealias glImportMemoryFdEXT_t = function void(uint32 memory, uint64 size, ExternalHandleType handleType, int32 fd);
	private static glImportMemoryFdEXT_t p_glImportMemoryFdEXT;
	[CallingConvention(GL.CallConv)]
	public static void glImportMemoryFdEXT(uint32 memory, uint64 size, ExternalHandleType handleType, int32 fd) => p_glImportMemoryFdEXT(memory, size, handleType, fd);

	private typealias glImportMemoryWin32HandleEXT_t = function void(uint32 memory, uint64 size, ExternalHandleType handleType, void* handle);
	private static glImportMemoryWin32HandleEXT_t p_glImportMemoryWin32HandleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glImportMemoryWin32HandleEXT(uint32 memory, uint64 size, ExternalHandleType handleType, void* handle) => p_glImportMemoryWin32HandleEXT(memory, size, handleType, handle);

	private typealias glImportMemoryWin32NameEXT_t = function void(uint32 memory, uint64 size, ExternalHandleType handleType, void* name);
	private static glImportMemoryWin32NameEXT_t p_glImportMemoryWin32NameEXT;
	[CallingConvention(GL.CallConv)]
	public static void glImportMemoryWin32NameEXT(uint32 memory, uint64 size, ExternalHandleType handleType, void* name) => p_glImportMemoryWin32NameEXT(memory, size, handleType, name);

	private typealias glMultiDrawArraysEXT_t = function void(PrimitiveType mode, int32* first, int32* count, int32 primcount);
	private static glMultiDrawArraysEXT_t p_glMultiDrawArraysEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysEXT(PrimitiveType mode, int32* first, int32* count, int32 primcount) => p_glMultiDrawArraysEXT(mode, first, count, primcount);

	private typealias glMultiDrawElementsEXT_t = function void(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 primcount);
	private static glMultiDrawElementsEXT_t p_glMultiDrawElementsEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsEXT(PrimitiveType mode, int32* count, DrawElementsType type, void* indices, int32 primcount) => p_glMultiDrawElementsEXT(mode, count, type, indices, primcount);

	private typealias glMultiDrawArraysIndirectEXT_t = function void(PrimitiveType mode, void* indirect, int32 drawcount, int32 stride);
	private static glMultiDrawArraysIndirectEXT_t p_glMultiDrawArraysIndirectEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysIndirectEXT(PrimitiveType mode, void* indirect, int32 drawcount, int32 stride) => p_glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride);

	private typealias glMultiDrawElementsIndirectEXT_t = function void(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawcount, int32 stride);
	private static glMultiDrawElementsIndirectEXT_t p_glMultiDrawElementsIndirectEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsIndirectEXT(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawcount, int32 stride) => p_glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride);

	private typealias glSampleMaskEXT_t = function void(float value, bool invert);
	private static glSampleMaskEXT_t p_glSampleMaskEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSampleMaskEXT(float value, bool invert) => p_glSampleMaskEXT(value, invert);

	private typealias glSamplePatternEXT_t = function void(uint32 pattern);
	private static glSamplePatternEXT_t p_glSamplePatternEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSamplePatternEXT(uint32 pattern) => p_glSamplePatternEXT(pattern);

	private typealias glFramebufferTexture2DMultisampleEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 samples);
	private static glFramebufferTexture2DMultisampleEXT_t p_glFramebufferTexture2DMultisampleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture2DMultisampleEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 samples) => p_glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);

	private typealias glReadBufferIndexedEXT_t = function void(ReadBufferMode src, int32 index);
	private static glReadBufferIndexedEXT_t p_glReadBufferIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glReadBufferIndexedEXT(ReadBufferMode src, int32 index) => p_glReadBufferIndexedEXT(src, index);

	private typealias glDrawBuffersIndexedEXT_t = function void(int32 n, uint32* location, int32* indices);
	private static glDrawBuffersIndexedEXT_t p_glDrawBuffersIndexedEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawBuffersIndexedEXT(int32 n, uint32* location, int32* indices) => p_glDrawBuffersIndexedEXT(n, location, indices);

	private typealias glGetIntegeri_vEXT_t = function void(TypeEnum target, uint32 index, int32* data);
	private static glGetIntegeri_vEXT_t p_glGetIntegeri_vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetIntegeri_vEXT(TypeEnum target, uint32 index, int32* data) => p_glGetIntegeri_vEXT(target, index, data);

	private typealias glColorTableEXT_t = function void(ColorTableTarget target, InternalFormat internalFormat, int32 width, PixelFormat format, PixelType type, void* table);
	private static glColorTableEXT_t p_glColorTableEXT;
	[CallingConvention(GL.CallConv)]
	public static void glColorTableEXT(ColorTableTarget target, InternalFormat internalFormat, int32 width, PixelFormat format, PixelType type, void* table) => p_glColorTableEXT(target, internalFormat, width, format, type, table);

	private typealias glGetColorTableEXT_t = function void(ColorTableTarget target, PixelFormat format, PixelType type, void* data);
	private static glGetColorTableEXT_t p_glGetColorTableEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, void* data) => p_glGetColorTableEXT(target, format, type, data);

	private typealias glGetColorTableParameterivEXT_t = function void(ColorTableTarget target, GetColorTableParameterPNameSGI pname, int32* @params);
	private static glGetColorTableParameterivEXT_t p_glGetColorTableParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableParameterivEXT(ColorTableTarget target, GetColorTableParameterPNameSGI pname, int32* @params) => p_glGetColorTableParameterivEXT(target, pname, @params);

	private typealias glGetColorTableParameterfvEXT_t = function void(ColorTableTarget target, GetColorTableParameterPNameSGI pname, float* @params);
	private static glGetColorTableParameterfvEXT_t p_glGetColorTableParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableParameterfvEXT(ColorTableTarget target, GetColorTableParameterPNameSGI pname, float* @params) => p_glGetColorTableParameterfvEXT(target, pname, @params);

	private typealias glPixelTransformParameteriEXT_t = function void(uint32 target, uint32 pname, int32 param);
	private static glPixelTransformParameteriEXT_t p_glPixelTransformParameteriEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTransformParameteriEXT(uint32 target, uint32 pname, int32 param) => p_glPixelTransformParameteriEXT(target, pname, param);

	private typealias glPixelTransformParameterfEXT_t = function void(uint32 target, uint32 pname, float param);
	private static glPixelTransformParameterfEXT_t p_glPixelTransformParameterfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTransformParameterfEXT(uint32 target, uint32 pname, float param) => p_glPixelTransformParameterfEXT(target, pname, param);

	private typealias glPixelTransformParameterivEXT_t = function void(uint32 target, uint32 pname, int32* @params);
	private static glPixelTransformParameterivEXT_t p_glPixelTransformParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTransformParameterivEXT(uint32 target, uint32 pname, int32* @params) => p_glPixelTransformParameterivEXT(target, pname, @params);

	private typealias glPixelTransformParameterfvEXT_t = function void(uint32 target, uint32 pname, float* @params);
	private static glPixelTransformParameterfvEXT_t p_glPixelTransformParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTransformParameterfvEXT(uint32 target, uint32 pname, float* @params) => p_glPixelTransformParameterfvEXT(target, pname, @params);

	private typealias glGetPixelTransformParameterivEXT_t = function void(TypeEnum target, uint32 pname, int32* @params);
	private static glGetPixelTransformParameterivEXT_t p_glGetPixelTransformParameterivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetPixelTransformParameterivEXT(TypeEnum target, uint32 pname, int32* @params) => p_glGetPixelTransformParameterivEXT(target, pname, @params);

	private typealias glGetPixelTransformParameterfvEXT_t = function void(TypeEnum target, uint32 pname, float* @params);
	private static glGetPixelTransformParameterfvEXT_t p_glGetPixelTransformParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetPixelTransformParameterfvEXT(TypeEnum target, uint32 pname, float* @params) => p_glGetPixelTransformParameterfvEXT(target, pname, @params);

	private typealias glPointParameterfEXT_t = function void(uint32 pname, float param);
	private static glPointParameterfEXT_t p_glPointParameterfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterfEXT(uint32 pname, float param) => p_glPointParameterfEXT(pname, param);

	private typealias glPointParameterfvEXT_t = function void(uint32 pname, float* @params);
	private static glPointParameterfvEXT_t p_glPointParameterfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterfvEXT(uint32 pname, float* @params) => p_glPointParameterfvEXT(pname, @params);

	private typealias glPolygonOffsetEXT_t = function void(float factor, float bias);
	private static glPolygonOffsetEXT_t p_glPolygonOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPolygonOffsetEXT(float factor, float bias) => p_glPolygonOffsetEXT(factor, bias);

	private typealias glPolygonOffsetClampEXT_t = function void(float factor, float units, float clamp);
	private static glPolygonOffsetClampEXT_t p_glPolygonOffsetClampEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPolygonOffsetClampEXT(float factor, float units, float clamp) => p_glPolygonOffsetClampEXT(factor, units, clamp);

	private typealias glPrimitiveBoundingBoxEXT_t = function void(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
	private static glPrimitiveBoundingBoxEXT_t p_glPrimitiveBoundingBoxEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) => p_glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

	private typealias glProvokingVertexEXT_t = function void(VertexProvokingMode mode);
	private static glProvokingVertexEXT_t p_glProvokingVertexEXT;
	[CallingConvention(GL.CallConv)]
	public static void glProvokingVertexEXT(VertexProvokingMode mode) => p_glProvokingVertexEXT(mode);

	private typealias glRasterSamplesEXT_t = function void(uint32 samples, bool fixedsamplelocations);
	private static glRasterSamplesEXT_t p_glRasterSamplesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glRasterSamplesEXT(uint32 samples, bool fixedsamplelocations) => p_glRasterSamplesEXT(samples, fixedsamplelocations);

	private typealias glGetGraphicsResetStatusEXT_t = function GraphicsResetStatus();
	private static glGetGraphicsResetStatusEXT_t p_glGetGraphicsResetStatusEXT;
	[CallingConvention(GL.CallConv)]
	public static GraphicsResetStatus glGetGraphicsResetStatusEXT() => p_glGetGraphicsResetStatusEXT();

	private typealias glReadnPixelsEXT_t = function void(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data);
	private static glReadnPixelsEXT_t p_glReadnPixelsEXT;
	[CallingConvention(GL.CallConv)]
	public static void glReadnPixelsEXT(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data) => p_glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);

	private typealias glGetnUniformfvEXT_t = function void(uint32 program, int32 location, int32 bufSize, float* @params);
	private static glGetnUniformfvEXT_t p_glGetnUniformfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformfvEXT(uint32 program, int32 location, int32 bufSize, float* @params) => p_glGetnUniformfvEXT(program, location, bufSize, @params);

	private typealias glGetnUniformivEXT_t = function void(uint32 program, int32 location, int32 bufSize, int32* @params);
	private static glGetnUniformivEXT_t p_glGetnUniformivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformivEXT(uint32 program, int32 location, int32 bufSize, int32* @params) => p_glGetnUniformivEXT(program, location, bufSize, @params);

	private typealias glGenSemaphoresEXT_t = function void(int32 n, uint32* semaphores);
	private static glGenSemaphoresEXT_t p_glGenSemaphoresEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenSemaphoresEXT(int32 n, uint32* semaphores) => p_glGenSemaphoresEXT(n, semaphores);

	private typealias glDeleteSemaphoresEXT_t = function void(int32 n, uint32* semaphores);
	private static glDeleteSemaphoresEXT_t p_glDeleteSemaphoresEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteSemaphoresEXT(int32 n, uint32* semaphores) => p_glDeleteSemaphoresEXT(n, semaphores);

	private typealias glIsSemaphoreEXT_t = function bool(uint32 semaphore);
	private static glIsSemaphoreEXT_t p_glIsSemaphoreEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsSemaphoreEXT(uint32 semaphore) => p_glIsSemaphoreEXT(semaphore);

	private typealias glSemaphoreParameterui64vEXT_t = function void(uint32 semaphore, SemaphoreParameterName pname, uint64* @params);
	private static glSemaphoreParameterui64vEXT_t p_glSemaphoreParameterui64vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSemaphoreParameterui64vEXT(uint32 semaphore, SemaphoreParameterName pname, uint64* @params) => p_glSemaphoreParameterui64vEXT(semaphore, pname, @params);

	private typealias glGetSemaphoreParameterui64vEXT_t = function void(uint32 semaphore, SemaphoreParameterName pname, uint64* @params);
	private static glGetSemaphoreParameterui64vEXT_t p_glGetSemaphoreParameterui64vEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetSemaphoreParameterui64vEXT(uint32 semaphore, SemaphoreParameterName pname, uint64* @params) => p_glGetSemaphoreParameterui64vEXT(semaphore, pname, @params);

	private typealias glWaitSemaphoreEXT_t = function void(uint32 semaphore, uint32 numBufferBarriers, uint32* buffers, uint32 numTextureBarriers, uint32* textures, uint32* srcLayouts);
	private static glWaitSemaphoreEXT_t p_glWaitSemaphoreEXT;
	[CallingConvention(GL.CallConv)]
	public static void glWaitSemaphoreEXT(uint32 semaphore, uint32 numBufferBarriers, uint32* buffers, uint32 numTextureBarriers, uint32* textures, uint32* srcLayouts) => p_glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);

	private typealias glSignalSemaphoreEXT_t = function void(uint32 semaphore, uint32 numBufferBarriers, uint32* buffers, uint32 numTextureBarriers, uint32* textures, uint32* dstLayouts);
	private static glSignalSemaphoreEXT_t p_glSignalSemaphoreEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSignalSemaphoreEXT(uint32 semaphore, uint32 numBufferBarriers, uint32* buffers, uint32 numTextureBarriers, uint32* textures, uint32* dstLayouts) => p_glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);

	private typealias glImportSemaphoreFdEXT_t = function void(uint32 semaphore, ExternalHandleType handleType, int32 fd);
	private static glImportSemaphoreFdEXT_t p_glImportSemaphoreFdEXT;
	[CallingConvention(GL.CallConv)]
	public static void glImportSemaphoreFdEXT(uint32 semaphore, ExternalHandleType handleType, int32 fd) => p_glImportSemaphoreFdEXT(semaphore, handleType, fd);

	private typealias glImportSemaphoreWin32HandleEXT_t = function void(uint32 semaphore, ExternalHandleType handleType, void* handle);
	private static glImportSemaphoreWin32HandleEXT_t p_glImportSemaphoreWin32HandleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glImportSemaphoreWin32HandleEXT(uint32 semaphore, ExternalHandleType handleType, void* handle) => p_glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);

	private typealias glImportSemaphoreWin32NameEXT_t = function void(uint32 semaphore, ExternalHandleType handleType, void* name);
	private static glImportSemaphoreWin32NameEXT_t p_glImportSemaphoreWin32NameEXT;
	[CallingConvention(GL.CallConv)]
	public static void glImportSemaphoreWin32NameEXT(uint32 semaphore, ExternalHandleType handleType, void* name) => p_glImportSemaphoreWin32NameEXT(semaphore, handleType, name);

	private typealias glSecondaryColor3bEXT_t = function void(int8 red, int8 green, int8 blue);
	private static glSecondaryColor3bEXT_t p_glSecondaryColor3bEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3bEXT(int8 red, int8 green, int8 blue) => p_glSecondaryColor3bEXT(red, green, blue);

	private typealias glSecondaryColor3bvEXT_t = function void(uint8* v);
	private static glSecondaryColor3bvEXT_t p_glSecondaryColor3bvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3bvEXT(uint8* v) => p_glSecondaryColor3bvEXT(v);

	private typealias glSecondaryColor3dEXT_t = function void(double red, double green, double blue);
	private static glSecondaryColor3dEXT_t p_glSecondaryColor3dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3dEXT(double red, double green, double blue) => p_glSecondaryColor3dEXT(red, green, blue);

	private typealias glSecondaryColor3dvEXT_t = function void(double* v);
	private static glSecondaryColor3dvEXT_t p_glSecondaryColor3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3dvEXT(double* v) => p_glSecondaryColor3dvEXT(v);

	private typealias glSecondaryColor3fEXT_t = function void(float red, float green, float blue);
	private static glSecondaryColor3fEXT_t p_glSecondaryColor3fEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3fEXT(float red, float green, float blue) => p_glSecondaryColor3fEXT(red, green, blue);

	private typealias glSecondaryColor3fvEXT_t = function void(float* v);
	private static glSecondaryColor3fvEXT_t p_glSecondaryColor3fvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3fvEXT(float* v) => p_glSecondaryColor3fvEXT(v);

	private typealias glSecondaryColor3iEXT_t = function void(int32 red, int32 green, int32 blue);
	private static glSecondaryColor3iEXT_t p_glSecondaryColor3iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3iEXT(int32 red, int32 green, int32 blue) => p_glSecondaryColor3iEXT(red, green, blue);

	private typealias glSecondaryColor3ivEXT_t = function void(int32* v);
	private static glSecondaryColor3ivEXT_t p_glSecondaryColor3ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3ivEXT(int32* v) => p_glSecondaryColor3ivEXT(v);

	private typealias glSecondaryColor3sEXT_t = function void(int16 red, int16 green, int16 blue);
	private static glSecondaryColor3sEXT_t p_glSecondaryColor3sEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3sEXT(int16 red, int16 green, int16 blue) => p_glSecondaryColor3sEXT(red, green, blue);

	private typealias glSecondaryColor3svEXT_t = function void(int16* v);
	private static glSecondaryColor3svEXT_t p_glSecondaryColor3svEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3svEXT(int16* v) => p_glSecondaryColor3svEXT(v);

	private typealias glSecondaryColor3ubEXT_t = function void(uint8 red, uint8 green, uint8 blue);
	private static glSecondaryColor3ubEXT_t p_glSecondaryColor3ubEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3ubEXT(uint8 red, uint8 green, uint8 blue) => p_glSecondaryColor3ubEXT(red, green, blue);

	private typealias glSecondaryColor3ubvEXT_t = function void(uint8* v);
	private static glSecondaryColor3ubvEXT_t p_glSecondaryColor3ubvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3ubvEXT(uint8* v) => p_glSecondaryColor3ubvEXT(v);

	private typealias glSecondaryColor3uiEXT_t = function void(uint32 red, uint32 green, uint32 blue);
	private static glSecondaryColor3uiEXT_t p_glSecondaryColor3uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3uiEXT(uint32 red, uint32 green, uint32 blue) => p_glSecondaryColor3uiEXT(red, green, blue);

	private typealias glSecondaryColor3uivEXT_t = function void(uint32* v);
	private static glSecondaryColor3uivEXT_t p_glSecondaryColor3uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3uivEXT(uint32* v) => p_glSecondaryColor3uivEXT(v);

	private typealias glSecondaryColor3usEXT_t = function void(uint16 red, uint16 green, uint16 blue);
	private static glSecondaryColor3usEXT_t p_glSecondaryColor3usEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3usEXT(uint16 red, uint16 green, uint16 blue) => p_glSecondaryColor3usEXT(red, green, blue);

	private typealias glSecondaryColor3usvEXT_t = function void(int16* v);
	private static glSecondaryColor3usvEXT_t p_glSecondaryColor3usvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3usvEXT(int16* v) => p_glSecondaryColor3usvEXT(v);

	private typealias glSecondaryColorPointerEXT_t = function void(int32 size, ColorPointerType type, int32 stride, void* pointer);
	private static glSecondaryColorPointerEXT_t p_glSecondaryColorPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColorPointerEXT(int32 size, ColorPointerType type, int32 stride, void* pointer) => p_glSecondaryColorPointerEXT(size, type, stride, pointer);

	private typealias glUseShaderProgramEXT_t = function void(uint32 type, uint32 program);
	private static glUseShaderProgramEXT_t p_glUseShaderProgramEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUseShaderProgramEXT(uint32 type, uint32 program) => p_glUseShaderProgramEXT(type, program);

	private typealias glActiveProgramEXT_t = function void(uint32 program);
	private static glActiveProgramEXT_t p_glActiveProgramEXT;
	[CallingConvention(GL.CallConv)]
	public static void glActiveProgramEXT(uint32 program) => p_glActiveProgramEXT(program);

	private typealias glCreateShaderProgramEXT_t = function uint32(ShaderType type, char8* @string);
	private static glCreateShaderProgramEXT_t p_glCreateShaderProgramEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glCreateShaderProgramEXT(ShaderType type, char8* @string) => p_glCreateShaderProgramEXT(type, @string);

	private typealias glActiveShaderProgramEXT_t = function void(uint32 pipeline, uint32 program);
	private static glActiveShaderProgramEXT_t p_glActiveShaderProgramEXT;
	[CallingConvention(GL.CallConv)]
	public static void glActiveShaderProgramEXT(uint32 pipeline, uint32 program) => p_glActiveShaderProgramEXT(pipeline, program);

	private typealias glBindProgramPipelineEXT_t = function void(uint32 pipeline);
	private static glBindProgramPipelineEXT_t p_glBindProgramPipelineEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindProgramPipelineEXT(uint32 pipeline) => p_glBindProgramPipelineEXT(pipeline);

	private typealias glCreateShaderProgramvEXT_t = function uint32(ShaderType type, int32 count, void* strings);
	private static glCreateShaderProgramvEXT_t p_glCreateShaderProgramvEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glCreateShaderProgramvEXT(ShaderType type, int32 count, void* strings) => p_glCreateShaderProgramvEXT(type, count, strings);

	private typealias glDeleteProgramPipelinesEXT_t = function void(int32 n, uint32* pipelines);
	private static glDeleteProgramPipelinesEXT_t p_glDeleteProgramPipelinesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteProgramPipelinesEXT(int32 n, uint32* pipelines) => p_glDeleteProgramPipelinesEXT(n, pipelines);

	private typealias glGenProgramPipelinesEXT_t = function void(int32 n, uint32* pipelines);
	private static glGenProgramPipelinesEXT_t p_glGenProgramPipelinesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenProgramPipelinesEXT(int32 n, uint32* pipelines) => p_glGenProgramPipelinesEXT(n, pipelines);

	private typealias glGetProgramPipelineInfoLogEXT_t = function void(uint32 pipeline, int32 bufSize, int32* length, char8* infoLog);
	private static glGetProgramPipelineInfoLogEXT_t p_glGetProgramPipelineInfoLogEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramPipelineInfoLogEXT(uint32 pipeline, int32 bufSize, int32* length, char8* infoLog) => p_glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog);

	private typealias glGetProgramPipelineivEXT_t = function void(uint32 pipeline, PipelineParameterName pname, int32* @params);
	private static glGetProgramPipelineivEXT_t p_glGetProgramPipelineivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramPipelineivEXT(uint32 pipeline, PipelineParameterName pname, int32* @params) => p_glGetProgramPipelineivEXT(pipeline, pname, @params);

	private typealias glIsProgramPipelineEXT_t = function bool(uint32 pipeline);
	private static glIsProgramPipelineEXT_t p_glIsProgramPipelineEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsProgramPipelineEXT(uint32 pipeline) => p_glIsProgramPipelineEXT(pipeline);

	private typealias glUseProgramStagesEXT_t = function void(uint32 pipeline, uint32 stages, uint32 program);
	private static glUseProgramStagesEXT_t p_glUseProgramStagesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glUseProgramStagesEXT(uint32 pipeline, uint32 stages, uint32 program) => p_glUseProgramStagesEXT(pipeline, stages, program);

	private typealias glValidateProgramPipelineEXT_t = function void(uint32 pipeline);
	private static glValidateProgramPipelineEXT_t p_glValidateProgramPipelineEXT;
	[CallingConvention(GL.CallConv)]
	public static void glValidateProgramPipelineEXT(uint32 pipeline) => p_glValidateProgramPipelineEXT(pipeline);

	private typealias glFramebufferFetchBarrierEXT_t = function void();
	private static glFramebufferFetchBarrierEXT_t p_glFramebufferFetchBarrierEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferFetchBarrierEXT() => p_glFramebufferFetchBarrierEXT();

	private typealias glBindImageTextureEXT_t = function void(uint32 index, uint32 texture, int32 level, bool layered, int32 layer, BufferAccessARB access, int32 format);
	private static glBindImageTextureEXT_t p_glBindImageTextureEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindImageTextureEXT(uint32 index, uint32 texture, int32 level, bool layered, int32 layer, BufferAccessARB access, int32 format) => p_glBindImageTextureEXT(index, texture, level, layered, layer, access, format);

	private typealias glMemoryBarrierEXT_t = function void(uint32 barriers);
	private static glMemoryBarrierEXT_t p_glMemoryBarrierEXT;
	[CallingConvention(GL.CallConv)]
	public static void glMemoryBarrierEXT(uint32 barriers) => p_glMemoryBarrierEXT(barriers);

	private typealias glFramebufferPixelLocalStorageSizeEXT_t = function void(uint32 target, int32 size);
	private static glFramebufferPixelLocalStorageSizeEXT_t p_glFramebufferPixelLocalStorageSizeEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferPixelLocalStorageSizeEXT(uint32 target, int32 size) => p_glFramebufferPixelLocalStorageSizeEXT(target, size);

	private typealias glGetFramebufferPixelLocalStorageSizeEXT_t = function int32(uint32 target);
	private static glGetFramebufferPixelLocalStorageSizeEXT_t p_glGetFramebufferPixelLocalStorageSizeEXT;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetFramebufferPixelLocalStorageSizeEXT(uint32 target) => p_glGetFramebufferPixelLocalStorageSizeEXT(target);

	private typealias glClearPixelLocalStorageuiEXT_t = function void(int32 offset, int32 n, uint32* values);
	private static glClearPixelLocalStorageuiEXT_t p_glClearPixelLocalStorageuiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClearPixelLocalStorageuiEXT(int32 offset, int32 n, uint32* values) => p_glClearPixelLocalStorageuiEXT(offset, n, values);

	private typealias glTexPageCommitmentEXT_t = function void(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, bool commit);
	private static glTexPageCommitmentEXT_t p_glTexPageCommitmentEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexPageCommitmentEXT(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, bool commit) => p_glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);

	private typealias glStencilClearTagEXT_t = function void(int32 stencilTagBits, uint32 stencilClearTag);
	private static glStencilClearTagEXT_t p_glStencilClearTagEXT;
	[CallingConvention(GL.CallConv)]
	public static void glStencilClearTagEXT(int32 stencilTagBits, uint32 stencilClearTag) => p_glStencilClearTagEXT(stencilTagBits, stencilClearTag);

	private typealias glActiveStencilFaceEXT_t = function void(StencilFaceDirection face);
	private static glActiveStencilFaceEXT_t p_glActiveStencilFaceEXT;
	[CallingConvention(GL.CallConv)]
	public static void glActiveStencilFaceEXT(StencilFaceDirection face) => p_glActiveStencilFaceEXT(face);

	private typealias glTexSubImage1DEXT_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage1DEXT_t p_glTexSubImage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage1DEXT(TextureTarget target, int32 level, int32 xoffset, int32 width, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);

	private typealias glTexSubImage2DEXT_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage2DEXT_t p_glTexSubImage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage2DEXT(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 width, int32 height, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);

	private typealias glPatchParameteriEXT_t = function void(PatchParameterName pname, int32 value);
	private static glPatchParameteriEXT_t p_glPatchParameteriEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPatchParameteriEXT(PatchParameterName pname, int32 value) => p_glPatchParameteriEXT(pname, value);

	private typealias glTexImage3DEXT_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTexImage3DEXT_t p_glTexImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage3DEXT(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);

	private typealias glTexSubImage3DEXT_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage3DEXT_t p_glTexSubImage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage3DEXT(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

	private typealias glFramebufferTextureLayerEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer);
	private static glFramebufferTextureLayerEXT_t p_glFramebufferTextureLayerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureLayerEXT(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer) => p_glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);

	private typealias glTexParameterIivEXT_t = function void(TextureTarget target, TextureParameterName pname, int32* @params);
	private static glTexParameterIivEXT_t p_glTexParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterIivEXT(TextureTarget target, TextureParameterName pname, int32* @params) => p_glTexParameterIivEXT(target, pname, @params);

	private typealias glTexParameterIuivEXT_t = function void(TextureTarget target, TextureParameterName pname, uint32* @params);
	private static glTexParameterIuivEXT_t p_glTexParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterIuivEXT(TextureTarget target, TextureParameterName pname, uint32* @params) => p_glTexParameterIuivEXT(target, pname, @params);

	private typealias glGetTexParameterIivEXT_t = function void(TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetTexParameterIivEXT_t p_glGetTexParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetTexParameterIivEXT(target, pname, @params);

	private typealias glGetTexParameterIuivEXT_t = function void(TextureTarget target, GetTextureParameter pname, uint32* @params);
	private static glGetTexParameterIuivEXT_t p_glGetTexParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, uint32* @params) => p_glGetTexParameterIuivEXT(target, pname, @params);

	private typealias glSamplerParameterIivEXT_t = function void(uint32 sampler, SamplerParameterName pname, int32* param);
	private static glSamplerParameterIivEXT_t p_glSamplerParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterIivEXT(uint32 sampler, SamplerParameterName pname, int32* param) => p_glSamplerParameterIivEXT(sampler, pname, param);

	private typealias glSamplerParameterIuivEXT_t = function void(uint32 sampler, SamplerParameterName pname, uint32* param);
	private static glSamplerParameterIuivEXT_t p_glSamplerParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterIuivEXT(uint32 sampler, SamplerParameterName pname, uint32* param) => p_glSamplerParameterIuivEXT(sampler, pname, param);

	private typealias glGetSamplerParameterIivEXT_t = function void(uint32 sampler, SamplerParameterName pname, int32* @params);
	private static glGetSamplerParameterIivEXT_t p_glGetSamplerParameterIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameterIivEXT(uint32 sampler, SamplerParameterName pname, int32* @params) => p_glGetSamplerParameterIivEXT(sampler, pname, @params);

	private typealias glGetSamplerParameterIuivEXT_t = function void(uint32 sampler, SamplerParameterName pname, uint32* @params);
	private static glGetSamplerParameterIuivEXT_t p_glGetSamplerParameterIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameterIuivEXT(uint32 sampler, SamplerParameterName pname, uint32* @params) => p_glGetSamplerParameterIuivEXT(sampler, pname, @params);

	private typealias glTexBufferEXT_t = function void(TextureTarget target, InternalFormat internalformat, uint32 buffer);
	private static glTexBufferEXT_t p_glTexBufferEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexBufferEXT(TextureTarget target, InternalFormat internalformat, uint32 buffer) => p_glTexBufferEXT(target, internalformat, buffer);

	private typealias glTexBufferRangeEXT_t = function void(TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size);
	private static glTexBufferRangeEXT_t p_glTexBufferRangeEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexBufferRangeEXT(TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size) => p_glTexBufferRangeEXT(target, internalformat, buffer, offset, size);

	private typealias glClearColorIiEXT_t = function void(int32 red, int32 green, int32 blue, int32 alpha);
	private static glClearColorIiEXT_t p_glClearColorIiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClearColorIiEXT(int32 red, int32 green, int32 blue, int32 alpha) => p_glClearColorIiEXT(red, green, blue, alpha);

	private typealias glClearColorIuiEXT_t = function void(uint32 red, uint32 green, uint32 blue, uint32 alpha);
	private static glClearColorIuiEXT_t p_glClearColorIuiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glClearColorIuiEXT(uint32 red, uint32 green, uint32 blue, uint32 alpha) => p_glClearColorIuiEXT(red, green, blue, alpha);

	private typealias glAreTexturesResidentEXT_t = function bool(int32 n, uint32* textures, bool* residences);
	private static glAreTexturesResidentEXT_t p_glAreTexturesResidentEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glAreTexturesResidentEXT(int32 n, uint32* textures, bool* residences) => p_glAreTexturesResidentEXT(n, textures, residences);

	private typealias glBindTextureEXT_t = function void(TextureTarget target, uint32 texture);
	private static glBindTextureEXT_t p_glBindTextureEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindTextureEXT(TextureTarget target, uint32 texture) => p_glBindTextureEXT(target, texture);

	private typealias glDeleteTexturesEXT_t = function void(int32 n, uint32* textures);
	private static glDeleteTexturesEXT_t p_glDeleteTexturesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteTexturesEXT(int32 n, uint32* textures) => p_glDeleteTexturesEXT(n, textures);

	private typealias glGenTexturesEXT_t = function void(int32 n, uint32* textures);
	private static glGenTexturesEXT_t p_glGenTexturesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGenTexturesEXT(int32 n, uint32* textures) => p_glGenTexturesEXT(n, textures);

	private typealias glIsTextureEXT_t = function bool(uint32 texture);
	private static glIsTextureEXT_t p_glIsTextureEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsTextureEXT(uint32 texture) => p_glIsTextureEXT(texture);

	private typealias glPrioritizeTexturesEXT_t = function void(int32 n, uint32* textures, void* priorities);
	private static glPrioritizeTexturesEXT_t p_glPrioritizeTexturesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glPrioritizeTexturesEXT(int32 n, uint32* textures, void* priorities) => p_glPrioritizeTexturesEXT(n, textures, priorities);

	private typealias glTextureNormalEXT_t = function void(uint32 mode);
	private static glTextureNormalEXT_t p_glTextureNormalEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureNormalEXT(uint32 mode) => p_glTextureNormalEXT(mode);

	private typealias glTexStorage1DEXT_t = function void(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width);
	private static glTexStorage1DEXT_t p_glTexStorage1DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage1DEXT(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width) => p_glTexStorage1DEXT(target, levels, internalformat, width);

	private typealias glTexStorage2DEXT_t = function void(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height);
	private static glTexStorage2DEXT_t p_glTexStorage2DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage2DEXT(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height) => p_glTexStorage2DEXT(target, levels, internalformat, width, height);

	private typealias glTexStorage3DEXT_t = function void(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth);
	private static glTexStorage3DEXT_t p_glTexStorage3DEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage3DEXT(TextureTarget target, int32 levels, InternalFormat internalformat, int32 width, int32 height, int32 depth) => p_glTexStorage3DEXT(target, levels, internalformat, width, height, depth);

	private typealias glTextureViewEXT_t = function void(uint32 texture, TextureTarget target, uint32 origtexture, InternalFormat internalformat, uint32 minlevel, uint32 numlevels, uint32 minlayer, uint32 numlayers);
	private static glTextureViewEXT_t p_glTextureViewEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTextureViewEXT(uint32 texture, TextureTarget target, uint32 origtexture, InternalFormat internalformat, uint32 minlevel, uint32 numlevels, uint32 minlayer, uint32 numlayers) => p_glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

	private typealias glBeginTransformFeedbackEXT_t = function void(PrimitiveType primitiveMode);
	private static glBeginTransformFeedbackEXT_t p_glBeginTransformFeedbackEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBeginTransformFeedbackEXT(PrimitiveType primitiveMode) => p_glBeginTransformFeedbackEXT(primitiveMode);

	private typealias glEndTransformFeedbackEXT_t = function void();
	private static glEndTransformFeedbackEXT_t p_glEndTransformFeedbackEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEndTransformFeedbackEXT() => p_glEndTransformFeedbackEXT();

	private typealias glBindBufferRangeEXT_t = function void(BufferTargetARB target, uint32 index, uint32 buffer, void* offset, int32 size);
	private static glBindBufferRangeEXT_t p_glBindBufferRangeEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferRangeEXT(BufferTargetARB target, uint32 index, uint32 buffer, void* offset, int32 size) => p_glBindBufferRangeEXT(target, index, buffer, offset, size);

	private typealias glBindBufferOffsetEXT_t = function void(BufferTargetARB target, uint32 index, uint32 buffer, void* offset);
	private static glBindBufferOffsetEXT_t p_glBindBufferOffsetEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferOffsetEXT(BufferTargetARB target, uint32 index, uint32 buffer, void* offset) => p_glBindBufferOffsetEXT(target, index, buffer, offset);

	private typealias glBindBufferBaseEXT_t = function void(BufferTargetARB target, uint32 index, uint32 buffer);
	private static glBindBufferBaseEXT_t p_glBindBufferBaseEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferBaseEXT(BufferTargetARB target, uint32 index, uint32 buffer) => p_glBindBufferBaseEXT(target, index, buffer);

	private typealias glTransformFeedbackVaryingsEXT_t = function void(uint32 program, int32 count, void* varyings, uint32 bufferMode);
	private static glTransformFeedbackVaryingsEXT_t p_glTransformFeedbackVaryingsEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTransformFeedbackVaryingsEXT(uint32 program, int32 count, void* varyings, uint32 bufferMode) => p_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);

	private typealias glGetTransformFeedbackVaryingEXT_t = function void(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name);
	private static glGetTransformFeedbackVaryingEXT_t p_glGetTransformFeedbackVaryingEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetTransformFeedbackVaryingEXT(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name) => p_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);

	private typealias glArrayElementEXT_t = function void(int32 i);
	private static glArrayElementEXT_t p_glArrayElementEXT;
	[CallingConvention(GL.CallConv)]
	public static void glArrayElementEXT(int32 i) => p_glArrayElementEXT(i);

	private typealias glColorPointerEXT_t = function void(int32 size, ColorPointerType type, int32 stride, int32 count, void* pointer);
	private static glColorPointerEXT_t p_glColorPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glColorPointerEXT(int32 size, ColorPointerType type, int32 stride, int32 count, void* pointer) => p_glColorPointerEXT(size, type, stride, count, pointer);

	private typealias glDrawArraysEXT_t = function void(PrimitiveType mode, int32 first, int32 count);
	private static glDrawArraysEXT_t p_glDrawArraysEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysEXT(PrimitiveType mode, int32 first, int32 count) => p_glDrawArraysEXT(mode, first, count);

	private typealias glEdgeFlagPointerEXT_t = function void(int32 stride, int32 count, bool* pointer);
	private static glEdgeFlagPointerEXT_t p_glEdgeFlagPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEdgeFlagPointerEXT(int32 stride, int32 count, bool* pointer) => p_glEdgeFlagPointerEXT(stride, count, pointer);

	private typealias glGetPointervEXT_t = function void(GetPointervPName pname, void** @params);
	private static glGetPointervEXT_t p_glGetPointervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetPointervEXT(GetPointervPName pname, void** @params) => p_glGetPointervEXT(pname, @params);

	private typealias glIndexPointerEXT_t = function void(IndexPointerType type, int32 stride, int32 count, void* pointer);
	private static glIndexPointerEXT_t p_glIndexPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glIndexPointerEXT(IndexPointerType type, int32 stride, int32 count, void* pointer) => p_glIndexPointerEXT(type, stride, count, pointer);

	private typealias glNormalPointerEXT_t = function void(NormalPointerType type, int32 stride, int32 count, void* pointer);
	private static glNormalPointerEXT_t p_glNormalPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glNormalPointerEXT(NormalPointerType type, int32 stride, int32 count, void* pointer) => p_glNormalPointerEXT(type, stride, count, pointer);

	private typealias glTexCoordPointerEXT_t = function void(int32 size, TexCoordPointerType type, int32 stride, int32 count, void* pointer);
	private static glTexCoordPointerEXT_t p_glTexCoordPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordPointerEXT(int32 size, TexCoordPointerType type, int32 stride, int32 count, void* pointer) => p_glTexCoordPointerEXT(size, type, stride, count, pointer);

	private typealias glVertexPointerEXT_t = function void(int32 size, VertexPointerType type, int32 stride, int32 count, void* pointer);
	private static glVertexPointerEXT_t p_glVertexPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexPointerEXT(int32 size, VertexPointerType type, int32 stride, int32 count, void* pointer) => p_glVertexPointerEXT(size, type, stride, count, pointer);

	private typealias glVertexAttribL1dEXT_t = function void(uint32 index, double x);
	private static glVertexAttribL1dEXT_t p_glVertexAttribL1dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1dEXT(uint32 index, double x) => p_glVertexAttribL1dEXT(index, x);

	private typealias glVertexAttribL2dEXT_t = function void(uint32 index, double x, double y);
	private static glVertexAttribL2dEXT_t p_glVertexAttribL2dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2dEXT(uint32 index, double x, double y) => p_glVertexAttribL2dEXT(index, x, y);

	private typealias glVertexAttribL3dEXT_t = function void(uint32 index, double x, double y, double z);
	private static glVertexAttribL3dEXT_t p_glVertexAttribL3dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3dEXT(uint32 index, double x, double y, double z) => p_glVertexAttribL3dEXT(index, x, y, z);

	private typealias glVertexAttribL4dEXT_t = function void(uint32 index, double x, double y, double z, double w);
	private static glVertexAttribL4dEXT_t p_glVertexAttribL4dEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4dEXT(uint32 index, double x, double y, double z, double w) => p_glVertexAttribL4dEXT(index, x, y, z, w);

	private typealias glVertexAttribL1dvEXT_t = function void(uint32 index, double* v);
	private static glVertexAttribL1dvEXT_t p_glVertexAttribL1dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1dvEXT(uint32 index, double* v) => p_glVertexAttribL1dvEXT(index, v);

	private typealias glVertexAttribL2dvEXT_t = function void(uint32 index, double* v);
	private static glVertexAttribL2dvEXT_t p_glVertexAttribL2dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2dvEXT(uint32 index, double* v) => p_glVertexAttribL2dvEXT(index, v);

	private typealias glVertexAttribL3dvEXT_t = function void(uint32 index, double* v);
	private static glVertexAttribL3dvEXT_t p_glVertexAttribL3dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3dvEXT(uint32 index, double* v) => p_glVertexAttribL3dvEXT(index, v);

	private typealias glVertexAttribL4dvEXT_t = function void(uint32 index, double* v);
	private static glVertexAttribL4dvEXT_t p_glVertexAttribL4dvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4dvEXT(uint32 index, double* v) => p_glVertexAttribL4dvEXT(index, v);

	private typealias glVertexAttribLPointerEXT_t = function void(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer);
	private static glVertexAttribLPointerEXT_t p_glVertexAttribLPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribLPointerEXT(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer) => p_glVertexAttribLPointerEXT(index, size, type, stride, pointer);

	private typealias glGetVertexAttribLdvEXT_t = function void(uint32 index, VertexAttribEnum pname, double* @params);
	private static glGetVertexAttribLdvEXT_t p_glGetVertexAttribLdvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribLdvEXT(uint32 index, VertexAttribEnum pname, double* @params) => p_glGetVertexAttribLdvEXT(index, pname, @params);

	private typealias glBeginVertexShaderEXT_t = function void();
	private static glBeginVertexShaderEXT_t p_glBeginVertexShaderEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBeginVertexShaderEXT() => p_glBeginVertexShaderEXT();

	private typealias glEndVertexShaderEXT_t = function void();
	private static glEndVertexShaderEXT_t p_glEndVertexShaderEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEndVertexShaderEXT() => p_glEndVertexShaderEXT();

	private typealias glBindVertexShaderEXT_t = function void(uint32 id);
	private static glBindVertexShaderEXT_t p_glBindVertexShaderEXT;
	[CallingConvention(GL.CallConv)]
	public static void glBindVertexShaderEXT(uint32 id) => p_glBindVertexShaderEXT(id);

	private typealias glGenVertexShadersEXT_t = function uint32(uint32 range);
	private static glGenVertexShadersEXT_t p_glGenVertexShadersEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGenVertexShadersEXT(uint32 range) => p_glGenVertexShadersEXT(range);

	private typealias glDeleteVertexShaderEXT_t = function void(uint32 id);
	private static glDeleteVertexShaderEXT_t p_glDeleteVertexShaderEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteVertexShaderEXT(uint32 id) => p_glDeleteVertexShaderEXT(id);

	private typealias glShaderOp1EXT_t = function void(uint32 op, uint32 res, uint32 arg1);
	private static glShaderOp1EXT_t p_glShaderOp1EXT;
	[CallingConvention(GL.CallConv)]
	public static void glShaderOp1EXT(uint32 op, uint32 res, uint32 arg1) => p_glShaderOp1EXT(op, res, arg1);

	private typealias glShaderOp2EXT_t = function void(uint32 op, uint32 res, uint32 arg1, uint32 arg2);
	private static glShaderOp2EXT_t p_glShaderOp2EXT;
	[CallingConvention(GL.CallConv)]
	public static void glShaderOp2EXT(uint32 op, uint32 res, uint32 arg1, uint32 arg2) => p_glShaderOp2EXT(op, res, arg1, arg2);

	private typealias glShaderOp3EXT_t = function void(uint32 op, uint32 res, uint32 arg1, uint32 arg2, uint32 arg3);
	private static glShaderOp3EXT_t p_glShaderOp3EXT;
	[CallingConvention(GL.CallConv)]
	public static void glShaderOp3EXT(uint32 op, uint32 res, uint32 arg1, uint32 arg2, uint32 arg3) => p_glShaderOp3EXT(op, res, arg1, arg2, arg3);

	private typealias glSwizzleEXT_t = function void(uint32 res, uint32 _in, uint32 outX, uint32 outY, uint32 outZ, uint32 outW);
	private static glSwizzleEXT_t p_glSwizzleEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSwizzleEXT(uint32 res, uint32 _in, uint32 outX, uint32 outY, uint32 outZ, uint32 outW) => p_glSwizzleEXT(res, _in, outX, outY, outZ, outW);

	private typealias glWriteMaskEXT_t = function void(uint32 res, uint32 _in, uint32 outX, uint32 outY, uint32 outZ, uint32 outW);
	private static glWriteMaskEXT_t p_glWriteMaskEXT;
	[CallingConvention(GL.CallConv)]
	public static void glWriteMaskEXT(uint32 res, uint32 _in, uint32 outX, uint32 outY, uint32 outZ, uint32 outW) => p_glWriteMaskEXT(res, _in, outX, outY, outZ, outW);

	private typealias glInsertComponentEXT_t = function void(uint32 res, uint32 src, uint32 num);
	private static glInsertComponentEXT_t p_glInsertComponentEXT;
	[CallingConvention(GL.CallConv)]
	public static void glInsertComponentEXT(uint32 res, uint32 src, uint32 num) => p_glInsertComponentEXT(res, src, num);

	private typealias glExtractComponentEXT_t = function void(uint32 res, uint32 src, uint32 num);
	private static glExtractComponentEXT_t p_glExtractComponentEXT;
	[CallingConvention(GL.CallConv)]
	public static void glExtractComponentEXT(uint32 res, uint32 src, uint32 num) => p_glExtractComponentEXT(res, src, num);

	private typealias glGenSymbolsEXT_t = function uint32(uint32 datatype, uint32 storagetype, uint32 range, uint32 components);
	private static glGenSymbolsEXT_t p_glGenSymbolsEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGenSymbolsEXT(uint32 datatype, uint32 storagetype, uint32 range, uint32 components) => p_glGenSymbolsEXT(datatype, storagetype, range, components);

	private typealias glSetInvariantEXT_t = function void(uint32 id, uint32 type, void* addr);
	private static glSetInvariantEXT_t p_glSetInvariantEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSetInvariantEXT(uint32 id, uint32 type, void* addr) => p_glSetInvariantEXT(id, type, addr);

	private typealias glSetLocalConstantEXT_t = function void(uint32 id, uint32 type, void* addr);
	private static glSetLocalConstantEXT_t p_glSetLocalConstantEXT;
	[CallingConvention(GL.CallConv)]
	public static void glSetLocalConstantEXT(uint32 id, uint32 type, void* addr) => p_glSetLocalConstantEXT(id, type, addr);

	private typealias glVariantbvEXT_t = function void(uint32 id, uint8* addr);
	private static glVariantbvEXT_t p_glVariantbvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantbvEXT(uint32 id, uint8* addr) => p_glVariantbvEXT(id, addr);

	private typealias glVariantsvEXT_t = function void(uint32 id, int16* addr);
	private static glVariantsvEXT_t p_glVariantsvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantsvEXT(uint32 id, int16* addr) => p_glVariantsvEXT(id, addr);

	private typealias glVariantivEXT_t = function void(uint32 id, int32* addr);
	private static glVariantivEXT_t p_glVariantivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantivEXT(uint32 id, int32* addr) => p_glVariantivEXT(id, addr);

	private typealias glVariantfvEXT_t = function void(uint32 id, float* addr);
	private static glVariantfvEXT_t p_glVariantfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantfvEXT(uint32 id, float* addr) => p_glVariantfvEXT(id, addr);

	private typealias glVariantdvEXT_t = function void(uint32 id, double* addr);
	private static glVariantdvEXT_t p_glVariantdvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantdvEXT(uint32 id, double* addr) => p_glVariantdvEXT(id, addr);

	private typealias glVariantubvEXT_t = function void(uint32 id, uint8* addr);
	private static glVariantubvEXT_t p_glVariantubvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantubvEXT(uint32 id, uint8* addr) => p_glVariantubvEXT(id, addr);

	private typealias glVariantusvEXT_t = function void(uint32 id, int16* addr);
	private static glVariantusvEXT_t p_glVariantusvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantusvEXT(uint32 id, int16* addr) => p_glVariantusvEXT(id, addr);

	private typealias glVariantuivEXT_t = function void(uint32 id, uint32* addr);
	private static glVariantuivEXT_t p_glVariantuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantuivEXT(uint32 id, uint32* addr) => p_glVariantuivEXT(id, addr);

	private typealias glVariantPointerEXT_t = function void(uint32 id, uint32 type, uint32 stride, void* addr);
	private static glVariantPointerEXT_t p_glVariantPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVariantPointerEXT(uint32 id, uint32 type, uint32 stride, void* addr) => p_glVariantPointerEXT(id, type, stride, addr);

	private typealias glEnableVariantClientStateEXT_t = function void(uint32 id);
	private static glEnableVariantClientStateEXT_t p_glEnableVariantClientStateEXT;
	[CallingConvention(GL.CallConv)]
	public static void glEnableVariantClientStateEXT(uint32 id) => p_glEnableVariantClientStateEXT(id);

	private typealias glDisableVariantClientStateEXT_t = function void(uint32 id);
	private static glDisableVariantClientStateEXT_t p_glDisableVariantClientStateEXT;
	[CallingConvention(GL.CallConv)]
	public static void glDisableVariantClientStateEXT(uint32 id) => p_glDisableVariantClientStateEXT(id);

	private typealias glBindLightParameterEXT_t = function uint32(LightName light, uint32 value);
	private static glBindLightParameterEXT_t p_glBindLightParameterEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glBindLightParameterEXT(LightName light, uint32 value) => p_glBindLightParameterEXT(light, value);

	private typealias glBindMaterialParameterEXT_t = function uint32(MaterialFace face, uint32 value);
	private static glBindMaterialParameterEXT_t p_glBindMaterialParameterEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glBindMaterialParameterEXT(MaterialFace face, uint32 value) => p_glBindMaterialParameterEXT(face, value);

	private typealias glBindTexGenParameterEXT_t = function uint32(TextureUnit unit, uint32 coord, TextureGenParameter value);
	private static glBindTexGenParameterEXT_t p_glBindTexGenParameterEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glBindTexGenParameterEXT(TextureUnit unit, uint32 coord, TextureGenParameter value) => p_glBindTexGenParameterEXT(unit, coord, value);

	private typealias glBindTextureUnitParameterEXT_t = function uint32(TextureUnit unit, uint32 value);
	private static glBindTextureUnitParameterEXT_t p_glBindTextureUnitParameterEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glBindTextureUnitParameterEXT(TextureUnit unit, uint32 value) => p_glBindTextureUnitParameterEXT(unit, value);

	private typealias glBindParameterEXT_t = function uint32(uint32 value);
	private static glBindParameterEXT_t p_glBindParameterEXT;
	[CallingConvention(GL.CallConv)]
	public static uint32 glBindParameterEXT(uint32 value) => p_glBindParameterEXT(value);

	private typealias glIsVariantEnabledEXT_t = function bool(uint32 id, uint32 cap);
	private static glIsVariantEnabledEXT_t p_glIsVariantEnabledEXT;
	[CallingConvention(GL.CallConv)]
	public static bool glIsVariantEnabledEXT(uint32 id, uint32 cap) => p_glIsVariantEnabledEXT(id, cap);

	private typealias glGetVariantBooleanvEXT_t = function void(uint32 id, uint32 value, bool* data);
	private static glGetVariantBooleanvEXT_t p_glGetVariantBooleanvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVariantBooleanvEXT(uint32 id, uint32 value, bool* data) => p_glGetVariantBooleanvEXT(id, value, data);

	private typealias glGetVariantIntegervEXT_t = function void(uint32 id, uint32 value, int32* data);
	private static glGetVariantIntegervEXT_t p_glGetVariantIntegervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVariantIntegervEXT(uint32 id, uint32 value, int32* data) => p_glGetVariantIntegervEXT(id, value, data);

	private typealias glGetVariantFloatvEXT_t = function void(uint32 id, uint32 value, float* data);
	private static glGetVariantFloatvEXT_t p_glGetVariantFloatvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVariantFloatvEXT(uint32 id, uint32 value, float* data) => p_glGetVariantFloatvEXT(id, value, data);

	private typealias glGetVariantPointervEXT_t = function void(uint32 id, uint32 value, void** data);
	private static glGetVariantPointervEXT_t p_glGetVariantPointervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVariantPointervEXT(uint32 id, uint32 value, void** data) => p_glGetVariantPointervEXT(id, value, data);

	private typealias glGetInvariantBooleanvEXT_t = function void(uint32 id, uint32 value, bool* data);
	private static glGetInvariantBooleanvEXT_t p_glGetInvariantBooleanvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetInvariantBooleanvEXT(uint32 id, uint32 value, bool* data) => p_glGetInvariantBooleanvEXT(id, value, data);

	private typealias glGetInvariantIntegervEXT_t = function void(uint32 id, uint32 value, int32* data);
	private static glGetInvariantIntegervEXT_t p_glGetInvariantIntegervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetInvariantIntegervEXT(uint32 id, uint32 value, int32* data) => p_glGetInvariantIntegervEXT(id, value, data);

	private typealias glGetInvariantFloatvEXT_t = function void(uint32 id, uint32 value, float* data);
	private static glGetInvariantFloatvEXT_t p_glGetInvariantFloatvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetInvariantFloatvEXT(uint32 id, uint32 value, float* data) => p_glGetInvariantFloatvEXT(id, value, data);

	private typealias glGetLocalConstantBooleanvEXT_t = function void(uint32 id, uint32 value, bool* data);
	private static glGetLocalConstantBooleanvEXT_t p_glGetLocalConstantBooleanvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetLocalConstantBooleanvEXT(uint32 id, uint32 value, bool* data) => p_glGetLocalConstantBooleanvEXT(id, value, data);

	private typealias glGetLocalConstantIntegervEXT_t = function void(uint32 id, uint32 value, int32* data);
	private static glGetLocalConstantIntegervEXT_t p_glGetLocalConstantIntegervEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetLocalConstantIntegervEXT(uint32 id, uint32 value, int32* data) => p_glGetLocalConstantIntegervEXT(id, value, data);

	private typealias glGetLocalConstantFloatvEXT_t = function void(uint32 id, uint32 value, float* data);
	private static glGetLocalConstantFloatvEXT_t p_glGetLocalConstantFloatvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetLocalConstantFloatvEXT(uint32 id, uint32 value, float* data) => p_glGetLocalConstantFloatvEXT(id, value, data);

	private typealias glVertexWeightfEXT_t = function void(float weight);
	private static glVertexWeightfEXT_t p_glVertexWeightfEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexWeightfEXT(float weight) => p_glVertexWeightfEXT(weight);

	private typealias glVertexWeightfvEXT_t = function void(float* weight);
	private static glVertexWeightfvEXT_t p_glVertexWeightfvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexWeightfvEXT(float* weight) => p_glVertexWeightfvEXT(weight);

	private typealias glVertexWeightPointerEXT_t = function void(int32 size, uint32 type, int32 stride, void* pointer);
	private static glVertexWeightPointerEXT_t p_glVertexWeightPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexWeightPointerEXT(int32 size, uint32 type, int32 stride, void* pointer) => p_glVertexWeightPointerEXT(size, type, stride, pointer);

	private typealias glAcquireKeyedMutexWin32EXT_t = function bool(uint32 memory, uint64 key, uint32 timeout);
	private static glAcquireKeyedMutexWin32EXT_t p_glAcquireKeyedMutexWin32EXT;
	[CallingConvention(GL.CallConv)]
	public static bool glAcquireKeyedMutexWin32EXT(uint32 memory, uint64 key, uint32 timeout) => p_glAcquireKeyedMutexWin32EXT(memory, key, timeout);

	private typealias glReleaseKeyedMutexWin32EXT_t = function bool(uint32 memory, uint64 key);
	private static glReleaseKeyedMutexWin32EXT_t p_glReleaseKeyedMutexWin32EXT;
	[CallingConvention(GL.CallConv)]
	public static bool glReleaseKeyedMutexWin32EXT(uint32 memory, uint64 key) => p_glReleaseKeyedMutexWin32EXT(memory, key);

	private typealias glWindowRectanglesEXT_t = function void(uint32 mode, int32 count, int32* @box);
	private static glWindowRectanglesEXT_t p_glWindowRectanglesEXT;
	[CallingConvention(GL.CallConv)]
	public static void glWindowRectanglesEXT(uint32 mode, int32 count, int32* @box) => p_glWindowRectanglesEXT(mode, count, @box);

	private typealias glImportSyncEXT_t = function void*(uint32 external_sync_type, void* external_sync, uint32 flags);
	private static glImportSyncEXT_t p_glImportSyncEXT;
	[CallingConvention(GL.CallConv)]
	public static void* glImportSyncEXT(uint32 external_sync_type, void* external_sync, uint32 flags) => p_glImportSyncEXT(external_sync_type, external_sync, flags);

	private typealias glFrameTerminatorGREMEDY_t = function void();
	private static glFrameTerminatorGREMEDY_t p_glFrameTerminatorGREMEDY;
	[CallingConvention(GL.CallConv)]
	public static void glFrameTerminatorGREMEDY() => p_glFrameTerminatorGREMEDY();

	private typealias glStringMarkerGREMEDY_t = function void(int32 len, void* @string);
	private static glStringMarkerGREMEDY_t p_glStringMarkerGREMEDY;
	[CallingConvention(GL.CallConv)]
	public static void glStringMarkerGREMEDY(int32 len, void* @string) => p_glStringMarkerGREMEDY(len, @string);

	private typealias glImageTransformParameteriHP_t = function void(uint32 target, uint32 pname, int32 param);
	private static glImageTransformParameteriHP_t p_glImageTransformParameteriHP;
	[CallingConvention(GL.CallConv)]
	public static void glImageTransformParameteriHP(uint32 target, uint32 pname, int32 param) => p_glImageTransformParameteriHP(target, pname, param);

	private typealias glImageTransformParameterfHP_t = function void(uint32 target, uint32 pname, float param);
	private static glImageTransformParameterfHP_t p_glImageTransformParameterfHP;
	[CallingConvention(GL.CallConv)]
	public static void glImageTransformParameterfHP(uint32 target, uint32 pname, float param) => p_glImageTransformParameterfHP(target, pname, param);

	private typealias glImageTransformParameterivHP_t = function void(uint32 target, uint32 pname, int32* @params);
	private static glImageTransformParameterivHP_t p_glImageTransformParameterivHP;
	[CallingConvention(GL.CallConv)]
	public static void glImageTransformParameterivHP(uint32 target, uint32 pname, int32* @params) => p_glImageTransformParameterivHP(target, pname, @params);

	private typealias glImageTransformParameterfvHP_t = function void(uint32 target, uint32 pname, float* @params);
	private static glImageTransformParameterfvHP_t p_glImageTransformParameterfvHP;
	[CallingConvention(GL.CallConv)]
	public static void glImageTransformParameterfvHP(uint32 target, uint32 pname, float* @params) => p_glImageTransformParameterfvHP(target, pname, @params);

	private typealias glGetImageTransformParameterivHP_t = function void(uint32 target, uint32 pname, int32* @params);
	private static glGetImageTransformParameterivHP_t p_glGetImageTransformParameterivHP;
	[CallingConvention(GL.CallConv)]
	public static void glGetImageTransformParameterivHP(uint32 target, uint32 pname, int32* @params) => p_glGetImageTransformParameterivHP(target, pname, @params);

	private typealias glGetImageTransformParameterfvHP_t = function void(uint32 target, uint32 pname, float* @params);
	private static glGetImageTransformParameterfvHP_t p_glGetImageTransformParameterfvHP;
	[CallingConvention(GL.CallConv)]
	public static void glGetImageTransformParameterfvHP(uint32 target, uint32 pname, float* @params) => p_glGetImageTransformParameterfvHP(target, pname, @params);

	private typealias glMultiModeDrawArraysIBM_t = function void(uint32* mode, int32* first, int32* count, int32 primcount, int32 modestride);
	private static glMultiModeDrawArraysIBM_t p_glMultiModeDrawArraysIBM;
	[CallingConvention(GL.CallConv)]
	public static void glMultiModeDrawArraysIBM(uint32* mode, int32* first, int32* count, int32 primcount, int32 modestride) => p_glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);

	private typealias glMultiModeDrawElementsIBM_t = function void(uint32* mode, int32* count, DrawElementsType type, void* indices, int32 primcount, int32 modestride);
	private static glMultiModeDrawElementsIBM_t p_glMultiModeDrawElementsIBM;
	[CallingConvention(GL.CallConv)]
	public static void glMultiModeDrawElementsIBM(uint32* mode, int32* count, DrawElementsType type, void* indices, int32 primcount, int32 modestride) => p_glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);

	private typealias glFlushStaticDataIBM_t = function void(uint32 target);
	private static glFlushStaticDataIBM_t p_glFlushStaticDataIBM;
	[CallingConvention(GL.CallConv)]
	public static void glFlushStaticDataIBM(uint32 target) => p_glFlushStaticDataIBM(target);

	private typealias glColorPointerListIBM_t = function void(int32 size, ColorPointerType type, int32 stride, void** pointer, int32 ptrstride);
	private static glColorPointerListIBM_t p_glColorPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glColorPointerListIBM(int32 size, ColorPointerType type, int32 stride, void** pointer, int32 ptrstride) => p_glColorPointerListIBM(size, type, stride, pointer, ptrstride);

	private typealias glSecondaryColorPointerListIBM_t = function void(int32 size, uint32 type, int32 stride, void** pointer, int32 ptrstride);
	private static glSecondaryColorPointerListIBM_t p_glSecondaryColorPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColorPointerListIBM(int32 size, uint32 type, int32 stride, void** pointer, int32 ptrstride) => p_glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);

	private typealias glEdgeFlagPointerListIBM_t = function void(int32 stride, void* pointer, int32 ptrstride);
	private static glEdgeFlagPointerListIBM_t p_glEdgeFlagPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glEdgeFlagPointerListIBM(int32 stride, void* pointer, int32 ptrstride) => p_glEdgeFlagPointerListIBM(stride, pointer, ptrstride);

	private typealias glFogCoordPointerListIBM_t = function void(uint32 type, int32 stride, void** pointer, int32 ptrstride);
	private static glFogCoordPointerListIBM_t p_glFogCoordPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoordPointerListIBM(uint32 type, int32 stride, void** pointer, int32 ptrstride) => p_glFogCoordPointerListIBM(type, stride, pointer, ptrstride);

	private typealias glIndexPointerListIBM_t = function void(IndexPointerType type, int32 stride, void** pointer, int32 ptrstride);
	private static glIndexPointerListIBM_t p_glIndexPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glIndexPointerListIBM(IndexPointerType type, int32 stride, void** pointer, int32 ptrstride) => p_glIndexPointerListIBM(type, stride, pointer, ptrstride);

	private typealias glNormalPointerListIBM_t = function void(NormalPointerType type, int32 stride, void** pointer, int32 ptrstride);
	private static glNormalPointerListIBM_t p_glNormalPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glNormalPointerListIBM(NormalPointerType type, int32 stride, void** pointer, int32 ptrstride) => p_glNormalPointerListIBM(type, stride, pointer, ptrstride);

	private typealias glTexCoordPointerListIBM_t = function void(int32 size, TexCoordPointerType type, int32 stride, void** pointer, int32 ptrstride);
	private static glTexCoordPointerListIBM_t p_glTexCoordPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordPointerListIBM(int32 size, TexCoordPointerType type, int32 stride, void** pointer, int32 ptrstride) => p_glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);

	private typealias glVertexPointerListIBM_t = function void(int32 size, VertexPointerType type, int32 stride, void** pointer, int32 ptrstride);
	private static glVertexPointerListIBM_t p_glVertexPointerListIBM;
	[CallingConvention(GL.CallConv)]
	public static void glVertexPointerListIBM(int32 size, VertexPointerType type, int32 stride, void** pointer, int32 ptrstride) => p_glVertexPointerListIBM(size, type, stride, pointer, ptrstride);

	private typealias glGetTextureHandleIMG_t = function uint64(uint32 texture);
	private static glGetTextureHandleIMG_t p_glGetTextureHandleIMG;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetTextureHandleIMG(uint32 texture) => p_glGetTextureHandleIMG(texture);

	private typealias glGetTextureSamplerHandleIMG_t = function uint64(uint32 texture, uint32 sampler);
	private static glGetTextureSamplerHandleIMG_t p_glGetTextureSamplerHandleIMG;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetTextureSamplerHandleIMG(uint32 texture, uint32 sampler) => p_glGetTextureSamplerHandleIMG(texture, sampler);

	private typealias glUniformHandleui64IMG_t = function void(int32 location, uint64 value);
	private static glUniformHandleui64IMG_t p_glUniformHandleui64IMG;
	[CallingConvention(GL.CallConv)]
	public static void glUniformHandleui64IMG(int32 location, uint64 value) => p_glUniformHandleui64IMG(location, value);

	private typealias glUniformHandleui64vIMG_t = function void(int32 location, int32 count, uint64* value);
	private static glUniformHandleui64vIMG_t p_glUniformHandleui64vIMG;
	[CallingConvention(GL.CallConv)]
	public static void glUniformHandleui64vIMG(int32 location, int32 count, uint64* value) => p_glUniformHandleui64vIMG(location, count, value);

	private typealias glProgramUniformHandleui64IMG_t = function void(uint32 program, int32 location, uint64 value);
	private static glProgramUniformHandleui64IMG_t p_glProgramUniformHandleui64IMG;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformHandleui64IMG(uint32 program, int32 location, uint64 value) => p_glProgramUniformHandleui64IMG(program, location, value);

	private typealias glProgramUniformHandleui64vIMG_t = function void(uint32 program, int32 location, int32 count, uint64* values);
	private static glProgramUniformHandleui64vIMG_t p_glProgramUniformHandleui64vIMG;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformHandleui64vIMG(uint32 program, int32 location, int32 count, uint64* values) => p_glProgramUniformHandleui64vIMG(program, location, count, values);

	private typealias glFramebufferTexture2DDownsampleIMG_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 xscale, int32 yscale);
	private static glFramebufferTexture2DDownsampleIMG_t p_glFramebufferTexture2DDownsampleIMG;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture2DDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 xscale, int32 yscale) => p_glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale);

	private typealias glFramebufferTextureLayerDownsampleIMG_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer, int32 xscale, int32 yscale);
	private static glFramebufferTextureLayerDownsampleIMG_t p_glFramebufferTextureLayerDownsampleIMG;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureLayerDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 layer, int32 xscale, int32 yscale) => p_glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale);

	private typealias glRenderbufferStorageMultisampleIMG_t = function void(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisampleIMG_t p_glRenderbufferStorageMultisampleIMG;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisampleIMG(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);

	private typealias glFramebufferTexture2DMultisampleIMG_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 samples);
	private static glFramebufferTexture2DMultisampleIMG_t p_glFramebufferTexture2DMultisampleIMG;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture2DMultisampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 samples) => p_glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);

	private typealias glClipPlanefIMG_t = function void(ClipPlaneName p, float* eqn);
	private static glClipPlanefIMG_t p_glClipPlanefIMG;
	[CallingConvention(GL.CallConv)]
	public static void glClipPlanefIMG(ClipPlaneName p, float* eqn) => p_glClipPlanefIMG(p, eqn);

	private typealias glClipPlanexIMG_t = function void(ClipPlaneName p, void* eqn);
	private static glClipPlanexIMG_t p_glClipPlanexIMG;
	[CallingConvention(GL.CallConv)]
	public static void glClipPlanexIMG(ClipPlaneName p, void* eqn) => p_glClipPlanexIMG(p, eqn);

	private typealias glBlendFuncSeparateINGR_t = function void(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
	private static glBlendFuncSeparateINGR_t p_glBlendFuncSeparateINGR;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparateINGR(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) => p_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

	private typealias glApplyFramebufferAttachmentCMAAINTEL_t = function void();
	private static glApplyFramebufferAttachmentCMAAINTEL_t p_glApplyFramebufferAttachmentCMAAINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glApplyFramebufferAttachmentCMAAINTEL() => p_glApplyFramebufferAttachmentCMAAINTEL();

	private typealias glSyncTextureINTEL_t = function void(uint32 texture);
	private static glSyncTextureINTEL_t p_glSyncTextureINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glSyncTextureINTEL(uint32 texture) => p_glSyncTextureINTEL(texture);

	private typealias glUnmapTexture2DINTEL_t = function void(uint32 texture, int32 level);
	private static glUnmapTexture2DINTEL_t p_glUnmapTexture2DINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glUnmapTexture2DINTEL(uint32 texture, int32 level) => p_glUnmapTexture2DINTEL(texture, level);

	private typealias glMapTexture2DINTEL_t = function void*(uint32 texture, int32 level, uint32 access, int32* stride, uint32* layout);
	private static glMapTexture2DINTEL_t p_glMapTexture2DINTEL;
	[CallingConvention(GL.CallConv)]
	public static void* glMapTexture2DINTEL(uint32 texture, int32 level, uint32 access, int32* stride, uint32* layout) => p_glMapTexture2DINTEL(texture, level, access, stride, layout);

	private typealias glVertexPointervINTEL_t = function void(int32 size, VertexPointerType type, void** pointer);
	private static glVertexPointervINTEL_t p_glVertexPointervINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glVertexPointervINTEL(int32 size, VertexPointerType type, void** pointer) => p_glVertexPointervINTEL(size, type, pointer);

	private typealias glNormalPointervINTEL_t = function void(NormalPointerType type, void** pointer);
	private static glNormalPointervINTEL_t p_glNormalPointervINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glNormalPointervINTEL(NormalPointerType type, void** pointer) => p_glNormalPointervINTEL(type, pointer);

	private typealias glColorPointervINTEL_t = function void(int32 size, VertexPointerType type, void** pointer);
	private static glColorPointervINTEL_t p_glColorPointervINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glColorPointervINTEL(int32 size, VertexPointerType type, void** pointer) => p_glColorPointervINTEL(size, type, pointer);

	private typealias glTexCoordPointervINTEL_t = function void(int32 size, VertexPointerType type, void** pointer);
	private static glTexCoordPointervINTEL_t p_glTexCoordPointervINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordPointervINTEL(int32 size, VertexPointerType type, void** pointer) => p_glTexCoordPointervINTEL(size, type, pointer);

	private typealias glBeginPerfQueryINTEL_t = function void(uint32 queryHandle);
	private static glBeginPerfQueryINTEL_t p_glBeginPerfQueryINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glBeginPerfQueryINTEL(uint32 queryHandle) => p_glBeginPerfQueryINTEL(queryHandle);

	private typealias glCreatePerfQueryINTEL_t = function void(uint32 queryId, uint32* queryHandle);
	private static glCreatePerfQueryINTEL_t p_glCreatePerfQueryINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glCreatePerfQueryINTEL(uint32 queryId, uint32* queryHandle) => p_glCreatePerfQueryINTEL(queryId, queryHandle);

	private typealias glDeletePerfQueryINTEL_t = function void(uint32 queryHandle);
	private static glDeletePerfQueryINTEL_t p_glDeletePerfQueryINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glDeletePerfQueryINTEL(uint32 queryHandle) => p_glDeletePerfQueryINTEL(queryHandle);

	private typealias glEndPerfQueryINTEL_t = function void(uint32 queryHandle);
	private static glEndPerfQueryINTEL_t p_glEndPerfQueryINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glEndPerfQueryINTEL(uint32 queryHandle) => p_glEndPerfQueryINTEL(queryHandle);

	private typealias glGetFirstPerfQueryIdINTEL_t = function void(uint32* queryId);
	private static glGetFirstPerfQueryIdINTEL_t p_glGetFirstPerfQueryIdINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glGetFirstPerfQueryIdINTEL(uint32* queryId) => p_glGetFirstPerfQueryIdINTEL(queryId);

	private typealias glGetNextPerfQueryIdINTEL_t = function void(uint32 queryId, uint32* nextQueryId);
	private static glGetNextPerfQueryIdINTEL_t p_glGetNextPerfQueryIdINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glGetNextPerfQueryIdINTEL(uint32 queryId, uint32* nextQueryId) => p_glGetNextPerfQueryIdINTEL(queryId, nextQueryId);

	private typealias glGetPerfCounterInfoINTEL_t = function void(uint32 queryId, uint32 counterId, uint32 counterNameLength, char8* counterName, uint32 counterDescLength, char8* counterDesc, uint32* counterOffset, uint32* counterDataSize, uint32* counterTypeEnum, uint32* counterDataTypeEnum, uint64* rawCounterMaxValue);
	private static glGetPerfCounterInfoINTEL_t p_glGetPerfCounterInfoINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfCounterInfoINTEL(uint32 queryId, uint32 counterId, uint32 counterNameLength, char8* counterName, uint32 counterDescLength, char8* counterDesc, uint32* counterOffset, uint32* counterDataSize, uint32* counterTypeEnum, uint32* counterDataTypeEnum, uint64* rawCounterMaxValue) => p_glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);

	private typealias glGetPerfQueryDataINTEL_t = function void(uint32 queryHandle, uint32 flags, int32 dataSize, void* data, uint32* bytesWritten);
	private static glGetPerfQueryDataINTEL_t p_glGetPerfQueryDataINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfQueryDataINTEL(uint32 queryHandle, uint32 flags, int32 dataSize, void* data, uint32* bytesWritten) => p_glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);

	private typealias glGetPerfQueryIdByNameINTEL_t = function void(char8* queryName, uint32* queryId);
	private static glGetPerfQueryIdByNameINTEL_t p_glGetPerfQueryIdByNameINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfQueryIdByNameINTEL(char8* queryName, uint32* queryId) => p_glGetPerfQueryIdByNameINTEL(queryName, queryId);

	private typealias glGetPerfQueryInfoINTEL_t = function void(uint32 queryId, uint32 queryNameLength, char8* queryName, uint32* dataSize, uint32* noCounters, uint32* noInstances, uint32* capsMask);
	private static glGetPerfQueryInfoINTEL_t p_glGetPerfQueryInfoINTEL;
	[CallingConvention(GL.CallConv)]
	public static void glGetPerfQueryInfoINTEL(uint32 queryId, uint32 queryNameLength, char8* queryName, uint32* dataSize, uint32* noCounters, uint32* noInstances, uint32* capsMask) => p_glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);

	private typealias glBlendBarrierKHR_t = function void();
	private static glBlendBarrierKHR_t p_glBlendBarrierKHR;
	[CallingConvention(GL.CallConv)]
	public static void glBlendBarrierKHR() => p_glBlendBarrierKHR();

	private typealias glDebugMessageControlKHR_t = function void(DebugSource source, DebugType type, DebugSeverity severity, int32 count, uint32* ids, bool enabled);
	private static glDebugMessageControlKHR_t p_glDebugMessageControlKHR;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int32 count, uint32* ids, bool enabled) => p_glDebugMessageControlKHR(source, type, severity, count, ids, enabled);

	private typealias glDebugMessageInsertKHR_t = function void(DebugSource source, DebugType type, uint32 id, DebugSeverity severity, int32 length, char8* buf);
	private static glDebugMessageInsertKHR_t p_glDebugMessageInsertKHR;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageInsertKHR(DebugSource source, DebugType type, uint32 id, DebugSeverity severity, int32 length, char8* buf) => p_glDebugMessageInsertKHR(source, type, id, severity, length, buf);

	private typealias glDebugMessageCallbackKHR_t = function void(void* callback, void* userParam);
	private static glDebugMessageCallbackKHR_t p_glDebugMessageCallbackKHR;
	[CallingConvention(GL.CallConv)]
	public static void glDebugMessageCallbackKHR(void* callback, void* userParam) => p_glDebugMessageCallbackKHR(callback, userParam);

	private typealias glGetDebugMessageLogKHR_t = function uint32(uint32 count, int32 bufSize, uint32* sources, uint32* types, uint32* ids, uint32* severities, int32* lengths, char8* messageLog);
	private static glGetDebugMessageLogKHR_t p_glGetDebugMessageLogKHR;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetDebugMessageLogKHR(uint32 count, int32 bufSize, uint32* sources, uint32* types, uint32* ids, uint32* severities, int32* lengths, char8* messageLog) => p_glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog);

	private typealias glPushDebugGroupKHR_t = function void(DebugSource source, uint32 id, int32 length, char8* message);
	private static glPushDebugGroupKHR_t p_glPushDebugGroupKHR;
	[CallingConvention(GL.CallConv)]
	public static void glPushDebugGroupKHR(DebugSource source, uint32 id, int32 length, char8* message) => p_glPushDebugGroupKHR(source, id, length, message);

	private typealias glPopDebugGroupKHR_t = function void();
	private static glPopDebugGroupKHR_t p_glPopDebugGroupKHR;
	[CallingConvention(GL.CallConv)]
	public static void glPopDebugGroupKHR() => p_glPopDebugGroupKHR();

	private typealias glObjectLabelKHR_t = function void(ObjectIdentifier identifier, uint32 name, int32 length, char8* label);
	private static glObjectLabelKHR_t p_glObjectLabelKHR;
	[CallingConvention(GL.CallConv)]
	public static void glObjectLabelKHR(ObjectIdentifier identifier, uint32 name, int32 length, char8* label) => p_glObjectLabelKHR(identifier, name, length, label);

	private typealias glGetObjectLabelKHR_t = function void(uint32 identifier, uint32 name, int32 bufSize, int32* length, char8* label);
	private static glGetObjectLabelKHR_t p_glGetObjectLabelKHR;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectLabelKHR(uint32 identifier, uint32 name, int32 bufSize, int32* length, char8* label) => p_glGetObjectLabelKHR(identifier, name, bufSize, length, label);

	private typealias glObjectPtrLabelKHR_t = function void(void* ptr, int32 length, char8* label);
	private static glObjectPtrLabelKHR_t p_glObjectPtrLabelKHR;
	[CallingConvention(GL.CallConv)]
	public static void glObjectPtrLabelKHR(void* ptr, int32 length, char8* label) => p_glObjectPtrLabelKHR(ptr, length, label);

	private typealias glGetObjectPtrLabelKHR_t = function void(void* ptr, int32 bufSize, int32* length, char8* label);
	private static glGetObjectPtrLabelKHR_t p_glGetObjectPtrLabelKHR;
	[CallingConvention(GL.CallConv)]
	public static void glGetObjectPtrLabelKHR(void* ptr, int32 bufSize, int32* length, char8* label) => p_glGetObjectPtrLabelKHR(ptr, bufSize, length, label);

	private typealias glGetPointervKHR_t = function void(uint32 pname, void** @params);
	private static glGetPointervKHR_t p_glGetPointervKHR;
	[CallingConvention(GL.CallConv)]
	public static void glGetPointervKHR(uint32 pname, void** @params) => p_glGetPointervKHR(pname, @params);

	private typealias glGetGraphicsResetStatusKHR_t = function GraphicsResetStatus();
	private static glGetGraphicsResetStatusKHR_t p_glGetGraphicsResetStatusKHR;
	[CallingConvention(GL.CallConv)]
	public static GraphicsResetStatus glGetGraphicsResetStatusKHR() => p_glGetGraphicsResetStatusKHR();

	private typealias glReadnPixelsKHR_t = function void(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data);
	private static glReadnPixelsKHR_t p_glReadnPixelsKHR;
	[CallingConvention(GL.CallConv)]
	public static void glReadnPixelsKHR(int32 x, int32 y, int32 width, int32 height, PixelFormat format, PixelType type, int32 bufSize, void* data) => p_glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data);

	private typealias glGetnUniformfvKHR_t = function void(uint32 program, int32 location, int32 bufSize, float* @params);
	private static glGetnUniformfvKHR_t p_glGetnUniformfvKHR;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformfvKHR(uint32 program, int32 location, int32 bufSize, float* @params) => p_glGetnUniformfvKHR(program, location, bufSize, @params);

	private typealias glGetnUniformivKHR_t = function void(uint32 program, int32 location, int32 bufSize, int32* @params);
	private static glGetnUniformivKHR_t p_glGetnUniformivKHR;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformivKHR(uint32 program, int32 location, int32 bufSize, int32* @params) => p_glGetnUniformivKHR(program, location, bufSize, @params);

	private typealias glGetnUniformuivKHR_t = function void(uint32 program, int32 location, int32 bufSize, uint32* @params);
	private static glGetnUniformuivKHR_t p_glGetnUniformuivKHR;
	[CallingConvention(GL.CallConv)]
	public static void glGetnUniformuivKHR(uint32 program, int32 location, int32 bufSize, uint32* @params) => p_glGetnUniformuivKHR(program, location, bufSize, @params);

	private typealias glMaxShaderCompilerThreadsKHR_t = function void(uint32 count);
	private static glMaxShaderCompilerThreadsKHR_t p_glMaxShaderCompilerThreadsKHR;
	[CallingConvention(GL.CallConv)]
	public static void glMaxShaderCompilerThreadsKHR(uint32 count) => p_glMaxShaderCompilerThreadsKHR(count);

	private typealias glResizeBuffersMESA_t = function void();
	private static glResizeBuffersMESA_t p_glResizeBuffersMESA;
	[CallingConvention(GL.CallConv)]
	public static void glResizeBuffersMESA() => p_glResizeBuffersMESA();

	private typealias glWindowPos2dMESA_t = function void(double x, double y);
	private static glWindowPos2dMESA_t p_glWindowPos2dMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2dMESA(double x, double y) => p_glWindowPos2dMESA(x, y);

	private typealias glWindowPos2dvMESA_t = function void(double* v);
	private static glWindowPos2dvMESA_t p_glWindowPos2dvMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2dvMESA(double* v) => p_glWindowPos2dvMESA(v);

	private typealias glWindowPos2fMESA_t = function void(float x, float y);
	private static glWindowPos2fMESA_t p_glWindowPos2fMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2fMESA(float x, float y) => p_glWindowPos2fMESA(x, y);

	private typealias glWindowPos2fvMESA_t = function void(float* v);
	private static glWindowPos2fvMESA_t p_glWindowPos2fvMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2fvMESA(float* v) => p_glWindowPos2fvMESA(v);

	private typealias glWindowPos2iMESA_t = function void(int32 x, int32 y);
	private static glWindowPos2iMESA_t p_glWindowPos2iMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2iMESA(int32 x, int32 y) => p_glWindowPos2iMESA(x, y);

	private typealias glWindowPos2ivMESA_t = function void(int32* v);
	private static glWindowPos2ivMESA_t p_glWindowPos2ivMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2ivMESA(int32* v) => p_glWindowPos2ivMESA(v);

	private typealias glWindowPos2sMESA_t = function void(int16 x, int16 y);
	private static glWindowPos2sMESA_t p_glWindowPos2sMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2sMESA(int16 x, int16 y) => p_glWindowPos2sMESA(x, y);

	private typealias glWindowPos2svMESA_t = function void(int16* v);
	private static glWindowPos2svMESA_t p_glWindowPos2svMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos2svMESA(int16* v) => p_glWindowPos2svMESA(v);

	private typealias glWindowPos3dMESA_t = function void(double x, double y, double z);
	private static glWindowPos3dMESA_t p_glWindowPos3dMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3dMESA(double x, double y, double z) => p_glWindowPos3dMESA(x, y, z);

	private typealias glWindowPos3dvMESA_t = function void(double* v);
	private static glWindowPos3dvMESA_t p_glWindowPos3dvMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3dvMESA(double* v) => p_glWindowPos3dvMESA(v);

	private typealias glWindowPos3fMESA_t = function void(float x, float y, float z);
	private static glWindowPos3fMESA_t p_glWindowPos3fMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3fMESA(float x, float y, float z) => p_glWindowPos3fMESA(x, y, z);

	private typealias glWindowPos3fvMESA_t = function void(float* v);
	private static glWindowPos3fvMESA_t p_glWindowPos3fvMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3fvMESA(float* v) => p_glWindowPos3fvMESA(v);

	private typealias glWindowPos3iMESA_t = function void(int32 x, int32 y, int32 z);
	private static glWindowPos3iMESA_t p_glWindowPos3iMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3iMESA(int32 x, int32 y, int32 z) => p_glWindowPos3iMESA(x, y, z);

	private typealias glWindowPos3ivMESA_t = function void(int32* v);
	private static glWindowPos3ivMESA_t p_glWindowPos3ivMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3ivMESA(int32* v) => p_glWindowPos3ivMESA(v);

	private typealias glWindowPos3sMESA_t = function void(int16 x, int16 y, int16 z);
	private static glWindowPos3sMESA_t p_glWindowPos3sMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3sMESA(int16 x, int16 y, int16 z) => p_glWindowPos3sMESA(x, y, z);

	private typealias glWindowPos3svMESA_t = function void(int16* v);
	private static glWindowPos3svMESA_t p_glWindowPos3svMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos3svMESA(int16* v) => p_glWindowPos3svMESA(v);

	private typealias glWindowPos4dMESA_t = function void(double x, double y, double z, double w);
	private static glWindowPos4dMESA_t p_glWindowPos4dMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4dMESA(double x, double y, double z, double w) => p_glWindowPos4dMESA(x, y, z, w);

	private typealias glWindowPos4dvMESA_t = function void(double* v);
	private static glWindowPos4dvMESA_t p_glWindowPos4dvMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4dvMESA(double* v) => p_glWindowPos4dvMESA(v);

	private typealias glWindowPos4fMESA_t = function void(float x, float y, float z, float w);
	private static glWindowPos4fMESA_t p_glWindowPos4fMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4fMESA(float x, float y, float z, float w) => p_glWindowPos4fMESA(x, y, z, w);

	private typealias glWindowPos4fvMESA_t = function void(float* v);
	private static glWindowPos4fvMESA_t p_glWindowPos4fvMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4fvMESA(float* v) => p_glWindowPos4fvMESA(v);

	private typealias glWindowPos4iMESA_t = function void(int32 x, int32 y, int32 z, int32 w);
	private static glWindowPos4iMESA_t p_glWindowPos4iMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4iMESA(int32 x, int32 y, int32 z, int32 w) => p_glWindowPos4iMESA(x, y, z, w);

	private typealias glWindowPos4ivMESA_t = function void(int32* v);
	private static glWindowPos4ivMESA_t p_glWindowPos4ivMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4ivMESA(int32* v) => p_glWindowPos4ivMESA(v);

	private typealias glWindowPos4sMESA_t = function void(int16 x, int16 y, int16 z, int16 w);
	private static glWindowPos4sMESA_t p_glWindowPos4sMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4sMESA(int16 x, int16 y, int16 z, int16 w) => p_glWindowPos4sMESA(x, y, z, w);

	private typealias glWindowPos4svMESA_t = function void(int16* v);
	private static glWindowPos4svMESA_t p_glWindowPos4svMESA;
	[CallingConvention(GL.CallConv)]
	public static void glWindowPos4svMESA(int16* v) => p_glWindowPos4svMESA(v);

	private typealias glBeginConditionalRenderNVX_t = function void(uint32 id);
	private static glBeginConditionalRenderNVX_t p_glBeginConditionalRenderNVX;
	[CallingConvention(GL.CallConv)]
	public static void glBeginConditionalRenderNVX(uint32 id) => p_glBeginConditionalRenderNVX(id);

	private typealias glEndConditionalRenderNVX_t = function void();
	private static glEndConditionalRenderNVX_t p_glEndConditionalRenderNVX;
	[CallingConvention(GL.CallConv)]
	public static void glEndConditionalRenderNVX() => p_glEndConditionalRenderNVX();

	private typealias glLGPUNamedBufferSubDataNVX_t = function void(uint32 gpuMask, uint32 buffer, void* offset, int32 size, void* data);
	private static glLGPUNamedBufferSubDataNVX_t p_glLGPUNamedBufferSubDataNVX;
	[CallingConvention(GL.CallConv)]
	public static void glLGPUNamedBufferSubDataNVX(uint32 gpuMask, uint32 buffer, void* offset, int32 size, void* data) => p_glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);

	private typealias glLGPUCopyImageSubDataNVX_t = function void(uint32 sourceGpu, uint32 destinationGpuMask, uint32 srcName, uint32 srcTarget, int32 srcLevel, int32 srcX, int32 srxY, int32 srcZ, uint32 dstName, uint32 dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 width, int32 height, int32 depth);
	private static glLGPUCopyImageSubDataNVX_t p_glLGPUCopyImageSubDataNVX;
	[CallingConvention(GL.CallConv)]
	public static void glLGPUCopyImageSubDataNVX(uint32 sourceGpu, uint32 destinationGpuMask, uint32 srcName, uint32 srcTarget, int32 srcLevel, int32 srcX, int32 srxY, int32 srcZ, uint32 dstName, uint32 dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 width, int32 height, int32 depth) => p_glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);

	private typealias glLGPUInterlockNVX_t = function void();
	private static glLGPUInterlockNVX_t p_glLGPUInterlockNVX;
	[CallingConvention(GL.CallConv)]
	public static void glLGPUInterlockNVX() => p_glLGPUInterlockNVX();

	private typealias glAlphaToCoverageDitherControlNV_t = function void(uint32 mode);
	private static glAlphaToCoverageDitherControlNV_t p_glAlphaToCoverageDitherControlNV;
	[CallingConvention(GL.CallConv)]
	public static void glAlphaToCoverageDitherControlNV(uint32 mode) => p_glAlphaToCoverageDitherControlNV(mode);

	private typealias glMultiDrawArraysIndirectBindlessNV_t = function void(PrimitiveType mode, void* indirect, int32 drawCount, int32 stride, int32 vertexBufferCount);
	private static glMultiDrawArraysIndirectBindlessNV_t p_glMultiDrawArraysIndirectBindlessNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysIndirectBindlessNV(PrimitiveType mode, void* indirect, int32 drawCount, int32 stride, int32 vertexBufferCount) => p_glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);

	private typealias glMultiDrawElementsIndirectBindlessNV_t = function void(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawCount, int32 stride, int32 vertexBufferCount);
	private static glMultiDrawElementsIndirectBindlessNV_t p_glMultiDrawElementsIndirectBindlessNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsIndirectBindlessNV(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawCount, int32 stride, int32 vertexBufferCount) => p_glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);

	private typealias glMultiDrawArraysIndirectBindlessCountNV_t = function void(PrimitiveType mode, void* indirect, int32 drawCount, int32 maxDrawCount, int32 stride, int32 vertexBufferCount);
	private static glMultiDrawArraysIndirectBindlessCountNV_t p_glMultiDrawArraysIndirectBindlessCountNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawArraysIndirectBindlessCountNV(PrimitiveType mode, void* indirect, int32 drawCount, int32 maxDrawCount, int32 stride, int32 vertexBufferCount) => p_glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);

	private typealias glMultiDrawElementsIndirectBindlessCountNV_t = function void(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawCount, int32 maxDrawCount, int32 stride, int32 vertexBufferCount);
	private static glMultiDrawElementsIndirectBindlessCountNV_t p_glMultiDrawElementsIndirectBindlessCountNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawElementsIndirectBindlessCountNV(PrimitiveType mode, DrawElementsType type, void* indirect, int32 drawCount, int32 maxDrawCount, int32 stride, int32 vertexBufferCount) => p_glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);

	private typealias glGetTextureHandleNV_t = function uint64(uint32 texture);
	private static glGetTextureHandleNV_t p_glGetTextureHandleNV;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetTextureHandleNV(uint32 texture) => p_glGetTextureHandleNV(texture);

	private typealias glGetTextureSamplerHandleNV_t = function uint64(uint32 texture, uint32 sampler);
	private static glGetTextureSamplerHandleNV_t p_glGetTextureSamplerHandleNV;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetTextureSamplerHandleNV(uint32 texture, uint32 sampler) => p_glGetTextureSamplerHandleNV(texture, sampler);

	private typealias glMakeTextureHandleResidentNV_t = function void(uint64 handle);
	private static glMakeTextureHandleResidentNV_t p_glMakeTextureHandleResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeTextureHandleResidentNV(uint64 handle) => p_glMakeTextureHandleResidentNV(handle);

	private typealias glMakeTextureHandleNonResidentNV_t = function void(uint64 handle);
	private static glMakeTextureHandleNonResidentNV_t p_glMakeTextureHandleNonResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeTextureHandleNonResidentNV(uint64 handle) => p_glMakeTextureHandleNonResidentNV(handle);

	private typealias glGetImageHandleNV_t = function uint64(uint32 texture, int32 level, bool layered, int32 layer, PixelFormat format);
	private static glGetImageHandleNV_t p_glGetImageHandleNV;
	[CallingConvention(GL.CallConv)]
	public static uint64 glGetImageHandleNV(uint32 texture, int32 level, bool layered, int32 layer, PixelFormat format) => p_glGetImageHandleNV(texture, level, layered, layer, format);

	private typealias glMakeImageHandleResidentNV_t = function void(uint64 handle, uint32 access);
	private static glMakeImageHandleResidentNV_t p_glMakeImageHandleResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeImageHandleResidentNV(uint64 handle, uint32 access) => p_glMakeImageHandleResidentNV(handle, access);

	private typealias glMakeImageHandleNonResidentNV_t = function void(uint64 handle);
	private static glMakeImageHandleNonResidentNV_t p_glMakeImageHandleNonResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeImageHandleNonResidentNV(uint64 handle) => p_glMakeImageHandleNonResidentNV(handle);

	private typealias glUniformHandleui64NV_t = function void(int32 location, uint64 value);
	private static glUniformHandleui64NV_t p_glUniformHandleui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformHandleui64NV(int32 location, uint64 value) => p_glUniformHandleui64NV(location, value);

	private typealias glUniformHandleui64vNV_t = function void(int32 location, int32 count, uint64* value);
	private static glUniformHandleui64vNV_t p_glUniformHandleui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformHandleui64vNV(int32 location, int32 count, uint64* value) => p_glUniformHandleui64vNV(location, count, value);

	private typealias glProgramUniformHandleui64NV_t = function void(uint32 program, int32 location, uint64 value);
	private static glProgramUniformHandleui64NV_t p_glProgramUniformHandleui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformHandleui64NV(uint32 program, int32 location, uint64 value) => p_glProgramUniformHandleui64NV(program, location, value);

	private typealias glProgramUniformHandleui64vNV_t = function void(uint32 program, int32 location, int32 count, uint64* values);
	private static glProgramUniformHandleui64vNV_t p_glProgramUniformHandleui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformHandleui64vNV(uint32 program, int32 location, int32 count, uint64* values) => p_glProgramUniformHandleui64vNV(program, location, count, values);

	private typealias glIsTextureHandleResidentNV_t = function bool(uint64 handle);
	private static glIsTextureHandleResidentNV_t p_glIsTextureHandleResidentNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsTextureHandleResidentNV(uint64 handle) => p_glIsTextureHandleResidentNV(handle);

	private typealias glIsImageHandleResidentNV_t = function bool(uint64 handle);
	private static glIsImageHandleResidentNV_t p_glIsImageHandleResidentNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsImageHandleResidentNV(uint64 handle) => p_glIsImageHandleResidentNV(handle);

	private typealias glBlendParameteriNV_t = function void(uint32 pname, int32 value);
	private static glBlendParameteriNV_t p_glBlendParameteriNV;
	[CallingConvention(GL.CallConv)]
	public static void glBlendParameteriNV(uint32 pname, int32 value) => p_glBlendParameteriNV(pname, value);

	private typealias glBlendBarrierNV_t = function void();
	private static glBlendBarrierNV_t p_glBlendBarrierNV;
	[CallingConvention(GL.CallConv)]
	public static void glBlendBarrierNV() => p_glBlendBarrierNV();

	private typealias glViewportPositionWScaleNV_t = function void(uint32 index, float xcoeff, float ycoeff);
	private static glViewportPositionWScaleNV_t p_glViewportPositionWScaleNV;
	[CallingConvention(GL.CallConv)]
	public static void glViewportPositionWScaleNV(uint32 index, float xcoeff, float ycoeff) => p_glViewportPositionWScaleNV(index, xcoeff, ycoeff);

	private typealias glCreateStatesNV_t = function void(int32 n, uint32* states);
	private static glCreateStatesNV_t p_glCreateStatesNV;
	[CallingConvention(GL.CallConv)]
	public static void glCreateStatesNV(int32 n, uint32* states) => p_glCreateStatesNV(n, states);

	private typealias glDeleteStatesNV_t = function void(int32 n, uint32* states);
	private static glDeleteStatesNV_t p_glDeleteStatesNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteStatesNV(int32 n, uint32* states) => p_glDeleteStatesNV(n, states);

	private typealias glIsStateNV_t = function bool(uint32 state);
	private static glIsStateNV_t p_glIsStateNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsStateNV(uint32 state) => p_glIsStateNV(state);

	private typealias glStateCaptureNV_t = function void(uint32 state, uint32 mode);
	private static glStateCaptureNV_t p_glStateCaptureNV;
	[CallingConvention(GL.CallConv)]
	public static void glStateCaptureNV(uint32 state, uint32 mode) => p_glStateCaptureNV(state, mode);

	private typealias glGetCommandHeaderNV_t = function uint32(uint32 tokenID, uint32 size);
	private static glGetCommandHeaderNV_t p_glGetCommandHeaderNV;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGetCommandHeaderNV(uint32 tokenID, uint32 size) => p_glGetCommandHeaderNV(tokenID, size);

	private typealias glGetStageIndexNV_t = function uint16(ShaderType shadertype);
	private static glGetStageIndexNV_t p_glGetStageIndexNV;
	[CallingConvention(GL.CallConv)]
	public static uint16 glGetStageIndexNV(ShaderType shadertype) => p_glGetStageIndexNV(shadertype);

	private typealias glDrawCommandsNV_t = function void(uint32 primitiveMode, uint32 buffer, void* indirects, int32* sizes, uint32 count);
	private static glDrawCommandsNV_t p_glDrawCommandsNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawCommandsNV(uint32 primitiveMode, uint32 buffer, void* indirects, int32* sizes, uint32 count) => p_glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);

	private typealias glDrawCommandsAddressNV_t = function void(uint32 primitiveMode, uint64* indirects, int32* sizes, uint32 count);
	private static glDrawCommandsAddressNV_t p_glDrawCommandsAddressNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawCommandsAddressNV(uint32 primitiveMode, uint64* indirects, int32* sizes, uint32 count) => p_glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);

	private typealias glDrawCommandsStatesNV_t = function void(uint32 buffer, void* indirects, int32* sizes, uint32* states, uint32* fbos, uint32 count);
	private static glDrawCommandsStatesNV_t p_glDrawCommandsStatesNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawCommandsStatesNV(uint32 buffer, void* indirects, int32* sizes, uint32* states, uint32* fbos, uint32 count) => p_glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);

	private typealias glDrawCommandsStatesAddressNV_t = function void(uint64* indirects, int32* sizes, uint32* states, uint32* fbos, uint32 count);
	private static glDrawCommandsStatesAddressNV_t p_glDrawCommandsStatesAddressNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawCommandsStatesAddressNV(uint64* indirects, int32* sizes, uint32* states, uint32* fbos, uint32 count) => p_glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);

	private typealias glCreateCommandListsNV_t = function void(int32 n, uint32* lists);
	private static glCreateCommandListsNV_t p_glCreateCommandListsNV;
	[CallingConvention(GL.CallConv)]
	public static void glCreateCommandListsNV(int32 n, uint32* lists) => p_glCreateCommandListsNV(n, lists);

	private typealias glDeleteCommandListsNV_t = function void(int32 n, uint32* lists);
	private static glDeleteCommandListsNV_t p_glDeleteCommandListsNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteCommandListsNV(int32 n, uint32* lists) => p_glDeleteCommandListsNV(n, lists);

	private typealias glIsCommandListNV_t = function bool(uint32 list);
	private static glIsCommandListNV_t p_glIsCommandListNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsCommandListNV(uint32 list) => p_glIsCommandListNV(list);

	private typealias glListDrawCommandsStatesClientNV_t = function void(uint32 list, uint32 segment, void** indirects, int32* sizes, uint32* states, uint32* fbos, uint32 count);
	private static glListDrawCommandsStatesClientNV_t p_glListDrawCommandsStatesClientNV;
	[CallingConvention(GL.CallConv)]
	public static void glListDrawCommandsStatesClientNV(uint32 list, uint32 segment, void** indirects, int32* sizes, uint32* states, uint32* fbos, uint32 count) => p_glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);

	private typealias glCommandListSegmentsNV_t = function void(uint32 list, uint32 segments);
	private static glCommandListSegmentsNV_t p_glCommandListSegmentsNV;
	[CallingConvention(GL.CallConv)]
	public static void glCommandListSegmentsNV(uint32 list, uint32 segments) => p_glCommandListSegmentsNV(list, segments);

	private typealias glCompileCommandListNV_t = function void(uint32 list);
	private static glCompileCommandListNV_t p_glCompileCommandListNV;
	[CallingConvention(GL.CallConv)]
	public static void glCompileCommandListNV(uint32 list) => p_glCompileCommandListNV(list);

	private typealias glCallCommandListNV_t = function void(uint32 list);
	private static glCallCommandListNV_t p_glCallCommandListNV;
	[CallingConvention(GL.CallConv)]
	public static void glCallCommandListNV(uint32 list) => p_glCallCommandListNV(list);

	private typealias glBeginConditionalRenderNV_t = function void(uint32 id, TypeEnum mode);
	private static glBeginConditionalRenderNV_t p_glBeginConditionalRenderNV;
	[CallingConvention(GL.CallConv)]
	public static void glBeginConditionalRenderNV(uint32 id, TypeEnum mode) => p_glBeginConditionalRenderNV(id, mode);

	private typealias glEndConditionalRenderNV_t = function void();
	private static glEndConditionalRenderNV_t p_glEndConditionalRenderNV;
	[CallingConvention(GL.CallConv)]
	public static void glEndConditionalRenderNV() => p_glEndConditionalRenderNV();

	private typealias glSubpixelPrecisionBiasNV_t = function void(uint32 xbits, uint32 ybits);
	private static glSubpixelPrecisionBiasNV_t p_glSubpixelPrecisionBiasNV;
	[CallingConvention(GL.CallConv)]
	public static void glSubpixelPrecisionBiasNV(uint32 xbits, uint32 ybits) => p_glSubpixelPrecisionBiasNV(xbits, ybits);

	private typealias glConservativeRasterParameterfNV_t = function void(uint32 pname, float value);
	private static glConservativeRasterParameterfNV_t p_glConservativeRasterParameterfNV;
	[CallingConvention(GL.CallConv)]
	public static void glConservativeRasterParameterfNV(uint32 pname, float value) => p_glConservativeRasterParameterfNV(pname, value);

	private typealias glConservativeRasterParameteriNV_t = function void(uint32 pname, int32 param);
	private static glConservativeRasterParameteriNV_t p_glConservativeRasterParameteriNV;
	[CallingConvention(GL.CallConv)]
	public static void glConservativeRasterParameteriNV(uint32 pname, int32 param) => p_glConservativeRasterParameteriNV(pname, param);

	private typealias glCopyBufferSubDataNV_t = function void(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, void* readOffset, void* writeOffset, int32 size);
	private static glCopyBufferSubDataNV_t p_glCopyBufferSubDataNV;
	[CallingConvention(GL.CallConv)]
	public static void glCopyBufferSubDataNV(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, void* readOffset, void* writeOffset, int32 size) => p_glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size);

	private typealias glCopyImageSubDataNV_t = function void(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 width, int32 height, int32 depth);
	private static glCopyImageSubDataNV_t p_glCopyImageSubDataNV;
	[CallingConvention(GL.CallConv)]
	public static void glCopyImageSubDataNV(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 width, int32 height, int32 depth) => p_glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);

	private typealias glCoverageMaskNV_t = function void(bool mask);
	private static glCoverageMaskNV_t p_glCoverageMaskNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverageMaskNV(bool mask) => p_glCoverageMaskNV(mask);

	private typealias glCoverageOperationNV_t = function void(uint32 operation);
	private static glCoverageOperationNV_t p_glCoverageOperationNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverageOperationNV(uint32 operation) => p_glCoverageOperationNV(operation);

	private typealias glDepthRangedNV_t = function void(double zNear, double zFar);
	private static glDepthRangedNV_t p_glDepthRangedNV;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangedNV(double zNear, double zFar) => p_glDepthRangedNV(zNear, zFar);

	private typealias glClearDepthdNV_t = function void(double depth);
	private static glClearDepthdNV_t p_glClearDepthdNV;
	[CallingConvention(GL.CallConv)]
	public static void glClearDepthdNV(double depth) => p_glClearDepthdNV(depth);

	private typealias glDepthBoundsdNV_t = function void(double zmin, double zmax);
	private static glDepthBoundsdNV_t p_glDepthBoundsdNV;
	[CallingConvention(GL.CallConv)]
	public static void glDepthBoundsdNV(double zmin, double zmax) => p_glDepthBoundsdNV(zmin, zmax);

	private typealias glDrawBuffersNV_t = function void(int32 n, uint32* bufs);
	private static glDrawBuffersNV_t p_glDrawBuffersNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawBuffersNV(int32 n, uint32* bufs) => p_glDrawBuffersNV(n, bufs);

	private typealias glDrawArraysInstancedNV_t = function void(PrimitiveType mode, int32 first, int32 count, int32 primcount);
	private static glDrawArraysInstancedNV_t p_glDrawArraysInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawArraysInstancedNV(PrimitiveType mode, int32 first, int32 count, int32 primcount) => p_glDrawArraysInstancedNV(mode, first, count, primcount);

	private typealias glDrawElementsInstancedNV_t = function void(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 primcount);
	private static glDrawElementsInstancedNV_t p_glDrawElementsInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedNV(PrimitiveType mode, int32 count, PrimitiveType type, void* indices, int32 primcount) => p_glDrawElementsInstancedNV(mode, count, type, indices, primcount);

	private typealias glDrawTextureNV_t = function void(uint32 texture, uint32 sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
	private static glDrawTextureNV_t p_glDrawTextureNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTextureNV(uint32 texture, uint32 sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) => p_glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);

	private typealias glDrawVkImageNV_t = function void(uint64 vkImage, uint32 sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
	private static glDrawVkImageNV_t p_glDrawVkImageNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawVkImageNV(uint64 vkImage, uint32 sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) => p_glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);

	private typealias glGetVkProcAddrNV_t = function void*(char8* name);
	private static glGetVkProcAddrNV_t p_glGetVkProcAddrNV;
	[CallingConvention(GL.CallConv)]
	public static void* glGetVkProcAddrNV(char8* name) => p_glGetVkProcAddrNV(name);

	private typealias glWaitVkSemaphoreNV_t = function void(uint64 vkSemaphore);
	private static glWaitVkSemaphoreNV_t p_glWaitVkSemaphoreNV;
	[CallingConvention(GL.CallConv)]
	public static void glWaitVkSemaphoreNV(uint64 vkSemaphore) => p_glWaitVkSemaphoreNV(vkSemaphore);

	private typealias glSignalVkSemaphoreNV_t = function void(uint64 vkSemaphore);
	private static glSignalVkSemaphoreNV_t p_glSignalVkSemaphoreNV;
	[CallingConvention(GL.CallConv)]
	public static void glSignalVkSemaphoreNV(uint64 vkSemaphore) => p_glSignalVkSemaphoreNV(vkSemaphore);

	private typealias glSignalVkFenceNV_t = function void(uint64 vkFence);
	private static glSignalVkFenceNV_t p_glSignalVkFenceNV;
	[CallingConvention(GL.CallConv)]
	public static void glSignalVkFenceNV(uint64 vkFence) => p_glSignalVkFenceNV(vkFence);

	private typealias glMapControlPointsNV_t = function void(uint32 target, uint32 index, uint32 type, int32 ustride, int32 vstride, int32 uorder, int32 vorder, bool packed, void* points);
	private static glMapControlPointsNV_t p_glMapControlPointsNV;
	[CallingConvention(GL.CallConv)]
	public static void glMapControlPointsNV(uint32 target, uint32 index, uint32 type, int32 ustride, int32 vstride, int32 uorder, int32 vorder, bool packed, void* points) => p_glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);

	private typealias glMapParameterivNV_t = function void(uint32 target, uint32 pname, int32* @params);
	private static glMapParameterivNV_t p_glMapParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glMapParameterivNV(uint32 target, uint32 pname, int32* @params) => p_glMapParameterivNV(target, pname, @params);

	private typealias glMapParameterfvNV_t = function void(uint32 target, uint32 pname, float* @params);
	private static glMapParameterfvNV_t p_glMapParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glMapParameterfvNV(uint32 target, uint32 pname, float* @params) => p_glMapParameterfvNV(target, pname, @params);

	private typealias glGetMapControlPointsNV_t = function void(uint32 target, uint32 index, uint32 type, int32 ustride, int32 vstride, bool packed, void* points);
	private static glGetMapControlPointsNV_t p_glGetMapControlPointsNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetMapControlPointsNV(uint32 target, uint32 index, uint32 type, int32 ustride, int32 vstride, bool packed, void* points) => p_glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);

	private typealias glGetMapParameterivNV_t = function void(uint32 target, uint32 pname, int32* @params);
	private static glGetMapParameterivNV_t p_glGetMapParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetMapParameterivNV(uint32 target, uint32 pname, int32* @params) => p_glGetMapParameterivNV(target, pname, @params);

	private typealias glGetMapParameterfvNV_t = function void(uint32 target, uint32 pname, float* @params);
	private static glGetMapParameterfvNV_t p_glGetMapParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetMapParameterfvNV(uint32 target, uint32 pname, float* @params) => p_glGetMapParameterfvNV(target, pname, @params);

	private typealias glGetMapAttribParameterivNV_t = function void(uint32 target, uint32 index, uint32 pname, int32* @params);
	private static glGetMapAttribParameterivNV_t p_glGetMapAttribParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetMapAttribParameterivNV(uint32 target, uint32 index, uint32 pname, int32* @params) => p_glGetMapAttribParameterivNV(target, index, pname, @params);

	private typealias glGetMapAttribParameterfvNV_t = function void(uint32 target, uint32 index, uint32 pname, float* @params);
	private static glGetMapAttribParameterfvNV_t p_glGetMapAttribParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetMapAttribParameterfvNV(uint32 target, uint32 index, uint32 pname, float* @params) => p_glGetMapAttribParameterfvNV(target, index, pname, @params);

	private typealias glEvalMapsNV_t = function void(uint32 target, uint32 mode);
	private static glEvalMapsNV_t p_glEvalMapsNV;
	[CallingConvention(GL.CallConv)]
	public static void glEvalMapsNV(uint32 target, uint32 mode) => p_glEvalMapsNV(target, mode);

	private typealias glGetMultisamplefvNV_t = function void(uint32 pname, uint32 index, float* val);
	private static glGetMultisamplefvNV_t p_glGetMultisamplefvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetMultisamplefvNV(uint32 pname, uint32 index, float* val) => p_glGetMultisamplefvNV(pname, index, val);

	private typealias glSampleMaskIndexedNV_t = function void(uint32 index, uint32 mask);
	private static glSampleMaskIndexedNV_t p_glSampleMaskIndexedNV;
	[CallingConvention(GL.CallConv)]
	public static void glSampleMaskIndexedNV(uint32 index, uint32 mask) => p_glSampleMaskIndexedNV(index, mask);

	private typealias glTexRenderbufferNV_t = function void(TextureTarget target, uint32 renderbuffer);
	private static glTexRenderbufferNV_t p_glTexRenderbufferNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexRenderbufferNV(TextureTarget target, uint32 renderbuffer) => p_glTexRenderbufferNV(target, renderbuffer);

	private typealias glDeleteFencesNV_t = function void(int32 n, uint32* fences);
	private static glDeleteFencesNV_t p_glDeleteFencesNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteFencesNV(int32 n, uint32* fences) => p_glDeleteFencesNV(n, fences);

	private typealias glGenFencesNV_t = function void(int32 n, uint32* fences);
	private static glGenFencesNV_t p_glGenFencesNV;
	[CallingConvention(GL.CallConv)]
	public static void glGenFencesNV(int32 n, uint32* fences) => p_glGenFencesNV(n, fences);

	private typealias glIsFenceNV_t = function bool(uint32 fence);
	private static glIsFenceNV_t p_glIsFenceNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsFenceNV(uint32 fence) => p_glIsFenceNV(fence);

	private typealias glTestFenceNV_t = function bool(uint32 fence);
	private static glTestFenceNV_t p_glTestFenceNV;
	[CallingConvention(GL.CallConv)]
	public static bool glTestFenceNV(uint32 fence) => p_glTestFenceNV(fence);

	private typealias glGetFenceivNV_t = function void(uint32 fence, uint32 pname, int32* @params);
	private static glGetFenceivNV_t p_glGetFenceivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetFenceivNV(uint32 fence, uint32 pname, int32* @params) => p_glGetFenceivNV(fence, pname, @params);

	private typealias glFinishFenceNV_t = function void(uint32 fence);
	private static glFinishFenceNV_t p_glFinishFenceNV;
	[CallingConvention(GL.CallConv)]
	public static void glFinishFenceNV(uint32 fence) => p_glFinishFenceNV(fence);

	private typealias glSetFenceNV_t = function void(uint32 fence, uint32 condition);
	private static glSetFenceNV_t p_glSetFenceNV;
	[CallingConvention(GL.CallConv)]
	public static void glSetFenceNV(uint32 fence, uint32 condition) => p_glSetFenceNV(fence, condition);

	private typealias glFragmentCoverageColorNV_t = function void(uint32 color);
	private static glFragmentCoverageColorNV_t p_glFragmentCoverageColorNV;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentCoverageColorNV(uint32 color) => p_glFragmentCoverageColorNV(color);

	private typealias glProgramNamedParameter4fNV_t = function void(uint32 id, int32 len, uint8* name, float x, float y, float z, float w);
	private static glProgramNamedParameter4fNV_t p_glProgramNamedParameter4fNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramNamedParameter4fNV(uint32 id, int32 len, uint8* name, float x, float y, float z, float w) => p_glProgramNamedParameter4fNV(id, len, name, x, y, z, w);

	private typealias glProgramNamedParameter4fvNV_t = function void(uint32 id, int32 len, uint8* name, float* v);
	private static glProgramNamedParameter4fvNV_t p_glProgramNamedParameter4fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramNamedParameter4fvNV(uint32 id, int32 len, uint8* name, float* v) => p_glProgramNamedParameter4fvNV(id, len, name, v);

	private typealias glProgramNamedParameter4dNV_t = function void(uint32 id, int32 len, uint8* name, double x, double y, double z, double w);
	private static glProgramNamedParameter4dNV_t p_glProgramNamedParameter4dNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramNamedParameter4dNV(uint32 id, int32 len, uint8* name, double x, double y, double z, double w) => p_glProgramNamedParameter4dNV(id, len, name, x, y, z, w);

	private typealias glProgramNamedParameter4dvNV_t = function void(uint32 id, int32 len, uint8* name, double* v);
	private static glProgramNamedParameter4dvNV_t p_glProgramNamedParameter4dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramNamedParameter4dvNV(uint32 id, int32 len, uint8* name, double* v) => p_glProgramNamedParameter4dvNV(id, len, name, v);

	private typealias glGetProgramNamedParameterfvNV_t = function void(uint32 id, int32 len, uint8* name, float* @params);
	private static glGetProgramNamedParameterfvNV_t p_glGetProgramNamedParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramNamedParameterfvNV(uint32 id, int32 len, uint8* name, float* @params) => p_glGetProgramNamedParameterfvNV(id, len, name, @params);

	private typealias glGetProgramNamedParameterdvNV_t = function void(uint32 id, int32 len, uint8* name, double* @params);
	private static glGetProgramNamedParameterdvNV_t p_glGetProgramNamedParameterdvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramNamedParameterdvNV(uint32 id, int32 len, uint8* name, double* @params) => p_glGetProgramNamedParameterdvNV(id, len, name, @params);

	private typealias glBlitFramebufferNV_t = function void(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter);
	private static glBlitFramebufferNV_t p_glBlitFramebufferNV;
	[CallingConvention(GL.CallConv)]
	public static void glBlitFramebufferNV(int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, BlitFramebufferFilter filter) => p_glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

	private typealias glCoverageModulationTableNV_t = function void(int32 n, float* v);
	private static glCoverageModulationTableNV_t p_glCoverageModulationTableNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverageModulationTableNV(int32 n, float* v) => p_glCoverageModulationTableNV(n, v);

	private typealias glGetCoverageModulationTableNV_t = function void(int32 bufsize, float* v);
	private static glGetCoverageModulationTableNV_t p_glGetCoverageModulationTableNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetCoverageModulationTableNV(int32 bufsize, float* v) => p_glGetCoverageModulationTableNV(bufsize, v);

	private typealias glCoverageModulationNV_t = function void(uint32 components);
	private static glCoverageModulationNV_t p_glCoverageModulationNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverageModulationNV(uint32 components) => p_glCoverageModulationNV(components);

	private typealias glRenderbufferStorageMultisampleNV_t = function void(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisampleNV_t p_glRenderbufferStorageMultisampleNV;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisampleNV(RenderbufferTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height);

	private typealias glRenderbufferStorageMultisampleCoverageNV_t = function void(RenderbufferTarget target, int32 coverageSamples, int32 colorSamples, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageMultisampleCoverageNV_t p_glRenderbufferStorageMultisampleCoverageNV;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, int32 coverageSamples, int32 colorSamples, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);

	private typealias glProgramVertexLimitNV_t = function void(uint32 target, int32 limit);
	private static glProgramVertexLimitNV_t p_glProgramVertexLimitNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramVertexLimitNV(uint32 target, int32 limit) => p_glProgramVertexLimitNV(target, limit);

	private typealias glFramebufferTextureFaceEXT_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, TextureTarget face);
	private static glFramebufferTextureFaceEXT_t p_glFramebufferTextureFaceEXT;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureFaceEXT(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, TextureTarget face) => p_glFramebufferTextureFaceEXT(target, attachment, texture, level, face);

	private typealias glProgramLocalParameterI4iNV_t = function void(uint32 target, uint32 index, int32 x, int32 y, int32 z, int32 w);
	private static glProgramLocalParameterI4iNV_t p_glProgramLocalParameterI4iNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameterI4iNV(uint32 target, uint32 index, int32 x, int32 y, int32 z, int32 w) => p_glProgramLocalParameterI4iNV(target, index, x, y, z, w);

	private typealias glProgramLocalParameterI4ivNV_t = function void(uint32 target, uint32 index, int32* @params);
	private static glProgramLocalParameterI4ivNV_t p_glProgramLocalParameterI4ivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameterI4ivNV(uint32 target, uint32 index, int32* @params) => p_glProgramLocalParameterI4ivNV(target, index, @params);

	private typealias glProgramLocalParametersI4ivNV_t = function void(uint32 target, uint32 index, int32 count, int32* @params);
	private static glProgramLocalParametersI4ivNV_t p_glProgramLocalParametersI4ivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParametersI4ivNV(uint32 target, uint32 index, int32 count, int32* @params) => p_glProgramLocalParametersI4ivNV(target, index, count, @params);

	private typealias glProgramLocalParameterI4uiNV_t = function void(uint32 target, uint32 index, uint32 x, uint32 y, uint32 z, uint32 w);
	private static glProgramLocalParameterI4uiNV_t p_glProgramLocalParameterI4uiNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameterI4uiNV(uint32 target, uint32 index, uint32 x, uint32 y, uint32 z, uint32 w) => p_glProgramLocalParameterI4uiNV(target, index, x, y, z, w);

	private typealias glProgramLocalParameterI4uivNV_t = function void(uint32 target, uint32 index, uint32* @params);
	private static glProgramLocalParameterI4uivNV_t p_glProgramLocalParameterI4uivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParameterI4uivNV(uint32 target, uint32 index, uint32* @params) => p_glProgramLocalParameterI4uivNV(target, index, @params);

	private typealias glProgramLocalParametersI4uivNV_t = function void(uint32 target, uint32 index, int32 count, uint32* @params);
	private static glProgramLocalParametersI4uivNV_t p_glProgramLocalParametersI4uivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramLocalParametersI4uivNV(uint32 target, uint32 index, int32 count, uint32* @params) => p_glProgramLocalParametersI4uivNV(target, index, count, @params);

	private typealias glProgramEnvParameterI4iNV_t = function void(uint32 target, uint32 index, int32 x, int32 y, int32 z, int32 w);
	private static glProgramEnvParameterI4iNV_t p_glProgramEnvParameterI4iNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameterI4iNV(uint32 target, uint32 index, int32 x, int32 y, int32 z, int32 w) => p_glProgramEnvParameterI4iNV(target, index, x, y, z, w);

	private typealias glProgramEnvParameterI4ivNV_t = function void(uint32 target, uint32 index, int32* @params);
	private static glProgramEnvParameterI4ivNV_t p_glProgramEnvParameterI4ivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameterI4ivNV(uint32 target, uint32 index, int32* @params) => p_glProgramEnvParameterI4ivNV(target, index, @params);

	private typealias glProgramEnvParametersI4ivNV_t = function void(uint32 target, uint32 index, int32 count, int32* @params);
	private static glProgramEnvParametersI4ivNV_t p_glProgramEnvParametersI4ivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParametersI4ivNV(uint32 target, uint32 index, int32 count, int32* @params) => p_glProgramEnvParametersI4ivNV(target, index, count, @params);

	private typealias glProgramEnvParameterI4uiNV_t = function void(uint32 target, uint32 index, uint32 x, uint32 y, uint32 z, uint32 w);
	private static glProgramEnvParameterI4uiNV_t p_glProgramEnvParameterI4uiNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameterI4uiNV(uint32 target, uint32 index, uint32 x, uint32 y, uint32 z, uint32 w) => p_glProgramEnvParameterI4uiNV(target, index, x, y, z, w);

	private typealias glProgramEnvParameterI4uivNV_t = function void(uint32 target, uint32 index, uint32* @params);
	private static glProgramEnvParameterI4uivNV_t p_glProgramEnvParameterI4uivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParameterI4uivNV(uint32 target, uint32 index, uint32* @params) => p_glProgramEnvParameterI4uivNV(target, index, @params);

	private typealias glProgramEnvParametersI4uivNV_t = function void(uint32 target, uint32 index, int32 count, uint32* @params);
	private static glProgramEnvParametersI4uivNV_t p_glProgramEnvParametersI4uivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramEnvParametersI4uivNV(uint32 target, uint32 index, int32 count, uint32* @params) => p_glProgramEnvParametersI4uivNV(target, index, count, @params);

	private typealias glGetProgramLocalParameterIivNV_t = function void(uint32 target, uint32 index, int32* @params);
	private static glGetProgramLocalParameterIivNV_t p_glGetProgramLocalParameterIivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramLocalParameterIivNV(uint32 target, uint32 index, int32* @params) => p_glGetProgramLocalParameterIivNV(target, index, @params);

	private typealias glGetProgramLocalParameterIuivNV_t = function void(uint32 target, uint32 index, uint32* @params);
	private static glGetProgramLocalParameterIuivNV_t p_glGetProgramLocalParameterIuivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramLocalParameterIuivNV(uint32 target, uint32 index, uint32* @params) => p_glGetProgramLocalParameterIuivNV(target, index, @params);

	private typealias glGetProgramEnvParameterIivNV_t = function void(uint32 target, uint32 index, int32* @params);
	private static glGetProgramEnvParameterIivNV_t p_glGetProgramEnvParameterIivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramEnvParameterIivNV(uint32 target, uint32 index, int32* @params) => p_glGetProgramEnvParameterIivNV(target, index, @params);

	private typealias glGetProgramEnvParameterIuivNV_t = function void(uint32 target, uint32 index, uint32* @params);
	private static glGetProgramEnvParameterIuivNV_t p_glGetProgramEnvParameterIuivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramEnvParameterIuivNV(uint32 target, uint32 index, uint32* @params) => p_glGetProgramEnvParameterIuivNV(target, index, @params);

	private typealias glProgramSubroutineParametersuivNV_t = function void(uint32 target, int32 count, uint32* @params);
	private static glProgramSubroutineParametersuivNV_t p_glProgramSubroutineParametersuivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramSubroutineParametersuivNV(uint32 target, int32 count, uint32* @params) => p_glProgramSubroutineParametersuivNV(target, count, @params);

	private typealias glGetProgramSubroutineParameteruivNV_t = function void(uint32 target, uint32 index, uint32* param);
	private static glGetProgramSubroutineParameteruivNV_t p_glGetProgramSubroutineParameteruivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramSubroutineParameteruivNV(uint32 target, uint32 index, uint32* param) => p_glGetProgramSubroutineParameteruivNV(target, index, param);

	private typealias glVertex2hNV_t = function void(uint16 x, uint16 y);
	private static glVertex2hNV_t p_glVertex2hNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertex2hNV(uint16 x, uint16 y) => p_glVertex2hNV(x, y);

	private typealias glVertex2hvNV_t = function void(void* v);
	private static glVertex2hvNV_t p_glVertex2hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertex2hvNV(void* v) => p_glVertex2hvNV(v);

	private typealias glVertex3hNV_t = function void(uint16 x, uint16 y, uint16 z);
	private static glVertex3hNV_t p_glVertex3hNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertex3hNV(uint16 x, uint16 y, uint16 z) => p_glVertex3hNV(x, y, z);

	private typealias glVertex3hvNV_t = function void(void* v);
	private static glVertex3hvNV_t p_glVertex3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertex3hvNV(void* v) => p_glVertex3hvNV(v);

	private typealias glVertex4hNV_t = function void(uint16 x, uint16 y, uint16 z, uint16 w);
	private static glVertex4hNV_t p_glVertex4hNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertex4hNV(uint16 x, uint16 y, uint16 z, uint16 w) => p_glVertex4hNV(x, y, z, w);

	private typealias glVertex4hvNV_t = function void(void* v);
	private static glVertex4hvNV_t p_glVertex4hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertex4hvNV(void* v) => p_glVertex4hvNV(v);

	private typealias glNormal3hNV_t = function void(uint16 nx, uint16 ny, uint16 nz);
	private static glNormal3hNV_t p_glNormal3hNV;
	[CallingConvention(GL.CallConv)]
	public static void glNormal3hNV(uint16 nx, uint16 ny, uint16 nz) => p_glNormal3hNV(nx, ny, nz);

	private typealias glNormal3hvNV_t = function void(void* v);
	private static glNormal3hvNV_t p_glNormal3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glNormal3hvNV(void* v) => p_glNormal3hvNV(v);

	private typealias glColor3hNV_t = function void(uint16 red, uint16 green, uint16 blue);
	private static glColor3hNV_t p_glColor3hNV;
	[CallingConvention(GL.CallConv)]
	public static void glColor3hNV(uint16 red, uint16 green, uint16 blue) => p_glColor3hNV(red, green, blue);

	private typealias glColor3hvNV_t = function void(void* v);
	private static glColor3hvNV_t p_glColor3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glColor3hvNV(void* v) => p_glColor3hvNV(v);

	private typealias glColor4hNV_t = function void(uint16 red, uint16 green, uint16 blue, uint16 alpha);
	private static glColor4hNV_t p_glColor4hNV;
	[CallingConvention(GL.CallConv)]
	public static void glColor4hNV(uint16 red, uint16 green, uint16 blue, uint16 alpha) => p_glColor4hNV(red, green, blue, alpha);

	private typealias glColor4hvNV_t = function void(void* v);
	private static glColor4hvNV_t p_glColor4hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glColor4hvNV(void* v) => p_glColor4hvNV(v);

	private typealias glTexCoord1hNV_t = function void(uint16 s);
	private static glTexCoord1hNV_t p_glTexCoord1hNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord1hNV(uint16 s) => p_glTexCoord1hNV(s);

	private typealias glTexCoord1hvNV_t = function void(void* v);
	private static glTexCoord1hvNV_t p_glTexCoord1hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord1hvNV(void* v) => p_glTexCoord1hvNV(v);

	private typealias glTexCoord2hNV_t = function void(uint16 s, uint16 t);
	private static glTexCoord2hNV_t p_glTexCoord2hNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2hNV(uint16 s, uint16 t) => p_glTexCoord2hNV(s, t);

	private typealias glTexCoord2hvNV_t = function void(void* v);
	private static glTexCoord2hvNV_t p_glTexCoord2hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2hvNV(void* v) => p_glTexCoord2hvNV(v);

	private typealias glTexCoord3hNV_t = function void(uint16 s, uint16 t, uint16 r);
	private static glTexCoord3hNV_t p_glTexCoord3hNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord3hNV(uint16 s, uint16 t, uint16 r) => p_glTexCoord3hNV(s, t, r);

	private typealias glTexCoord3hvNV_t = function void(void* v);
	private static glTexCoord3hvNV_t p_glTexCoord3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord3hvNV(void* v) => p_glTexCoord3hvNV(v);

	private typealias glTexCoord4hNV_t = function void(uint16 s, uint16 t, uint16 r, uint16 q);
	private static glTexCoord4hNV_t p_glTexCoord4hNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4hNV(uint16 s, uint16 t, uint16 r, uint16 q) => p_glTexCoord4hNV(s, t, r, q);

	private typealias glTexCoord4hvNV_t = function void(void* v);
	private static glTexCoord4hvNV_t p_glTexCoord4hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4hvNV(void* v) => p_glTexCoord4hvNV(v);

	private typealias glMultiTexCoord1hNV_t = function void(TextureUnit target, uint16 s);
	private static glMultiTexCoord1hNV_t p_glMultiTexCoord1hNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1hNV(TextureUnit target, uint16 s) => p_glMultiTexCoord1hNV(target, s);

	private typealias glMultiTexCoord1hvNV_t = function void(TextureUnit target, void* v);
	private static glMultiTexCoord1hvNV_t p_glMultiTexCoord1hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1hvNV(TextureUnit target, void* v) => p_glMultiTexCoord1hvNV(target, v);

	private typealias glMultiTexCoord2hNV_t = function void(TextureUnit target, uint16 s, uint16 t);
	private static glMultiTexCoord2hNV_t p_glMultiTexCoord2hNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2hNV(TextureUnit target, uint16 s, uint16 t) => p_glMultiTexCoord2hNV(target, s, t);

	private typealias glMultiTexCoord2hvNV_t = function void(TextureUnit target, void* v);
	private static glMultiTexCoord2hvNV_t p_glMultiTexCoord2hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2hvNV(TextureUnit target, void* v) => p_glMultiTexCoord2hvNV(target, v);

	private typealias glMultiTexCoord3hNV_t = function void(TextureUnit target, uint16 s, uint16 t, uint16 r);
	private static glMultiTexCoord3hNV_t p_glMultiTexCoord3hNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3hNV(TextureUnit target, uint16 s, uint16 t, uint16 r) => p_glMultiTexCoord3hNV(target, s, t, r);

	private typealias glMultiTexCoord3hvNV_t = function void(TextureUnit target, void* v);
	private static glMultiTexCoord3hvNV_t p_glMultiTexCoord3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3hvNV(TextureUnit target, void* v) => p_glMultiTexCoord3hvNV(target, v);

	private typealias glMultiTexCoord4hNV_t = function void(TextureUnit target, uint16 s, uint16 t, uint16 r, uint16 q);
	private static glMultiTexCoord4hNV_t p_glMultiTexCoord4hNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4hNV(TextureUnit target, uint16 s, uint16 t, uint16 r, uint16 q) => p_glMultiTexCoord4hNV(target, s, t, r, q);

	private typealias glMultiTexCoord4hvNV_t = function void(TextureUnit target, void* v);
	private static glMultiTexCoord4hvNV_t p_glMultiTexCoord4hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4hvNV(TextureUnit target, void* v) => p_glMultiTexCoord4hvNV(target, v);

	private typealias glFogCoordhNV_t = function void(uint16 fog);
	private static glFogCoordhNV_t p_glFogCoordhNV;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoordhNV(uint16 fog) => p_glFogCoordhNV(fog);

	private typealias glFogCoordhvNV_t = function void(void* fog);
	private static glFogCoordhvNV_t p_glFogCoordhvNV;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoordhvNV(void* fog) => p_glFogCoordhvNV(fog);

	private typealias glSecondaryColor3hNV_t = function void(uint16 red, uint16 green, uint16 blue);
	private static glSecondaryColor3hNV_t p_glSecondaryColor3hNV;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3hNV(uint16 red, uint16 green, uint16 blue) => p_glSecondaryColor3hNV(red, green, blue);

	private typealias glSecondaryColor3hvNV_t = function void(void* v);
	private static glSecondaryColor3hvNV_t p_glSecondaryColor3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColor3hvNV(void* v) => p_glSecondaryColor3hvNV(v);

	private typealias glVertexWeighthNV_t = function void(uint16 weight);
	private static glVertexWeighthNV_t p_glVertexWeighthNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexWeighthNV(uint16 weight) => p_glVertexWeighthNV(weight);

	private typealias glVertexWeighthvNV_t = function void(void* weight);
	private static glVertexWeighthvNV_t p_glVertexWeighthvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexWeighthvNV(void* weight) => p_glVertexWeighthvNV(weight);

	private typealias glVertexAttrib1hNV_t = function void(uint32 index, uint16 x);
	private static glVertexAttrib1hNV_t p_glVertexAttrib1hNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1hNV(uint32 index, uint16 x) => p_glVertexAttrib1hNV(index, x);

	private typealias glVertexAttrib1hvNV_t = function void(uint32 index, void* v);
	private static glVertexAttrib1hvNV_t p_glVertexAttrib1hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1hvNV(uint32 index, void* v) => p_glVertexAttrib1hvNV(index, v);

	private typealias glVertexAttrib2hNV_t = function void(uint32 index, uint16 x, uint16 y);
	private static glVertexAttrib2hNV_t p_glVertexAttrib2hNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2hNV(uint32 index, uint16 x, uint16 y) => p_glVertexAttrib2hNV(index, x, y);

	private typealias glVertexAttrib2hvNV_t = function void(uint32 index, void* v);
	private static glVertexAttrib2hvNV_t p_glVertexAttrib2hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2hvNV(uint32 index, void* v) => p_glVertexAttrib2hvNV(index, v);

	private typealias glVertexAttrib3hNV_t = function void(uint32 index, uint16 x, uint16 y, uint16 z);
	private static glVertexAttrib3hNV_t p_glVertexAttrib3hNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3hNV(uint32 index, uint16 x, uint16 y, uint16 z) => p_glVertexAttrib3hNV(index, x, y, z);

	private typealias glVertexAttrib3hvNV_t = function void(uint32 index, void* v);
	private static glVertexAttrib3hvNV_t p_glVertexAttrib3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3hvNV(uint32 index, void* v) => p_glVertexAttrib3hvNV(index, v);

	private typealias glVertexAttrib4hNV_t = function void(uint32 index, uint16 x, uint16 y, uint16 z, uint16 w);
	private static glVertexAttrib4hNV_t p_glVertexAttrib4hNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4hNV(uint32 index, uint16 x, uint16 y, uint16 z, uint16 w) => p_glVertexAttrib4hNV(index, x, y, z, w);

	private typealias glVertexAttrib4hvNV_t = function void(uint32 index, void* v);
	private static glVertexAttrib4hvNV_t p_glVertexAttrib4hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4hvNV(uint32 index, void* v) => p_glVertexAttrib4hvNV(index, v);

	private typealias glVertexAttribs1hvNV_t = function void(uint32 index, int32 n, void* v);
	private static glVertexAttribs1hvNV_t p_glVertexAttribs1hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs1hvNV(uint32 index, int32 n, void* v) => p_glVertexAttribs1hvNV(index, n, v);

	private typealias glVertexAttribs2hvNV_t = function void(uint32 index, int32 n, void* v);
	private static glVertexAttribs2hvNV_t p_glVertexAttribs2hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs2hvNV(uint32 index, int32 n, void* v) => p_glVertexAttribs2hvNV(index, n, v);

	private typealias glVertexAttribs3hvNV_t = function void(uint32 index, int32 n, void* v);
	private static glVertexAttribs3hvNV_t p_glVertexAttribs3hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs3hvNV(uint32 index, int32 n, void* v) => p_glVertexAttribs3hvNV(index, n, v);

	private typealias glVertexAttribs4hvNV_t = function void(uint32 index, int32 n, void* v);
	private static glVertexAttribs4hvNV_t p_glVertexAttribs4hvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs4hvNV(uint32 index, int32 n, void* v) => p_glVertexAttribs4hvNV(index, n, v);

	private typealias glVertexAttribDivisorNV_t = function void(uint32 index, uint32 divisor);
	private static glVertexAttribDivisorNV_t p_glVertexAttribDivisorNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribDivisorNV(uint32 index, uint32 divisor) => p_glVertexAttribDivisorNV(index, divisor);

	private typealias glGetInternalformatSampleivNV_t = function void(TextureTarget target, InternalFormat internalformat, int32 samples, InternalFormatPName pname, int32 bufSize, int32* @params);
	private static glGetInternalformatSampleivNV_t p_glGetInternalformatSampleivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int32 samples, InternalFormatPName pname, int32 bufSize, int32* @params) => p_glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, @params);

	private typealias glRenderGpuMaskNV_t = function void(uint32 mask);
	private static glRenderGpuMaskNV_t p_glRenderGpuMaskNV;
	[CallingConvention(GL.CallConv)]
	public static void glRenderGpuMaskNV(uint32 mask) => p_glRenderGpuMaskNV(mask);

	private typealias glMulticastBufferSubDataNV_t = function void(uint32 gpuMask, uint32 buffer, void* offset, int32 size, void* data);
	private static glMulticastBufferSubDataNV_t p_glMulticastBufferSubDataNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastBufferSubDataNV(uint32 gpuMask, uint32 buffer, void* offset, int32 size, void* data) => p_glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);

	private typealias glMulticastCopyBufferSubDataNV_t = function void(uint32 readGpu, uint32 writeGpuMask, uint32 readBuffer, uint32 writeBuffer, void* readOffset, void* writeOffset, int32 size);
	private static glMulticastCopyBufferSubDataNV_t p_glMulticastCopyBufferSubDataNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastCopyBufferSubDataNV(uint32 readGpu, uint32 writeGpuMask, uint32 readBuffer, uint32 writeBuffer, void* readOffset, void* writeOffset, int32 size) => p_glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);

	private typealias glMulticastCopyImageSubDataNV_t = function void(uint32 srcGpu, uint32 dstGpuMask, uint32 srcName, uint32 srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, uint32 dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth);
	private static glMulticastCopyImageSubDataNV_t p_glMulticastCopyImageSubDataNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastCopyImageSubDataNV(uint32 srcGpu, uint32 dstGpuMask, uint32 srcName, uint32 srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, uint32 dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth) => p_glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

	private typealias glMulticastBlitFramebufferNV_t = function void(uint32 srcGpu, uint32 dstGpu, int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, uint32 filter);
	private static glMulticastBlitFramebufferNV_t p_glMulticastBlitFramebufferNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastBlitFramebufferNV(uint32 srcGpu, uint32 dstGpu, int32 srcX0, int32 srcY0, int32 srcX1, int32 srcY1, int32 dstX0, int32 dstY0, int32 dstX1, int32 dstY1, uint32 mask, uint32 filter) => p_glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

	private typealias glMulticastFramebufferSampleLocationsfvNV_t = function void(uint32 gpu, uint32 framebuffer, uint32 start, int32 count, float* v);
	private static glMulticastFramebufferSampleLocationsfvNV_t p_glMulticastFramebufferSampleLocationsfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastFramebufferSampleLocationsfvNV(uint32 gpu, uint32 framebuffer, uint32 start, int32 count, float* v) => p_glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v);

	private typealias glMulticastBarrierNV_t = function void();
	private static glMulticastBarrierNV_t p_glMulticastBarrierNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastBarrierNV() => p_glMulticastBarrierNV();

	private typealias glMulticastWaitSyncNV_t = function void(uint32 signalGpu, uint32 waitGpuMask);
	private static glMulticastWaitSyncNV_t p_glMulticastWaitSyncNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastWaitSyncNV(uint32 signalGpu, uint32 waitGpuMask) => p_glMulticastWaitSyncNV(signalGpu, waitGpuMask);

	private typealias glMulticastGetQueryObjectivNV_t = function void(uint32 gpu, uint32 id, uint32 pname, int32* @params);
	private static glMulticastGetQueryObjectivNV_t p_glMulticastGetQueryObjectivNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastGetQueryObjectivNV(uint32 gpu, uint32 id, uint32 pname, int32* @params) => p_glMulticastGetQueryObjectivNV(gpu, id, pname, @params);

	private typealias glMulticastGetQueryObjectuivNV_t = function void(uint32 gpu, uint32 id, uint32 pname, uint32* @params);
	private static glMulticastGetQueryObjectuivNV_t p_glMulticastGetQueryObjectuivNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastGetQueryObjectuivNV(uint32 gpu, uint32 id, uint32 pname, uint32* @params) => p_glMulticastGetQueryObjectuivNV(gpu, id, pname, @params);

	private typealias glMulticastGetQueryObjecti64vNV_t = function void(uint32 gpu, uint32 id, uint32 pname, int64* @params);
	private static glMulticastGetQueryObjecti64vNV_t p_glMulticastGetQueryObjecti64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastGetQueryObjecti64vNV(uint32 gpu, uint32 id, uint32 pname, int64* @params) => p_glMulticastGetQueryObjecti64vNV(gpu, id, pname, @params);

	private typealias glMulticastGetQueryObjectui64vNV_t = function void(uint32 gpu, uint32 id, uint32 pname, uint64* @params);
	private static glMulticastGetQueryObjectui64vNV_t p_glMulticastGetQueryObjectui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glMulticastGetQueryObjectui64vNV(uint32 gpu, uint32 id, uint32 pname, uint64* @params) => p_glMulticastGetQueryObjectui64vNV(gpu, id, pname, @params);

	private typealias glGetMemoryObjectDetachedResourcesuivNV_t = function void(uint32 memory, uint32 pname, int32 first, int32 count, uint32* @params);
	private static glGetMemoryObjectDetachedResourcesuivNV_t p_glGetMemoryObjectDetachedResourcesuivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetMemoryObjectDetachedResourcesuivNV(uint32 memory, uint32 pname, int32 first, int32 count, uint32* @params) => p_glGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, @params);

	private typealias glResetMemoryObjectParameterNV_t = function void(uint32 memory, uint32 pname);
	private static glResetMemoryObjectParameterNV_t p_glResetMemoryObjectParameterNV;
	[CallingConvention(GL.CallConv)]
	public static void glResetMemoryObjectParameterNV(uint32 memory, uint32 pname) => p_glResetMemoryObjectParameterNV(memory, pname);

	private typealias glTexAttachMemoryNV_t = function void(TextureTarget target, uint32 memory, uint64 offset);
	private static glTexAttachMemoryNV_t p_glTexAttachMemoryNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexAttachMemoryNV(TextureTarget target, uint32 memory, uint64 offset) => p_glTexAttachMemoryNV(target, memory, offset);

	private typealias glBufferAttachMemoryNV_t = function void(BufferTargetARB target, uint32 memory, uint64 offset);
	private static glBufferAttachMemoryNV_t p_glBufferAttachMemoryNV;
	[CallingConvention(GL.CallConv)]
	public static void glBufferAttachMemoryNV(BufferTargetARB target, uint32 memory, uint64 offset) => p_glBufferAttachMemoryNV(target, memory, offset);

	private typealias glTextureAttachMemoryNV_t = function void(uint32 texture, uint32 memory, uint64 offset);
	private static glTextureAttachMemoryNV_t p_glTextureAttachMemoryNV;
	[CallingConvention(GL.CallConv)]
	public static void glTextureAttachMemoryNV(uint32 texture, uint32 memory, uint64 offset) => p_glTextureAttachMemoryNV(texture, memory, offset);

	private typealias glNamedBufferAttachMemoryNV_t = function void(uint32 buffer, uint32 memory, uint64 offset);
	private static glNamedBufferAttachMemoryNV_t p_glNamedBufferAttachMemoryNV;
	[CallingConvention(GL.CallConv)]
	public static void glNamedBufferAttachMemoryNV(uint32 buffer, uint32 memory, uint64 offset) => p_glNamedBufferAttachMemoryNV(buffer, memory, offset);

	private typealias glDrawMeshTasksNV_t = function void(uint32 first, uint32 count);
	private static glDrawMeshTasksNV_t p_glDrawMeshTasksNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawMeshTasksNV(uint32 first, uint32 count) => p_glDrawMeshTasksNV(first, count);

	private typealias glDrawMeshTasksIndirectNV_t = function void(void* indirect);
	private static glDrawMeshTasksIndirectNV_t p_glDrawMeshTasksIndirectNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawMeshTasksIndirectNV(void* indirect) => p_glDrawMeshTasksIndirectNV(indirect);

	private typealias glMultiDrawMeshTasksIndirectNV_t = function void(void* indirect, int32 drawcount, int32 stride);
	private static glMultiDrawMeshTasksIndirectNV_t p_glMultiDrawMeshTasksIndirectNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawMeshTasksIndirectNV(void* indirect, int32 drawcount, int32 stride) => p_glMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);

	private typealias glMultiDrawMeshTasksIndirectCountNV_t = function void(void* indirect, void* drawcount, int32 maxdrawcount, int32 stride);
	private static glMultiDrawMeshTasksIndirectCountNV_t p_glMultiDrawMeshTasksIndirectCountNV;
	[CallingConvention(GL.CallConv)]
	public static void glMultiDrawMeshTasksIndirectCountNV(void* indirect, void* drawcount, int32 maxdrawcount, int32 stride) => p_glMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);

	private typealias glUniformMatrix2x3fvNV_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix2x3fvNV_t p_glUniformMatrix2x3fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2x3fvNV(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix2x3fvNV(location, count, transpose, value);

	private typealias glUniformMatrix3x2fvNV_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix3x2fvNV_t p_glUniformMatrix3x2fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3x2fvNV(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix3x2fvNV(location, count, transpose, value);

	private typealias glUniformMatrix2x4fvNV_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix2x4fvNV_t p_glUniformMatrix2x4fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix2x4fvNV(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix2x4fvNV(location, count, transpose, value);

	private typealias glUniformMatrix4x2fvNV_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix4x2fvNV_t p_glUniformMatrix4x2fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4x2fvNV(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix4x2fvNV(location, count, transpose, value);

	private typealias glUniformMatrix3x4fvNV_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix3x4fvNV_t p_glUniformMatrix3x4fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix3x4fvNV(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix3x4fvNV(location, count, transpose, value);

	private typealias glUniformMatrix4x3fvNV_t = function void(int32 location, int32 count, bool transpose, float* value);
	private static glUniformMatrix4x3fvNV_t p_glUniformMatrix4x3fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformMatrix4x3fvNV(int32 location, int32 count, bool transpose, float* value) => p_glUniformMatrix4x3fvNV(location, count, transpose, value);

	private typealias glGenOcclusionQueriesNV_t = function void(int32 n, uint32* ids);
	private static glGenOcclusionQueriesNV_t p_glGenOcclusionQueriesNV;
	[CallingConvention(GL.CallConv)]
	public static void glGenOcclusionQueriesNV(int32 n, uint32* ids) => p_glGenOcclusionQueriesNV(n, ids);

	private typealias glDeleteOcclusionQueriesNV_t = function void(int32 n, uint32* ids);
	private static glDeleteOcclusionQueriesNV_t p_glDeleteOcclusionQueriesNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteOcclusionQueriesNV(int32 n, uint32* ids) => p_glDeleteOcclusionQueriesNV(n, ids);

	private typealias glIsOcclusionQueryNV_t = function bool(uint32 id);
	private static glIsOcclusionQueryNV_t p_glIsOcclusionQueryNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsOcclusionQueryNV(uint32 id) => p_glIsOcclusionQueryNV(id);

	private typealias glBeginOcclusionQueryNV_t = function void(uint32 id);
	private static glBeginOcclusionQueryNV_t p_glBeginOcclusionQueryNV;
	[CallingConvention(GL.CallConv)]
	public static void glBeginOcclusionQueryNV(uint32 id) => p_glBeginOcclusionQueryNV(id);

	private typealias glEndOcclusionQueryNV_t = function void();
	private static glEndOcclusionQueryNV_t p_glEndOcclusionQueryNV;
	[CallingConvention(GL.CallConv)]
	public static void glEndOcclusionQueryNV() => p_glEndOcclusionQueryNV();

	private typealias glGetOcclusionQueryivNV_t = function void(uint32 id, uint32 pname, int32* @params);
	private static glGetOcclusionQueryivNV_t p_glGetOcclusionQueryivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetOcclusionQueryivNV(uint32 id, uint32 pname, int32* @params) => p_glGetOcclusionQueryivNV(id, pname, @params);

	private typealias glGetOcclusionQueryuivNV_t = function void(uint32 id, uint32 pname, uint32* @params);
	private static glGetOcclusionQueryuivNV_t p_glGetOcclusionQueryuivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetOcclusionQueryuivNV(uint32 id, uint32 pname, uint32* @params) => p_glGetOcclusionQueryuivNV(id, pname, @params);

	private typealias glProgramBufferParametersfvNV_t = function void(uint32 target, uint32 bindingIndex, uint32 wordIndex, int32 count, float* @params);
	private static glProgramBufferParametersfvNV_t p_glProgramBufferParametersfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramBufferParametersfvNV(uint32 target, uint32 bindingIndex, uint32 wordIndex, int32 count, float* @params) => p_glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, @params);

	private typealias glProgramBufferParametersIivNV_t = function void(uint32 target, uint32 bindingIndex, uint32 wordIndex, int32 count, int32* @params);
	private static glProgramBufferParametersIivNV_t p_glProgramBufferParametersIivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramBufferParametersIivNV(uint32 target, uint32 bindingIndex, uint32 wordIndex, int32 count, int32* @params) => p_glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, @params);

	private typealias glProgramBufferParametersIuivNV_t = function void(uint32 target, uint32 bindingIndex, uint32 wordIndex, int32 count, uint32* @params);
	private static glProgramBufferParametersIuivNV_t p_glProgramBufferParametersIuivNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramBufferParametersIuivNV(uint32 target, uint32 bindingIndex, uint32 wordIndex, int32 count, uint32* @params) => p_glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, @params);

	private typealias glGenPathsNV_t = function uint32(int32 range);
	private static glGenPathsNV_t p_glGenPathsNV;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGenPathsNV(int32 range) => p_glGenPathsNV(range);

	private typealias glDeletePathsNV_t = function void(uint32 path, int32 range);
	private static glDeletePathsNV_t p_glDeletePathsNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeletePathsNV(uint32 path, int32 range) => p_glDeletePathsNV(path, range);

	private typealias glIsPathNV_t = function bool(uint32 path);
	private static glIsPathNV_t p_glIsPathNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsPathNV(uint32 path) => p_glIsPathNV(path);

	private typealias glPathCommandsNV_t = function void(uint32 path, int32 numCommands, uint8* commands, int32 numCoords, uint32 coordType, void* coords);
	private static glPathCommandsNV_t p_glPathCommandsNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathCommandsNV(uint32 path, int32 numCommands, uint8* commands, int32 numCoords, uint32 coordType, void* coords) => p_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);

	private typealias glPathCoordsNV_t = function void(uint32 path, int32 numCoords, uint32 coordType, void* coords);
	private static glPathCoordsNV_t p_glPathCoordsNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathCoordsNV(uint32 path, int32 numCoords, uint32 coordType, void* coords) => p_glPathCoordsNV(path, numCoords, coordType, coords);

	private typealias glPathSubCommandsNV_t = function void(uint32 path, int32 commandStart, int32 commandsToDelete, int32 numCommands, uint8* commands, int32 numCoords, uint32 coordType, void* coords);
	private static glPathSubCommandsNV_t p_glPathSubCommandsNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathSubCommandsNV(uint32 path, int32 commandStart, int32 commandsToDelete, int32 numCommands, uint8* commands, int32 numCoords, uint32 coordType, void* coords) => p_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);

	private typealias glPathSubCoordsNV_t = function void(uint32 path, int32 coordStart, int32 numCoords, uint32 coordType, void* coords);
	private static glPathSubCoordsNV_t p_glPathSubCoordsNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathSubCoordsNV(uint32 path, int32 coordStart, int32 numCoords, uint32 coordType, void* coords) => p_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);

	private typealias glPathStringNV_t = function void(uint32 path, PathStringFormat format, int32 length, void* pathString);
	private static glPathStringNV_t p_glPathStringNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathStringNV(uint32 path, PathStringFormat format, int32 length, void* pathString) => p_glPathStringNV(path, format, length, pathString);

	private typealias glPathGlyphsNV_t = function void(uint32 firstPathName, PathFontTarget fontTarget, void* fontName, uint32 fontStyle, int32 numGlyphs, PathElementType type, void* charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint32 pathParameterTemplate, float emScale);
	private static glPathGlyphsNV_t p_glPathGlyphsNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathGlyphsNV(uint32 firstPathName, PathFontTarget fontTarget, void* fontName, uint32 fontStyle, int32 numGlyphs, PathElementType type, void* charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint32 pathParameterTemplate, float emScale) => p_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);

	private typealias glPathGlyphRangeNV_t = function void(uint32 firstPathName, PathFontTarget fontTarget, void* fontName, uint32 fontStyle, uint32 firstGlyph, int32 numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint32 pathParameterTemplate, float emScale);
	private static glPathGlyphRangeNV_t p_glPathGlyphRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathGlyphRangeNV(uint32 firstPathName, PathFontTarget fontTarget, void* fontName, uint32 fontStyle, uint32 firstGlyph, int32 numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint32 pathParameterTemplate, float emScale) => p_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);

	private typealias glWeightPathsNV_t = function void(uint32 resultPath, int32 numPaths, uint32* paths, float* weights);
	private static glWeightPathsNV_t p_glWeightPathsNV;
	[CallingConvention(GL.CallConv)]
	public static void glWeightPathsNV(uint32 resultPath, int32 numPaths, uint32* paths, float* weights) => p_glWeightPathsNV(resultPath, numPaths, paths, weights);

	private typealias glCopyPathNV_t = function void(uint32 resultPath, uint32 srcPath);
	private static glCopyPathNV_t p_glCopyPathNV;
	[CallingConvention(GL.CallConv)]
	public static void glCopyPathNV(uint32 resultPath, uint32 srcPath) => p_glCopyPathNV(resultPath, srcPath);

	private typealias glInterpolatePathsNV_t = function void(uint32 resultPath, uint32 pathA, uint32 pathB, float weight);
	private static glInterpolatePathsNV_t p_glInterpolatePathsNV;
	[CallingConvention(GL.CallConv)]
	public static void glInterpolatePathsNV(uint32 resultPath, uint32 pathA, uint32 pathB, float weight) => p_glInterpolatePathsNV(resultPath, pathA, pathB, weight);

	private typealias glTransformPathNV_t = function void(uint32 resultPath, uint32 srcPath, PathTransformType transformType, float* transformValues);
	private static glTransformPathNV_t p_glTransformPathNV;
	[CallingConvention(GL.CallConv)]
	public static void glTransformPathNV(uint32 resultPath, uint32 srcPath, PathTransformType transformType, float* transformValues) => p_glTransformPathNV(resultPath, srcPath, transformType, transformValues);

	private typealias glPathParameterivNV_t = function void(uint32 path, PathParameter pname, int32* value);
	private static glPathParameterivNV_t p_glPathParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathParameterivNV(uint32 path, PathParameter pname, int32* value) => p_glPathParameterivNV(path, pname, value);

	private typealias glPathParameteriNV_t = function void(uint32 path, PathParameter pname, int32 value);
	private static glPathParameteriNV_t p_glPathParameteriNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathParameteriNV(uint32 path, PathParameter pname, int32 value) => p_glPathParameteriNV(path, pname, value);

	private typealias glPathParameterfvNV_t = function void(uint32 path, PathParameter pname, float* value);
	private static glPathParameterfvNV_t p_glPathParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathParameterfvNV(uint32 path, PathParameter pname, float* value) => p_glPathParameterfvNV(path, pname, value);

	private typealias glPathParameterfNV_t = function void(uint32 path, PathParameter pname, float value);
	private static glPathParameterfNV_t p_glPathParameterfNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathParameterfNV(uint32 path, PathParameter pname, float value) => p_glPathParameterfNV(path, pname, value);

	private typealias glPathDashArrayNV_t = function void(uint32 path, int32 dashCount, float* dashArray);
	private static glPathDashArrayNV_t p_glPathDashArrayNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathDashArrayNV(uint32 path, int32 dashCount, float* dashArray) => p_glPathDashArrayNV(path, dashCount, dashArray);

	private typealias glPathStencilFuncNV_t = function void(StencilFunction func, int32 @ref, uint32 mask);
	private static glPathStencilFuncNV_t p_glPathStencilFuncNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathStencilFuncNV(StencilFunction func, int32 @ref, uint32 mask) => p_glPathStencilFuncNV(func, @ref, mask);

	private typealias glPathStencilDepthOffsetNV_t = function void(float factor, float units);
	private static glPathStencilDepthOffsetNV_t p_glPathStencilDepthOffsetNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathStencilDepthOffsetNV(float factor, float units) => p_glPathStencilDepthOffsetNV(factor, units);

	private typealias glStencilFillPathNV_t = function void(uint32 path, PathFillMode fillMode, uint32 mask);
	private static glStencilFillPathNV_t p_glStencilFillPathNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilFillPathNV(uint32 path, PathFillMode fillMode, uint32 mask) => p_glStencilFillPathNV(path, fillMode, mask);

	private typealias glStencilStrokePathNV_t = function void(uint32 path, int32 reference, uint32 mask);
	private static glStencilStrokePathNV_t p_glStencilStrokePathNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilStrokePathNV(uint32 path, int32 reference, uint32 mask) => p_glStencilStrokePathNV(path, reference, mask);

	private typealias glStencilFillPathInstancedNV_t = function void(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, PathFillMode fillMode, uint32 mask, PathTransformType transformType, float* transformValues);
	private static glStencilFillPathInstancedNV_t p_glStencilFillPathInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilFillPathInstancedNV(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, PathFillMode fillMode, uint32 mask, PathTransformType transformType, float* transformValues) => p_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);

	private typealias glStencilStrokePathInstancedNV_t = function void(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, int32 reference, uint32 mask, PathTransformType transformType, float* transformValues);
	private static glStencilStrokePathInstancedNV_t p_glStencilStrokePathInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilStrokePathInstancedNV(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, int32 reference, uint32 mask, PathTransformType transformType, float* transformValues) => p_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);

	private typealias glPathCoverDepthFuncNV_t = function void(DepthFunction func);
	private static glPathCoverDepthFuncNV_t p_glPathCoverDepthFuncNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathCoverDepthFuncNV(DepthFunction func) => p_glPathCoverDepthFuncNV(func);

	private typealias glCoverFillPathNV_t = function void(uint32 path, PathCoverMode coverMode);
	private static glCoverFillPathNV_t p_glCoverFillPathNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverFillPathNV(uint32 path, PathCoverMode coverMode) => p_glCoverFillPathNV(path, coverMode);

	private typealias glCoverStrokePathNV_t = function void(uint32 path, PathCoverMode coverMode);
	private static glCoverStrokePathNV_t p_glCoverStrokePathNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverStrokePathNV(uint32 path, PathCoverMode coverMode) => p_glCoverStrokePathNV(path, coverMode);

	private typealias glCoverFillPathInstancedNV_t = function void(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, PathCoverMode coverMode, PathTransformType transformType, float* transformValues);
	private static glCoverFillPathInstancedNV_t p_glCoverFillPathInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverFillPathInstancedNV(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, PathCoverMode coverMode, PathTransformType transformType, float* transformValues) => p_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);

	private typealias glCoverStrokePathInstancedNV_t = function void(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, PathCoverMode coverMode, PathTransformType transformType, float* transformValues);
	private static glCoverStrokePathInstancedNV_t p_glCoverStrokePathInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glCoverStrokePathInstancedNV(int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, PathCoverMode coverMode, PathTransformType transformType, float* transformValues) => p_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);

	private typealias glGetPathParameterivNV_t = function void(uint32 path, PathParameter pname, int32* value);
	private static glGetPathParameterivNV_t p_glGetPathParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathParameterivNV(uint32 path, PathParameter pname, int32* value) => p_glGetPathParameterivNV(path, pname, value);

	private typealias glGetPathParameterfvNV_t = function void(uint32 path, PathParameter pname, float* value);
	private static glGetPathParameterfvNV_t p_glGetPathParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathParameterfvNV(uint32 path, PathParameter pname, float* value) => p_glGetPathParameterfvNV(path, pname, value);

	private typealias glGetPathCommandsNV_t = function void(uint32 path, uint8* commands);
	private static glGetPathCommandsNV_t p_glGetPathCommandsNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathCommandsNV(uint32 path, uint8* commands) => p_glGetPathCommandsNV(path, commands);

	private typealias glGetPathCoordsNV_t = function void(uint32 path, float* coords);
	private static glGetPathCoordsNV_t p_glGetPathCoordsNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathCoordsNV(uint32 path, float* coords) => p_glGetPathCoordsNV(path, coords);

	private typealias glGetPathDashArrayNV_t = function void(uint32 path, float* dashArray);
	private static glGetPathDashArrayNV_t p_glGetPathDashArrayNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathDashArrayNV(uint32 path, float* dashArray) => p_glGetPathDashArrayNV(path, dashArray);

	private typealias glGetPathMetricsNV_t = function void(uint32 metricQueryMask, int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, int32 stride, float* metrics);
	private static glGetPathMetricsNV_t p_glGetPathMetricsNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathMetricsNV(uint32 metricQueryMask, int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, int32 stride, float* metrics) => p_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);

	private typealias glGetPathMetricRangeNV_t = function void(uint32 metricQueryMask, uint32 firstPathName, int32 numPaths, int32 stride, float* metrics);
	private static glGetPathMetricRangeNV_t p_glGetPathMetricRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathMetricRangeNV(uint32 metricQueryMask, uint32 firstPathName, int32 numPaths, int32 stride, float* metrics) => p_glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);

	private typealias glGetPathSpacingNV_t = function void(PathListMode pathListMode, int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float* returnedSpacing);
	private static glGetPathSpacingNV_t p_glGetPathSpacingNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathSpacingNV(PathListMode pathListMode, int32 numPaths, PathElementType pathNameType, void* paths, uint32 pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float* returnedSpacing) => p_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);

	private typealias glIsPointInFillPathNV_t = function bool(uint32 path, uint32 mask, float x, float y);
	private static glIsPointInFillPathNV_t p_glIsPointInFillPathNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsPointInFillPathNV(uint32 path, uint32 mask, float x, float y) => p_glIsPointInFillPathNV(path, mask, x, y);

	private typealias glIsPointInStrokePathNV_t = function bool(uint32 path, float x, float y);
	private static glIsPointInStrokePathNV_t p_glIsPointInStrokePathNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsPointInStrokePathNV(uint32 path, float x, float y) => p_glIsPointInStrokePathNV(path, x, y);

	private typealias glGetPathLengthNV_t = function float(uint32 path, int32 startSegment, int32 numSegments);
	private static glGetPathLengthNV_t p_glGetPathLengthNV;
	[CallingConvention(GL.CallConv)]
	public static float glGetPathLengthNV(uint32 path, int32 startSegment, int32 numSegments) => p_glGetPathLengthNV(path, startSegment, numSegments);

	private typealias glPointAlongPathNV_t = function bool(uint32 path, int32 startSegment, int32 numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY);
	private static glPointAlongPathNV_t p_glPointAlongPathNV;
	[CallingConvention(GL.CallConv)]
	public static bool glPointAlongPathNV(uint32 path, int32 startSegment, int32 numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY) => p_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);

	private typealias glMatrixLoad3x2fNV_t = function void(uint32 matrixMode, float* m);
	private static glMatrixLoad3x2fNV_t p_glMatrixLoad3x2fNV;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoad3x2fNV(uint32 matrixMode, float* m) => p_glMatrixLoad3x2fNV(matrixMode, m);

	private typealias glMatrixLoad3x3fNV_t = function void(uint32 matrixMode, float* m);
	private static glMatrixLoad3x3fNV_t p_glMatrixLoad3x3fNV;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoad3x3fNV(uint32 matrixMode, float* m) => p_glMatrixLoad3x3fNV(matrixMode, m);

	private typealias glMatrixLoadTranspose3x3fNV_t = function void(uint32 matrixMode, float* m);
	private static glMatrixLoadTranspose3x3fNV_t p_glMatrixLoadTranspose3x3fNV;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixLoadTranspose3x3fNV(uint32 matrixMode, float* m) => p_glMatrixLoadTranspose3x3fNV(matrixMode, m);

	private typealias glMatrixMult3x2fNV_t = function void(uint32 matrixMode, float* m);
	private static glMatrixMult3x2fNV_t p_glMatrixMult3x2fNV;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixMult3x2fNV(uint32 matrixMode, float* m) => p_glMatrixMult3x2fNV(matrixMode, m);

	private typealias glMatrixMult3x3fNV_t = function void(uint32 matrixMode, float* m);
	private static glMatrixMult3x3fNV_t p_glMatrixMult3x3fNV;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixMult3x3fNV(uint32 matrixMode, float* m) => p_glMatrixMult3x3fNV(matrixMode, m);

	private typealias glMatrixMultTranspose3x3fNV_t = function void(uint32 matrixMode, float* m);
	private static glMatrixMultTranspose3x3fNV_t p_glMatrixMultTranspose3x3fNV;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixMultTranspose3x3fNV(uint32 matrixMode, float* m) => p_glMatrixMultTranspose3x3fNV(matrixMode, m);

	private typealias glStencilThenCoverFillPathNV_t = function void(uint32 path, uint32 fillMode, uint32 mask, uint32 coverMode);
	private static glStencilThenCoverFillPathNV_t p_glStencilThenCoverFillPathNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilThenCoverFillPathNV(uint32 path, uint32 fillMode, uint32 mask, uint32 coverMode) => p_glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);

	private typealias glStencilThenCoverStrokePathNV_t = function void(uint32 path, int32 reference, uint32 mask, uint32 coverMode);
	private static glStencilThenCoverStrokePathNV_t p_glStencilThenCoverStrokePathNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilThenCoverStrokePathNV(uint32 path, int32 reference, uint32 mask, uint32 coverMode) => p_glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);

	private typealias glStencilThenCoverFillPathInstancedNV_t = function void(int32 numPaths, uint32 pathNameType, void* paths, uint32 pathBase, uint32 fillMode, uint32 mask, uint32 coverMode, uint32 transformType, float* transformValues);
	private static glStencilThenCoverFillPathInstancedNV_t p_glStencilThenCoverFillPathInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilThenCoverFillPathInstancedNV(int32 numPaths, uint32 pathNameType, void* paths, uint32 pathBase, uint32 fillMode, uint32 mask, uint32 coverMode, uint32 transformType, float* transformValues) => p_glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);

	private typealias glStencilThenCoverStrokePathInstancedNV_t = function void(int32 numPaths, uint32 pathNameType, void* paths, uint32 pathBase, int32 reference, uint32 mask, uint32 coverMode, uint32 transformType, float* transformValues);
	private static glStencilThenCoverStrokePathInstancedNV_t p_glStencilThenCoverStrokePathInstancedNV;
	[CallingConvention(GL.CallConv)]
	public static void glStencilThenCoverStrokePathInstancedNV(int32 numPaths, uint32 pathNameType, void* paths, uint32 pathBase, int32 reference, uint32 mask, uint32 coverMode, uint32 transformType, float* transformValues) => p_glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);

	private typealias glPathGlyphIndexRangeNV_t = function uint32(uint32 fontTarget, void* fontName, uint32 fontStyle, uint32 pathParameterTemplate, float emScale, uint32 baseAndCount);
	private static glPathGlyphIndexRangeNV_t p_glPathGlyphIndexRangeNV;
	[CallingConvention(GL.CallConv)]
	public static uint32 glPathGlyphIndexRangeNV(uint32 fontTarget, void* fontName, uint32 fontStyle, uint32 pathParameterTemplate, float emScale, uint32 baseAndCount) => p_glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);

	private typealias glPathGlyphIndexArrayNV_t = function uint32(uint32 firstPathName, uint32 fontTarget, void* fontName, uint32 fontStyle, uint32 firstGlyphIndex, int32 numGlyphs, uint32 pathParameterTemplate, float emScale);
	private static glPathGlyphIndexArrayNV_t p_glPathGlyphIndexArrayNV;
	[CallingConvention(GL.CallConv)]
	public static uint32 glPathGlyphIndexArrayNV(uint32 firstPathName, uint32 fontTarget, void* fontName, uint32 fontStyle, uint32 firstGlyphIndex, int32 numGlyphs, uint32 pathParameterTemplate, float emScale) => p_glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

	private typealias glPathMemoryGlyphIndexArrayNV_t = function uint32(uint32 firstPathName, uint32 fontTarget, int32 fontSize, void* fontData, int32 faceIndex, uint32 firstGlyphIndex, int32 numGlyphs, uint32 pathParameterTemplate, float emScale);
	private static glPathMemoryGlyphIndexArrayNV_t p_glPathMemoryGlyphIndexArrayNV;
	[CallingConvention(GL.CallConv)]
	public static uint32 glPathMemoryGlyphIndexArrayNV(uint32 firstPathName, uint32 fontTarget, int32 fontSize, void* fontData, int32 faceIndex, uint32 firstGlyphIndex, int32 numGlyphs, uint32 pathParameterTemplate, float emScale) => p_glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

	private typealias glProgramPathFragmentInputGenNV_t = function void(uint32 program, int32 location, uint32 genMode, int32 components, float* coeffs);
	private static glProgramPathFragmentInputGenNV_t p_glProgramPathFragmentInputGenNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramPathFragmentInputGenNV(uint32 program, int32 location, uint32 genMode, int32 components, float* coeffs) => p_glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);

	private typealias glGetProgramResourcefvNV_t = function void(uint32 program, ProgramInterface programInterface, uint32 index, int32 propCount, uint32* props, int32 bufSize, int32* length, float* @params);
	private static glGetProgramResourcefvNV_t p_glGetProgramResourcefvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramResourcefvNV(uint32 program, ProgramInterface programInterface, uint32 index, int32 propCount, uint32* props, int32 bufSize, int32* length, float* @params) => p_glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, @params);

	private typealias glPathColorGenNV_t = function void(PathColor color, uint32 genMode, uint32 colorFormat, float* coeffs);
	private static glPathColorGenNV_t p_glPathColorGenNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathColorGenNV(PathColor color, uint32 genMode, uint32 colorFormat, float* coeffs) => p_glPathColorGenNV(color, genMode, colorFormat, coeffs);

	private typealias glPathTexGenNV_t = function void(PathColor texCoordSet, uint32 genMode, int32 components, float* coeffs);
	private static glPathTexGenNV_t p_glPathTexGenNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathTexGenNV(PathColor texCoordSet, uint32 genMode, int32 components, float* coeffs) => p_glPathTexGenNV(texCoordSet, genMode, components, coeffs);

	private typealias glPathFogGenNV_t = function void(uint32 genMode);
	private static glPathFogGenNV_t p_glPathFogGenNV;
	[CallingConvention(GL.CallConv)]
	public static void glPathFogGenNV(uint32 genMode) => p_glPathFogGenNV(genMode);

	private typealias glGetPathColorGenivNV_t = function void(PathColor color, uint32 pname, int32* value);
	private static glGetPathColorGenivNV_t p_glGetPathColorGenivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathColorGenivNV(PathColor color, uint32 pname, int32* value) => p_glGetPathColorGenivNV(color, pname, value);

	private typealias glGetPathColorGenfvNV_t = function void(PathColor color, uint32 pname, float* value);
	private static glGetPathColorGenfvNV_t p_glGetPathColorGenfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathColorGenfvNV(PathColor color, uint32 pname, float* value) => p_glGetPathColorGenfvNV(color, pname, value);

	private typealias glGetPathTexGenivNV_t = function void(TextureUnit texCoordSet, uint32 pname, int32* value);
	private static glGetPathTexGenivNV_t p_glGetPathTexGenivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathTexGenivNV(TextureUnit texCoordSet, uint32 pname, int32* value) => p_glGetPathTexGenivNV(texCoordSet, pname, value);

	private typealias glGetPathTexGenfvNV_t = function void(TextureUnit texCoordSet, uint32 pname, float* value);
	private static glGetPathTexGenfvNV_t p_glGetPathTexGenfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetPathTexGenfvNV(TextureUnit texCoordSet, uint32 pname, float* value) => p_glGetPathTexGenfvNV(texCoordSet, pname, value);

	private typealias glPixelDataRangeNV_t = function void(uint32 target, int32 length, void* pointer);
	private static glPixelDataRangeNV_t p_glPixelDataRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glPixelDataRangeNV(uint32 target, int32 length, void* pointer) => p_glPixelDataRangeNV(target, length, pointer);

	private typealias glFlushPixelDataRangeNV_t = function void(uint32 target);
	private static glFlushPixelDataRangeNV_t p_glFlushPixelDataRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glFlushPixelDataRangeNV(uint32 target) => p_glFlushPixelDataRangeNV(target);

	private typealias glPointParameteriNV_t = function void(uint32 pname, int32 param);
	private static glPointParameteriNV_t p_glPointParameteriNV;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameteriNV(uint32 pname, int32 param) => p_glPointParameteriNV(pname, param);

	private typealias glPointParameterivNV_t = function void(uint32 pname, int32* @params);
	private static glPointParameterivNV_t p_glPointParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterivNV(uint32 pname, int32* @params) => p_glPointParameterivNV(pname, @params);

	private typealias glPolygonModeNV_t = function void(MaterialFace face, PolygonMode mode);
	private static glPolygonModeNV_t p_glPolygonModeNV;
	[CallingConvention(GL.CallConv)]
	public static void glPolygonModeNV(MaterialFace face, PolygonMode mode) => p_glPolygonModeNV(face, mode);

	private typealias glPresentFrameKeyedNV_t = function void(uint32 video_slot, uint64 minPresentTime, uint32 beginPresentTimeId, uint32 presentDurationId, uint32 type, uint32 target0, uint32 fill0, uint32 key0, uint32 target1, uint32 fill1, uint32 key1);
	private static glPresentFrameKeyedNV_t p_glPresentFrameKeyedNV;
	[CallingConvention(GL.CallConv)]
	public static void glPresentFrameKeyedNV(uint32 video_slot, uint64 minPresentTime, uint32 beginPresentTimeId, uint32 presentDurationId, uint32 type, uint32 target0, uint32 fill0, uint32 key0, uint32 target1, uint32 fill1, uint32 key1) => p_glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);

	private typealias glPresentFrameDualFillNV_t = function void(uint32 video_slot, uint64 minPresentTime, uint32 beginPresentTimeId, uint32 presentDurationId, uint32 type, uint32 target0, uint32 fill0, uint32 target1, uint32 fill1, uint32 target2, uint32 fill2, uint32 target3, uint32 fill3);
	private static glPresentFrameDualFillNV_t p_glPresentFrameDualFillNV;
	[CallingConvention(GL.CallConv)]
	public static void glPresentFrameDualFillNV(uint32 video_slot, uint64 minPresentTime, uint32 beginPresentTimeId, uint32 presentDurationId, uint32 type, uint32 target0, uint32 fill0, uint32 target1, uint32 fill1, uint32 target2, uint32 fill2, uint32 target3, uint32 fill3) => p_glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);

	private typealias glGetVideoivNV_t = function void(uint32 video_slot, uint32 pname, int32* @params);
	private static glGetVideoivNV_t p_glGetVideoivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideoivNV(uint32 video_slot, uint32 pname, int32* @params) => p_glGetVideoivNV(video_slot, pname, @params);

	private typealias glGetVideouivNV_t = function void(uint32 video_slot, uint32 pname, uint32* @params);
	private static glGetVideouivNV_t p_glGetVideouivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideouivNV(uint32 video_slot, uint32 pname, uint32* @params) => p_glGetVideouivNV(video_slot, pname, @params);

	private typealias glGetVideoi64vNV_t = function void(uint32 video_slot, uint32 pname, void* @params);
	private static glGetVideoi64vNV_t p_glGetVideoi64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideoi64vNV(uint32 video_slot, uint32 pname, void* @params) => p_glGetVideoi64vNV(video_slot, pname, @params);

	private typealias glGetVideoui64vNV_t = function void(uint32 video_slot, uint32 pname, void* @params);
	private static glGetVideoui64vNV_t p_glGetVideoui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideoui64vNV(uint32 video_slot, uint32 pname, void* @params) => p_glGetVideoui64vNV(video_slot, pname, @params);

	private typealias glPrimitiveRestartNV_t = function void();
	private static glPrimitiveRestartNV_t p_glPrimitiveRestartNV;
	[CallingConvention(GL.CallConv)]
	public static void glPrimitiveRestartNV() => p_glPrimitiveRestartNV();

	private typealias glPrimitiveRestartIndexNV_t = function void(uint32 index);
	private static glPrimitiveRestartIndexNV_t p_glPrimitiveRestartIndexNV;
	[CallingConvention(GL.CallConv)]
	public static void glPrimitiveRestartIndexNV(uint32 index) => p_glPrimitiveRestartIndexNV(index);

	private typealias glQueryResourceNV_t = function int32(uint32 queryType, int32 tagId, uint32 bufSize, int32* buffer);
	private static glQueryResourceNV_t p_glQueryResourceNV;
	[CallingConvention(GL.CallConv)]
	public static int32 glQueryResourceNV(uint32 queryType, int32 tagId, uint32 bufSize, int32* buffer) => p_glQueryResourceNV(queryType, tagId, bufSize, buffer);

	private typealias glGenQueryResourceTagNV_t = function void(int32 n, int32* tagIds);
	private static glGenQueryResourceTagNV_t p_glGenQueryResourceTagNV;
	[CallingConvention(GL.CallConv)]
	public static void glGenQueryResourceTagNV(int32 n, int32* tagIds) => p_glGenQueryResourceTagNV(n, tagIds);

	private typealias glDeleteQueryResourceTagNV_t = function void(int32 n, int32* tagIds);
	private static glDeleteQueryResourceTagNV_t p_glDeleteQueryResourceTagNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteQueryResourceTagNV(int32 n, int32* tagIds) => p_glDeleteQueryResourceTagNV(n, tagIds);

	private typealias glQueryResourceTagNV_t = function void(int32 tagId, char8* tagString);
	private static glQueryResourceTagNV_t p_glQueryResourceTagNV;
	[CallingConvention(GL.CallConv)]
	public static void glQueryResourceTagNV(int32 tagId, char8* tagString) => p_glQueryResourceTagNV(tagId, tagString);

	private typealias glReadBufferNV_t = function void(uint32 mode);
	private static glReadBufferNV_t p_glReadBufferNV;
	[CallingConvention(GL.CallConv)]
	public static void glReadBufferNV(uint32 mode) => p_glReadBufferNV(mode);

	private typealias glCombinerParameterfvNV_t = function void(uint32 pname, float* @params);
	private static glCombinerParameterfvNV_t p_glCombinerParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glCombinerParameterfvNV(uint32 pname, float* @params) => p_glCombinerParameterfvNV(pname, @params);

	private typealias glCombinerParameterfNV_t = function void(uint32 pname, float param);
	private static glCombinerParameterfNV_t p_glCombinerParameterfNV;
	[CallingConvention(GL.CallConv)]
	public static void glCombinerParameterfNV(uint32 pname, float param) => p_glCombinerParameterfNV(pname, param);

	private typealias glCombinerParameterivNV_t = function void(uint32 pname, int32* @params);
	private static glCombinerParameterivNV_t p_glCombinerParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glCombinerParameterivNV(uint32 pname, int32* @params) => p_glCombinerParameterivNV(pname, @params);

	private typealias glCombinerParameteriNV_t = function void(uint32 pname, int32 param);
	private static glCombinerParameteriNV_t p_glCombinerParameteriNV;
	[CallingConvention(GL.CallConv)]
	public static void glCombinerParameteriNV(uint32 pname, int32 param) => p_glCombinerParameteriNV(pname, param);

	private typealias glCombinerInputNV_t = function void(uint32 stage, uint32 portion, uint32 variable, uint32 input, uint32 mapping, uint32 componentUsage);
	private static glCombinerInputNV_t p_glCombinerInputNV;
	[CallingConvention(GL.CallConv)]
	public static void glCombinerInputNV(uint32 stage, uint32 portion, uint32 variable, uint32 input, uint32 mapping, uint32 componentUsage) => p_glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);

	private typealias glCombinerOutputNV_t = function void(uint32 stage, uint32 portion, uint32 abOutput, uint32 cdOutput, uint32 sumOutput, uint32 scale, uint32 bias, bool abDotProduct, bool cdDotProduct, bool muxSum);
	private static glCombinerOutputNV_t p_glCombinerOutputNV;
	[CallingConvention(GL.CallConv)]
	public static void glCombinerOutputNV(uint32 stage, uint32 portion, uint32 abOutput, uint32 cdOutput, uint32 sumOutput, uint32 scale, uint32 bias, bool abDotProduct, bool cdDotProduct, bool muxSum) => p_glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);

	private typealias glFinalCombinerInputNV_t = function void(uint32 variable, uint32 input, uint32 mapping, uint32 componentUsage);
	private static glFinalCombinerInputNV_t p_glFinalCombinerInputNV;
	[CallingConvention(GL.CallConv)]
	public static void glFinalCombinerInputNV(uint32 variable, uint32 input, uint32 mapping, uint32 componentUsage) => p_glFinalCombinerInputNV(variable, input, mapping, componentUsage);

	private typealias glGetCombinerInputParameterfvNV_t = function void(uint32 stage, uint32 portion, uint32 variable, uint32 pname, float* @params);
	private static glGetCombinerInputParameterfvNV_t p_glGetCombinerInputParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetCombinerInputParameterfvNV(uint32 stage, uint32 portion, uint32 variable, uint32 pname, float* @params) => p_glGetCombinerInputParameterfvNV(stage, portion, variable, pname, @params);

	private typealias glGetCombinerInputParameterivNV_t = function void(uint32 stage, uint32 portion, uint32 variable, uint32 pname, int32* @params);
	private static glGetCombinerInputParameterivNV_t p_glGetCombinerInputParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetCombinerInputParameterivNV(uint32 stage, uint32 portion, uint32 variable, uint32 pname, int32* @params) => p_glGetCombinerInputParameterivNV(stage, portion, variable, pname, @params);

	private typealias glGetCombinerOutputParameterfvNV_t = function void(uint32 stage, uint32 portion, uint32 pname, float* @params);
	private static glGetCombinerOutputParameterfvNV_t p_glGetCombinerOutputParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetCombinerOutputParameterfvNV(uint32 stage, uint32 portion, uint32 pname, float* @params) => p_glGetCombinerOutputParameterfvNV(stage, portion, pname, @params);

	private typealias glGetCombinerOutputParameterivNV_t = function void(uint32 stage, uint32 portion, uint32 pname, int32* @params);
	private static glGetCombinerOutputParameterivNV_t p_glGetCombinerOutputParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetCombinerOutputParameterivNV(uint32 stage, uint32 portion, uint32 pname, int32* @params) => p_glGetCombinerOutputParameterivNV(stage, portion, pname, @params);

	private typealias glGetFinalCombinerInputParameterfvNV_t = function void(uint32 variable, uint32 pname, float* @params);
	private static glGetFinalCombinerInputParameterfvNV_t p_glGetFinalCombinerInputParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetFinalCombinerInputParameterfvNV(uint32 variable, uint32 pname, float* @params) => p_glGetFinalCombinerInputParameterfvNV(variable, pname, @params);

	private typealias glGetFinalCombinerInputParameterivNV_t = function void(uint32 variable, uint32 pname, int32* @params);
	private static glGetFinalCombinerInputParameterivNV_t p_glGetFinalCombinerInputParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetFinalCombinerInputParameterivNV(uint32 variable, uint32 pname, int32* @params) => p_glGetFinalCombinerInputParameterivNV(variable, pname, @params);

	private typealias glCombinerStageParameterfvNV_t = function void(uint32 stage, uint32 pname, float* @params);
	private static glCombinerStageParameterfvNV_t p_glCombinerStageParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glCombinerStageParameterfvNV(uint32 stage, uint32 pname, float* @params) => p_glCombinerStageParameterfvNV(stage, pname, @params);

	private typealias glGetCombinerStageParameterfvNV_t = function void(uint32 stage, uint32 pname, float* @params);
	private static glGetCombinerStageParameterfvNV_t p_glGetCombinerStageParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetCombinerStageParameterfvNV(uint32 stage, uint32 pname, float* @params) => p_glGetCombinerStageParameterfvNV(stage, pname, @params);

	private typealias glFramebufferSampleLocationsfvNV_t = function void(FramebufferTarget target, uint32 start, int32 count, float* v);
	private static glFramebufferSampleLocationsfvNV_t p_glFramebufferSampleLocationsfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferSampleLocationsfvNV(FramebufferTarget target, uint32 start, int32 count, float* v) => p_glFramebufferSampleLocationsfvNV(target, start, count, v);

	private typealias glNamedFramebufferSampleLocationsfvNV_t = function void(uint32 framebuffer, uint32 start, int32 count, float* v);
	private static glNamedFramebufferSampleLocationsfvNV_t p_glNamedFramebufferSampleLocationsfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glNamedFramebufferSampleLocationsfvNV(uint32 framebuffer, uint32 start, int32 count, float* v) => p_glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);

	private typealias glResolveDepthValuesNV_t = function void();
	private static glResolveDepthValuesNV_t p_glResolveDepthValuesNV;
	[CallingConvention(GL.CallConv)]
	public static void glResolveDepthValuesNV() => p_glResolveDepthValuesNV();

	private typealias glScissorExclusiveNV_t = function void(int32 x, int32 y, int32 width, int32 height);
	private static glScissorExclusiveNV_t p_glScissorExclusiveNV;
	[CallingConvention(GL.CallConv)]
	public static void glScissorExclusiveNV(int32 x, int32 y, int32 width, int32 height) => p_glScissorExclusiveNV(x, y, width, height);

	private typealias glScissorExclusiveArrayvNV_t = function void(uint32 first, int32 count, int32* v);
	private static glScissorExclusiveArrayvNV_t p_glScissorExclusiveArrayvNV;
	[CallingConvention(GL.CallConv)]
	public static void glScissorExclusiveArrayvNV(uint32 first, int32 count, int32* v) => p_glScissorExclusiveArrayvNV(first, count, v);

	private typealias glMakeBufferResidentNV_t = function void(uint32 target, uint32 access);
	private static glMakeBufferResidentNV_t p_glMakeBufferResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeBufferResidentNV(uint32 target, uint32 access) => p_glMakeBufferResidentNV(target, access);

	private typealias glMakeBufferNonResidentNV_t = function void(uint32 target);
	private static glMakeBufferNonResidentNV_t p_glMakeBufferNonResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeBufferNonResidentNV(uint32 target) => p_glMakeBufferNonResidentNV(target);

	private typealias glIsBufferResidentNV_t = function bool(uint32 target);
	private static glIsBufferResidentNV_t p_glIsBufferResidentNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsBufferResidentNV(uint32 target) => p_glIsBufferResidentNV(target);

	private typealias glMakeNamedBufferResidentNV_t = function void(uint32 buffer, uint32 access);
	private static glMakeNamedBufferResidentNV_t p_glMakeNamedBufferResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeNamedBufferResidentNV(uint32 buffer, uint32 access) => p_glMakeNamedBufferResidentNV(buffer, access);

	private typealias glMakeNamedBufferNonResidentNV_t = function void(uint32 buffer);
	private static glMakeNamedBufferNonResidentNV_t p_glMakeNamedBufferNonResidentNV;
	[CallingConvention(GL.CallConv)]
	public static void glMakeNamedBufferNonResidentNV(uint32 buffer) => p_glMakeNamedBufferNonResidentNV(buffer);

	private typealias glIsNamedBufferResidentNV_t = function bool(uint32 buffer);
	private static glIsNamedBufferResidentNV_t p_glIsNamedBufferResidentNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsNamedBufferResidentNV(uint32 buffer) => p_glIsNamedBufferResidentNV(buffer);

	private typealias glGetBufferParameterui64vNV_t = function void(BufferTargetARB target, uint32 pname, void* @params);
	private static glGetBufferParameterui64vNV_t p_glGetBufferParameterui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferParameterui64vNV(BufferTargetARB target, uint32 pname, void* @params) => p_glGetBufferParameterui64vNV(target, pname, @params);

	private typealias glGetNamedBufferParameterui64vNV_t = function void(uint32 buffer, VertexBufferObjectParameter pname, void* @params);
	private static glGetNamedBufferParameterui64vNV_t p_glGetNamedBufferParameterui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetNamedBufferParameterui64vNV(uint32 buffer, VertexBufferObjectParameter pname, void* @params) => p_glGetNamedBufferParameterui64vNV(buffer, pname, @params);

	private typealias glGetIntegerui64vNV_t = function void(uint32 value, void* result);
	private static glGetIntegerui64vNV_t p_glGetIntegerui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetIntegerui64vNV(uint32 value, void* result) => p_glGetIntegerui64vNV(value, result);

	private typealias glUniformui64NV_t = function void(int32 location, uint64 value);
	private static glUniformui64NV_t p_glUniformui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformui64NV(int32 location, uint64 value) => p_glUniformui64NV(location, value);

	private typealias glUniformui64vNV_t = function void(int32 location, int32 count, void* value);
	private static glUniformui64vNV_t p_glUniformui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glUniformui64vNV(int32 location, int32 count, void* value) => p_glUniformui64vNV(location, count, value);

	private typealias glProgramUniformui64NV_t = function void(uint32 program, int32 location, uint64 value);
	private static glProgramUniformui64NV_t p_glProgramUniformui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformui64NV(uint32 program, int32 location, uint64 value) => p_glProgramUniformui64NV(program, location, value);

	private typealias glProgramUniformui64vNV_t = function void(uint32 program, int32 location, int32 count, void* value);
	private static glProgramUniformui64vNV_t p_glProgramUniformui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramUniformui64vNV(uint32 program, int32 location, int32 count, void* value) => p_glProgramUniformui64vNV(program, location, count, value);

	private typealias glBindShadingRateImageNV_t = function void(uint32 texture);
	private static glBindShadingRateImageNV_t p_glBindShadingRateImageNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindShadingRateImageNV(uint32 texture) => p_glBindShadingRateImageNV(texture);

	private typealias glGetShadingRateImagePaletteNV_t = function void(uint32 viewport, uint32 entry, uint32* rate);
	private static glGetShadingRateImagePaletteNV_t p_glGetShadingRateImagePaletteNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetShadingRateImagePaletteNV(uint32 viewport, uint32 entry, uint32* rate) => p_glGetShadingRateImagePaletteNV(viewport, entry, rate);

	private typealias glGetShadingRateSampleLocationivNV_t = function void(uint32 rate, uint32 samples, uint32 index, int32* location);
	private static glGetShadingRateSampleLocationivNV_t p_glGetShadingRateSampleLocationivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetShadingRateSampleLocationivNV(uint32 rate, uint32 samples, uint32 index, int32* location) => p_glGetShadingRateSampleLocationivNV(rate, samples, index, location);

	private typealias glShadingRateImageBarrierNV_t = function void(bool synchronize);
	private static glShadingRateImageBarrierNV_t p_glShadingRateImageBarrierNV;
	[CallingConvention(GL.CallConv)]
	public static void glShadingRateImageBarrierNV(bool synchronize) => p_glShadingRateImageBarrierNV(synchronize);

	private typealias glShadingRateImagePaletteNV_t = function void(uint32 viewport, uint32 first, int32 count, uint32* rates);
	private static glShadingRateImagePaletteNV_t p_glShadingRateImagePaletteNV;
	[CallingConvention(GL.CallConv)]
	public static void glShadingRateImagePaletteNV(uint32 viewport, uint32 first, int32 count, uint32* rates) => p_glShadingRateImagePaletteNV(viewport, first, count, rates);

	private typealias glShadingRateSampleOrderNV_t = function void(uint32 order);
	private static glShadingRateSampleOrderNV_t p_glShadingRateSampleOrderNV;
	[CallingConvention(GL.CallConv)]
	public static void glShadingRateSampleOrderNV(uint32 order) => p_glShadingRateSampleOrderNV(order);

	private typealias glShadingRateSampleOrderCustomNV_t = function void(uint32 rate, uint32 samples, int32* locations);
	private static glShadingRateSampleOrderCustomNV_t p_glShadingRateSampleOrderCustomNV;
	[CallingConvention(GL.CallConv)]
	public static void glShadingRateSampleOrderCustomNV(uint32 rate, uint32 samples, int32* locations) => p_glShadingRateSampleOrderCustomNV(rate, samples, locations);

	private typealias glTextureBarrierNV_t = function void();
	private static glTextureBarrierNV_t p_glTextureBarrierNV;
	[CallingConvention(GL.CallConv)]
	public static void glTextureBarrierNV() => p_glTextureBarrierNV();

	private typealias glTexImage2DMultisampleCoverageNV_t = function void(TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, bool fixedSampleLocations);
	private static glTexImage2DMultisampleCoverageNV_t p_glTexImage2DMultisampleCoverageNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage2DMultisampleCoverageNV(TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, bool fixedSampleLocations) => p_glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);

	private typealias glTexImage3DMultisampleCoverageNV_t = function void(TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations);
	private static glTexImage3DMultisampleCoverageNV_t p_glTexImage3DMultisampleCoverageNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage3DMultisampleCoverageNV(TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations) => p_glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);

	private typealias glTextureImage2DMultisampleNV_t = function void(uint32 texture, TextureTarget target, int32 samples, int32 internalFormat, int32 width, int32 height, bool fixedSampleLocations);
	private static glTextureImage2DMultisampleNV_t p_glTextureImage2DMultisampleNV;
	[CallingConvention(GL.CallConv)]
	public static void glTextureImage2DMultisampleNV(uint32 texture, TextureTarget target, int32 samples, int32 internalFormat, int32 width, int32 height, bool fixedSampleLocations) => p_glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);

	private typealias glTextureImage3DMultisampleNV_t = function void(uint32 texture, TextureTarget target, int32 samples, int32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations);
	private static glTextureImage3DMultisampleNV_t p_glTextureImage3DMultisampleNV;
	[CallingConvention(GL.CallConv)]
	public static void glTextureImage3DMultisampleNV(uint32 texture, TextureTarget target, int32 samples, int32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations) => p_glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);

	private typealias glTextureImage2DMultisampleCoverageNV_t = function void(uint32 texture, TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, bool fixedSampleLocations);
	private static glTextureImage2DMultisampleCoverageNV_t p_glTextureImage2DMultisampleCoverageNV;
	[CallingConvention(GL.CallConv)]
	public static void glTextureImage2DMultisampleCoverageNV(uint32 texture, TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, bool fixedSampleLocations) => p_glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);

	private typealias glTextureImage3DMultisampleCoverageNV_t = function void(uint32 texture, TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations);
	private static glTextureImage3DMultisampleCoverageNV_t p_glTextureImage3DMultisampleCoverageNV;
	[CallingConvention(GL.CallConv)]
	public static void glTextureImage3DMultisampleCoverageNV(uint32 texture, TextureTarget target, int32 coverageSamples, int32 colorSamples, int32 internalFormat, int32 width, int32 height, int32 depth, bool fixedSampleLocations) => p_glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);

	private typealias glBeginTransformFeedbackNV_t = function void(PrimitiveType primitiveMode);
	private static glBeginTransformFeedbackNV_t p_glBeginTransformFeedbackNV;
	[CallingConvention(GL.CallConv)]
	public static void glBeginTransformFeedbackNV(PrimitiveType primitiveMode) => p_glBeginTransformFeedbackNV(primitiveMode);

	private typealias glEndTransformFeedbackNV_t = function void();
	private static glEndTransformFeedbackNV_t p_glEndTransformFeedbackNV;
	[CallingConvention(GL.CallConv)]
	public static void glEndTransformFeedbackNV() => p_glEndTransformFeedbackNV();

	private typealias glTransformFeedbackAttribsNV_t = function void(int32 count, int32* attribs, uint32 bufferMode);
	private static glTransformFeedbackAttribsNV_t p_glTransformFeedbackAttribsNV;
	[CallingConvention(GL.CallConv)]
	public static void glTransformFeedbackAttribsNV(int32 count, int32* attribs, uint32 bufferMode) => p_glTransformFeedbackAttribsNV(count, attribs, bufferMode);

	private typealias glBindBufferRangeNV_t = function void(BufferTargetARB target, uint32 index, uint32 buffer, void* offset, int32 size);
	private static glBindBufferRangeNV_t p_glBindBufferRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferRangeNV(BufferTargetARB target, uint32 index, uint32 buffer, void* offset, int32 size) => p_glBindBufferRangeNV(target, index, buffer, offset, size);

	private typealias glBindBufferOffsetNV_t = function void(BufferTargetARB target, uint32 index, uint32 buffer, void* offset);
	private static glBindBufferOffsetNV_t p_glBindBufferOffsetNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferOffsetNV(BufferTargetARB target, uint32 index, uint32 buffer, void* offset) => p_glBindBufferOffsetNV(target, index, buffer, offset);

	private typealias glBindBufferBaseNV_t = function void(BufferTargetARB target, uint32 index, uint32 buffer);
	private static glBindBufferBaseNV_t p_glBindBufferBaseNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindBufferBaseNV(BufferTargetARB target, uint32 index, uint32 buffer) => p_glBindBufferBaseNV(target, index, buffer);

	private typealias glTransformFeedbackVaryingsNV_t = function void(uint32 program, int32 count, int32* locations, uint32 bufferMode);
	private static glTransformFeedbackVaryingsNV_t p_glTransformFeedbackVaryingsNV;
	[CallingConvention(GL.CallConv)]
	public static void glTransformFeedbackVaryingsNV(uint32 program, int32 count, int32* locations, uint32 bufferMode) => p_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);

	private typealias glActiveVaryingNV_t = function void(uint32 program, char8* name);
	private static glActiveVaryingNV_t p_glActiveVaryingNV;
	[CallingConvention(GL.CallConv)]
	public static void glActiveVaryingNV(uint32 program, char8* name) => p_glActiveVaryingNV(program, name);

	private typealias glGetVaryingLocationNV_t = function int32(uint32 program, char8* name);
	private static glGetVaryingLocationNV_t p_glGetVaryingLocationNV;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetVaryingLocationNV(uint32 program, char8* name) => p_glGetVaryingLocationNV(program, name);

	private typealias glGetActiveVaryingNV_t = function void(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name);
	private static glGetActiveVaryingNV_t p_glGetActiveVaryingNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetActiveVaryingNV(uint32 program, uint32 index, int32 bufSize, int32* length, int32* size, uint32* type, char8* name) => p_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);

	private typealias glGetTransformFeedbackVaryingNV_t = function void(uint32 program, uint32 index, int32* location);
	private static glGetTransformFeedbackVaryingNV_t p_glGetTransformFeedbackVaryingNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetTransformFeedbackVaryingNV(uint32 program, uint32 index, int32* location) => p_glGetTransformFeedbackVaryingNV(program, index, location);

	private typealias glTransformFeedbackStreamAttribsNV_t = function void(int32 count, int32* attribs, int32 nbuffers, int32* bufstreams, uint32 bufferMode);
	private static glTransformFeedbackStreamAttribsNV_t p_glTransformFeedbackStreamAttribsNV;
	[CallingConvention(GL.CallConv)]
	public static void glTransformFeedbackStreamAttribsNV(int32 count, int32* attribs, int32 nbuffers, int32* bufstreams, uint32 bufferMode) => p_glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);

	private typealias glBindTransformFeedbackNV_t = function void(BufferTargetARB target, uint32 id);
	private static glBindTransformFeedbackNV_t p_glBindTransformFeedbackNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindTransformFeedbackNV(BufferTargetARB target, uint32 id) => p_glBindTransformFeedbackNV(target, id);

	private typealias glDeleteTransformFeedbacksNV_t = function void(int32 n, uint32* ids);
	private static glDeleteTransformFeedbacksNV_t p_glDeleteTransformFeedbacksNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteTransformFeedbacksNV(int32 n, uint32* ids) => p_glDeleteTransformFeedbacksNV(n, ids);

	private typealias glGenTransformFeedbacksNV_t = function void(int32 n, uint32* ids);
	private static glGenTransformFeedbacksNV_t p_glGenTransformFeedbacksNV;
	[CallingConvention(GL.CallConv)]
	public static void glGenTransformFeedbacksNV(int32 n, uint32* ids) => p_glGenTransformFeedbacksNV(n, ids);

	private typealias glIsTransformFeedbackNV_t = function bool(uint32 id);
	private static glIsTransformFeedbackNV_t p_glIsTransformFeedbackNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsTransformFeedbackNV(uint32 id) => p_glIsTransformFeedbackNV(id);

	private typealias glPauseTransformFeedbackNV_t = function void();
	private static glPauseTransformFeedbackNV_t p_glPauseTransformFeedbackNV;
	[CallingConvention(GL.CallConv)]
	public static void glPauseTransformFeedbackNV() => p_glPauseTransformFeedbackNV();

	private typealias glResumeTransformFeedbackNV_t = function void();
	private static glResumeTransformFeedbackNV_t p_glResumeTransformFeedbackNV;
	[CallingConvention(GL.CallConv)]
	public static void glResumeTransformFeedbackNV() => p_glResumeTransformFeedbackNV();

	private typealias glDrawTransformFeedbackNV_t = function void(PrimitiveType mode, uint32 id);
	private static glDrawTransformFeedbackNV_t p_glDrawTransformFeedbackNV;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTransformFeedbackNV(PrimitiveType mode, uint32 id) => p_glDrawTransformFeedbackNV(mode, id);

	private typealias glVDPAUInitNV_t = function void(void* vdpDevice, void* getProcAddress);
	private static glVDPAUInitNV_t p_glVDPAUInitNV;
	[CallingConvention(GL.CallConv)]
	public static void glVDPAUInitNV(void* vdpDevice, void* getProcAddress) => p_glVDPAUInitNV(vdpDevice, getProcAddress);

	private typealias glVDPAUFiniNV_t = function void();
	private static glVDPAUFiniNV_t p_glVDPAUFiniNV;
	[CallingConvention(GL.CallConv)]
	public static void glVDPAUFiniNV() => p_glVDPAUFiniNV();

	private typealias glVDPAURegisterVideoSurfaceNV_t = function void*(void* vdpSurface, uint32 target, int32 numTextureNames, uint32* textureNames);
	private static glVDPAURegisterVideoSurfaceNV_t p_glVDPAURegisterVideoSurfaceNV;
	[CallingConvention(GL.CallConv)]
	public static void* glVDPAURegisterVideoSurfaceNV(void* vdpSurface, uint32 target, int32 numTextureNames, uint32* textureNames) => p_glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);

	private typealias glVDPAURegisterOutputSurfaceNV_t = function void*(void* vdpSurface, uint32 target, int32 numTextureNames, uint32* textureNames);
	private static glVDPAURegisterOutputSurfaceNV_t p_glVDPAURegisterOutputSurfaceNV;
	[CallingConvention(GL.CallConv)]
	public static void* glVDPAURegisterOutputSurfaceNV(void* vdpSurface, uint32 target, int32 numTextureNames, uint32* textureNames) => p_glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);

	private typealias glVDPAUIsSurfaceNV_t = function bool(void* surface);
	private static glVDPAUIsSurfaceNV_t p_glVDPAUIsSurfaceNV;
	[CallingConvention(GL.CallConv)]
	public static bool glVDPAUIsSurfaceNV(void* surface) => p_glVDPAUIsSurfaceNV(surface);

	private typealias glVDPAUUnregisterSurfaceNV_t = function void(void* surface);
	private static glVDPAUUnregisterSurfaceNV_t p_glVDPAUUnregisterSurfaceNV;
	[CallingConvention(GL.CallConv)]
	public static void glVDPAUUnregisterSurfaceNV(void* surface) => p_glVDPAUUnregisterSurfaceNV(surface);

	private typealias glVDPAUGetSurfaceivNV_t = function void(void* surface, uint32 pname, int32 bufSize, int32* length, int32* values);
	private static glVDPAUGetSurfaceivNV_t p_glVDPAUGetSurfaceivNV;
	[CallingConvention(GL.CallConv)]
	public static void glVDPAUGetSurfaceivNV(void* surface, uint32 pname, int32 bufSize, int32* length, int32* values) => p_glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);

	private typealias glVDPAUSurfaceAccessNV_t = function void(void* surface, uint32 access);
	private static glVDPAUSurfaceAccessNV_t p_glVDPAUSurfaceAccessNV;
	[CallingConvention(GL.CallConv)]
	public static void glVDPAUSurfaceAccessNV(void* surface, uint32 access) => p_glVDPAUSurfaceAccessNV(surface, access);

	private typealias glVDPAUMapSurfacesNV_t = function void(int32 numSurfaces, void* surfaces);
	private static glVDPAUMapSurfacesNV_t p_glVDPAUMapSurfacesNV;
	[CallingConvention(GL.CallConv)]
	public static void glVDPAUMapSurfacesNV(int32 numSurfaces, void* surfaces) => p_glVDPAUMapSurfacesNV(numSurfaces, surfaces);

	private typealias glVDPAUUnmapSurfacesNV_t = function void(int32 numSurface, void* surfaces);
	private static glVDPAUUnmapSurfacesNV_t p_glVDPAUUnmapSurfacesNV;
	[CallingConvention(GL.CallConv)]
	public static void glVDPAUUnmapSurfacesNV(int32 numSurface, void* surfaces) => p_glVDPAUUnmapSurfacesNV(numSurface, surfaces);

	private typealias glVDPAURegisterVideoSurfaceWithPictureStructureNV_t = function void*(void* vdpSurface, uint32 target, int32 numTextureNames, uint32* textureNames, bool isFrameStructure);
	private static glVDPAURegisterVideoSurfaceWithPictureStructureNV_t p_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
	[CallingConvention(GL.CallConv)]
	public static void* glVDPAURegisterVideoSurfaceWithPictureStructureNV(void* vdpSurface, uint32 target, int32 numTextureNames, uint32* textureNames, bool isFrameStructure) => p_glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);

	private typealias glFlushVertexArrayRangeNV_t = function void();
	private static glFlushVertexArrayRangeNV_t p_glFlushVertexArrayRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glFlushVertexArrayRangeNV() => p_glFlushVertexArrayRangeNV();

	private typealias glVertexArrayRangeNV_t = function void(int32 length, void* pointer);
	private static glVertexArrayRangeNV_t p_glVertexArrayRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexArrayRangeNV(int32 length, void* pointer) => p_glVertexArrayRangeNV(length, pointer);

	private typealias glVertexAttribL1i64NV_t = function void(uint32 index, int64 x);
	private static glVertexAttribL1i64NV_t p_glVertexAttribL1i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1i64NV(uint32 index, int64 x) => p_glVertexAttribL1i64NV(index, x);

	private typealias glVertexAttribL2i64NV_t = function void(uint32 index, int64 x, int64 y);
	private static glVertexAttribL2i64NV_t p_glVertexAttribL2i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2i64NV(uint32 index, int64 x, int64 y) => p_glVertexAttribL2i64NV(index, x, y);

	private typealias glVertexAttribL3i64NV_t = function void(uint32 index, int64 x, int64 y, int64 z);
	private static glVertexAttribL3i64NV_t p_glVertexAttribL3i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3i64NV(uint32 index, int64 x, int64 y, int64 z) => p_glVertexAttribL3i64NV(index, x, y, z);

	private typealias glVertexAttribL4i64NV_t = function void(uint32 index, int64 x, int64 y, int64 z, int64 w);
	private static glVertexAttribL4i64NV_t p_glVertexAttribL4i64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4i64NV(uint32 index, int64 x, int64 y, int64 z, int64 w) => p_glVertexAttribL4i64NV(index, x, y, z, w);

	private typealias glVertexAttribL1i64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL1i64vNV_t p_glVertexAttribL1i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1i64vNV(uint32 index, void* v) => p_glVertexAttribL1i64vNV(index, v);

	private typealias glVertexAttribL2i64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL2i64vNV_t p_glVertexAttribL2i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2i64vNV(uint32 index, void* v) => p_glVertexAttribL2i64vNV(index, v);

	private typealias glVertexAttribL3i64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL3i64vNV_t p_glVertexAttribL3i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3i64vNV(uint32 index, void* v) => p_glVertexAttribL3i64vNV(index, v);

	private typealias glVertexAttribL4i64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL4i64vNV_t p_glVertexAttribL4i64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4i64vNV(uint32 index, void* v) => p_glVertexAttribL4i64vNV(index, v);

	private typealias glVertexAttribL1ui64NV_t = function void(uint32 index, uint64 x);
	private static glVertexAttribL1ui64NV_t p_glVertexAttribL1ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1ui64NV(uint32 index, uint64 x) => p_glVertexAttribL1ui64NV(index, x);

	private typealias glVertexAttribL2ui64NV_t = function void(uint32 index, uint64 x, uint64 y);
	private static glVertexAttribL2ui64NV_t p_glVertexAttribL2ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2ui64NV(uint32 index, uint64 x, uint64 y) => p_glVertexAttribL2ui64NV(index, x, y);

	private typealias glVertexAttribL3ui64NV_t = function void(uint32 index, uint64 x, uint64 y, uint64 z);
	private static glVertexAttribL3ui64NV_t p_glVertexAttribL3ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3ui64NV(uint32 index, uint64 x, uint64 y, uint64 z) => p_glVertexAttribL3ui64NV(index, x, y, z);

	private typealias glVertexAttribL4ui64NV_t = function void(uint32 index, uint64 x, uint64 y, uint64 z, uint64 w);
	private static glVertexAttribL4ui64NV_t p_glVertexAttribL4ui64NV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4ui64NV(uint32 index, uint64 x, uint64 y, uint64 z, uint64 w) => p_glVertexAttribL4ui64NV(index, x, y, z, w);

	private typealias glVertexAttribL1ui64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL1ui64vNV_t p_glVertexAttribL1ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL1ui64vNV(uint32 index, void* v) => p_glVertexAttribL1ui64vNV(index, v);

	private typealias glVertexAttribL2ui64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL2ui64vNV_t p_glVertexAttribL2ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL2ui64vNV(uint32 index, void* v) => p_glVertexAttribL2ui64vNV(index, v);

	private typealias glVertexAttribL3ui64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL3ui64vNV_t p_glVertexAttribL3ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL3ui64vNV(uint32 index, void* v) => p_glVertexAttribL3ui64vNV(index, v);

	private typealias glVertexAttribL4ui64vNV_t = function void(uint32 index, void* v);
	private static glVertexAttribL4ui64vNV_t p_glVertexAttribL4ui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribL4ui64vNV(uint32 index, void* v) => p_glVertexAttribL4ui64vNV(index, v);

	private typealias glGetVertexAttribLi64vNV_t = function void(uint32 index, VertexAttribEnum pname, void* @params);
	private static glGetVertexAttribLi64vNV_t p_glGetVertexAttribLi64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribLi64vNV(uint32 index, VertexAttribEnum pname, void* @params) => p_glGetVertexAttribLi64vNV(index, pname, @params);

	private typealias glGetVertexAttribLui64vNV_t = function void(uint32 index, VertexAttribEnum pname, void* @params);
	private static glGetVertexAttribLui64vNV_t p_glGetVertexAttribLui64vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribLui64vNV(uint32 index, VertexAttribEnum pname, void* @params) => p_glGetVertexAttribLui64vNV(index, pname, @params);

	private typealias glVertexAttribLFormatNV_t = function void(uint32 index, int32 size, VertexAttribType type, int32 stride);
	private static glVertexAttribLFormatNV_t p_glVertexAttribLFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribLFormatNV(uint32 index, int32 size, VertexAttribType type, int32 stride) => p_glVertexAttribLFormatNV(index, size, type, stride);

	private typealias glBufferAddressRangeNV_t = function void(uint32 pname, uint32 index, uint64 address, int32 length);
	private static glBufferAddressRangeNV_t p_glBufferAddressRangeNV;
	[CallingConvention(GL.CallConv)]
	public static void glBufferAddressRangeNV(uint32 pname, uint32 index, uint64 address, int32 length) => p_glBufferAddressRangeNV(pname, index, address, length);

	private typealias glVertexFormatNV_t = function void(int32 size, VertexPointerType type, int32 stride);
	private static glVertexFormatNV_t p_glVertexFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexFormatNV(int32 size, VertexPointerType type, int32 stride) => p_glVertexFormatNV(size, type, stride);

	private typealias glNormalFormatNV_t = function void(uint32 type, int32 stride);
	private static glNormalFormatNV_t p_glNormalFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glNormalFormatNV(uint32 type, int32 stride) => p_glNormalFormatNV(type, stride);

	private typealias glColorFormatNV_t = function void(int32 size, uint32 type, int32 stride);
	private static glColorFormatNV_t p_glColorFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glColorFormatNV(int32 size, uint32 type, int32 stride) => p_glColorFormatNV(size, type, stride);

	private typealias glIndexFormatNV_t = function void(uint32 type, int32 stride);
	private static glIndexFormatNV_t p_glIndexFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glIndexFormatNV(uint32 type, int32 stride) => p_glIndexFormatNV(type, stride);

	private typealias glTexCoordFormatNV_t = function void(int32 size, uint32 type, int32 stride);
	private static glTexCoordFormatNV_t p_glTexCoordFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoordFormatNV(int32 size, uint32 type, int32 stride) => p_glTexCoordFormatNV(size, type, stride);

	private typealias glEdgeFlagFormatNV_t = function void(int32 stride);
	private static glEdgeFlagFormatNV_t p_glEdgeFlagFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glEdgeFlagFormatNV(int32 stride) => p_glEdgeFlagFormatNV(stride);

	private typealias glSecondaryColorFormatNV_t = function void(int32 size, ColorPointerType type, int32 stride);
	private static glSecondaryColorFormatNV_t p_glSecondaryColorFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glSecondaryColorFormatNV(int32 size, ColorPointerType type, int32 stride) => p_glSecondaryColorFormatNV(size, type, stride);

	private typealias glFogCoordFormatNV_t = function void(uint32 type, int32 stride);
	private static glFogCoordFormatNV_t p_glFogCoordFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glFogCoordFormatNV(uint32 type, int32 stride) => p_glFogCoordFormatNV(type, stride);

	private typealias glVertexAttribFormatNV_t = function void(uint32 index, int32 size, uint32 type, bool normalized, int32 stride);
	private static glVertexAttribFormatNV_t p_glVertexAttribFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribFormatNV(uint32 index, int32 size, uint32 type, bool normalized, int32 stride) => p_glVertexAttribFormatNV(index, size, type, normalized, stride);

	private typealias glVertexAttribIFormatNV_t = function void(uint32 index, int32 size, uint32 type, int32 stride);
	private static glVertexAttribIFormatNV_t p_glVertexAttribIFormatNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribIFormatNV(uint32 index, int32 size, uint32 type, int32 stride) => p_glVertexAttribIFormatNV(index, size, type, stride);

	private typealias glGetIntegerui64i_vNV_t = function void(uint32 value, uint32 index, void* result);
	private static glGetIntegerui64i_vNV_t p_glGetIntegerui64i_vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetIntegerui64i_vNV(uint32 value, uint32 index, void* result) => p_glGetIntegerui64i_vNV(value, index, result);

	private typealias glAreProgramsResidentNV_t = function bool(int32 n, uint32* programs, bool* residences);
	private static glAreProgramsResidentNV_t p_glAreProgramsResidentNV;
	[CallingConvention(GL.CallConv)]
	public static bool glAreProgramsResidentNV(int32 n, uint32* programs, bool* residences) => p_glAreProgramsResidentNV(n, programs, residences);

	private typealias glBindProgramNV_t = function void(uint32 target, uint32 id);
	private static glBindProgramNV_t p_glBindProgramNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindProgramNV(uint32 target, uint32 id) => p_glBindProgramNV(target, id);

	private typealias glDeleteProgramsNV_t = function void(int32 n, uint32* programs);
	private static glDeleteProgramsNV_t p_glDeleteProgramsNV;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteProgramsNV(int32 n, uint32* programs) => p_glDeleteProgramsNV(n, programs);

	private typealias glExecuteProgramNV_t = function void(uint32 target, uint32 id, float* @params);
	private static glExecuteProgramNV_t p_glExecuteProgramNV;
	[CallingConvention(GL.CallConv)]
	public static void glExecuteProgramNV(uint32 target, uint32 id, float* @params) => p_glExecuteProgramNV(target, id, @params);

	private typealias glGenProgramsNV_t = function void(int32 n, uint32* programs);
	private static glGenProgramsNV_t p_glGenProgramsNV;
	[CallingConvention(GL.CallConv)]
	public static void glGenProgramsNV(int32 n, uint32* programs) => p_glGenProgramsNV(n, programs);

	private typealias glGetProgramParameterdvNV_t = function void(uint32 target, uint32 index, uint32 pname, double* @params);
	private static glGetProgramParameterdvNV_t p_glGetProgramParameterdvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramParameterdvNV(uint32 target, uint32 index, uint32 pname, double* @params) => p_glGetProgramParameterdvNV(target, index, pname, @params);

	private typealias glGetProgramParameterfvNV_t = function void(uint32 target, uint32 index, uint32 pname, float* @params);
	private static glGetProgramParameterfvNV_t p_glGetProgramParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramParameterfvNV(uint32 target, uint32 index, uint32 pname, float* @params) => p_glGetProgramParameterfvNV(target, index, pname, @params);

	private typealias glGetProgramivNV_t = function void(uint32 id, uint32 pname, int32* @params);
	private static glGetProgramivNV_t p_glGetProgramivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramivNV(uint32 id, uint32 pname, int32* @params) => p_glGetProgramivNV(id, pname, @params);

	private typealias glGetProgramStringNV_t = function void(uint32 id, uint32 pname, uint8* program);
	private static glGetProgramStringNV_t p_glGetProgramStringNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramStringNV(uint32 id, uint32 pname, uint8* program) => p_glGetProgramStringNV(id, pname, program);

	private typealias glGetTrackMatrixivNV_t = function void(uint32 target, uint32 address, uint32 pname, int32* @params);
	private static glGetTrackMatrixivNV_t p_glGetTrackMatrixivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetTrackMatrixivNV(uint32 target, uint32 address, uint32 pname, int32* @params) => p_glGetTrackMatrixivNV(target, address, pname, @params);

	private typealias glGetVertexAttribdvNV_t = function void(uint32 index, uint32 pname, double* @params);
	private static glGetVertexAttribdvNV_t p_glGetVertexAttribdvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribdvNV(uint32 index, uint32 pname, double* @params) => p_glGetVertexAttribdvNV(index, pname, @params);

	private typealias glGetVertexAttribfvNV_t = function void(uint32 index, uint32 pname, float* @params);
	private static glGetVertexAttribfvNV_t p_glGetVertexAttribfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribfvNV(uint32 index, uint32 pname, float* @params) => p_glGetVertexAttribfvNV(index, pname, @params);

	private typealias glGetVertexAttribivNV_t = function void(uint32 index, uint32 pname, int32* @params);
	private static glGetVertexAttribivNV_t p_glGetVertexAttribivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribivNV(uint32 index, uint32 pname, int32* @params) => p_glGetVertexAttribivNV(index, pname, @params);

	private typealias glGetVertexAttribPointervNV_t = function void(uint32 index, uint32 pname, void** pointer);
	private static glGetVertexAttribPointervNV_t p_glGetVertexAttribPointervNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribPointervNV(uint32 index, uint32 pname, void** pointer) => p_glGetVertexAttribPointervNV(index, pname, pointer);

	private typealias glIsProgramNV_t = function bool(uint32 id);
	private static glIsProgramNV_t p_glIsProgramNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsProgramNV(uint32 id) => p_glIsProgramNV(id);

	private typealias glLoadProgramNV_t = function void(uint32 target, uint32 id, int32 len, uint8* program);
	private static glLoadProgramNV_t p_glLoadProgramNV;
	[CallingConvention(GL.CallConv)]
	public static void glLoadProgramNV(uint32 target, uint32 id, int32 len, uint8* program) => p_glLoadProgramNV(target, id, len, program);

	private typealias glProgramParameter4dNV_t = function void(uint32 target, uint32 index, double x, double y, double z, double w);
	private static glProgramParameter4dNV_t p_glProgramParameter4dNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameter4dNV(uint32 target, uint32 index, double x, double y, double z, double w) => p_glProgramParameter4dNV(target, index, x, y, z, w);

	private typealias glProgramParameter4dvNV_t = function void(uint32 target, uint32 index, double* v);
	private static glProgramParameter4dvNV_t p_glProgramParameter4dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameter4dvNV(uint32 target, uint32 index, double* v) => p_glProgramParameter4dvNV(target, index, v);

	private typealias glProgramParameter4fNV_t = function void(uint32 target, uint32 index, float x, float y, float z, float w);
	private static glProgramParameter4fNV_t p_glProgramParameter4fNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameter4fNV(uint32 target, uint32 index, float x, float y, float z, float w) => p_glProgramParameter4fNV(target, index, x, y, z, w);

	private typealias glProgramParameter4fvNV_t = function void(uint32 target, uint32 index, float* v);
	private static glProgramParameter4fvNV_t p_glProgramParameter4fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameter4fvNV(uint32 target, uint32 index, float* v) => p_glProgramParameter4fvNV(target, index, v);

	private typealias glProgramParameters4dvNV_t = function void(uint32 target, uint32 index, int32 count, double* v);
	private static glProgramParameters4dvNV_t p_glProgramParameters4dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameters4dvNV(uint32 target, uint32 index, int32 count, double* v) => p_glProgramParameters4dvNV(target, index, count, v);

	private typealias glProgramParameters4fvNV_t = function void(uint32 target, uint32 index, int32 count, float* v);
	private static glProgramParameters4fvNV_t p_glProgramParameters4fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glProgramParameters4fvNV(uint32 target, uint32 index, int32 count, float* v) => p_glProgramParameters4fvNV(target, index, count, v);

	private typealias glRequestResidentProgramsNV_t = function void(int32 n, uint32* programs);
	private static glRequestResidentProgramsNV_t p_glRequestResidentProgramsNV;
	[CallingConvention(GL.CallConv)]
	public static void glRequestResidentProgramsNV(int32 n, uint32* programs) => p_glRequestResidentProgramsNV(n, programs);

	private typealias glTrackMatrixNV_t = function void(uint32 target, uint32 address, uint32 matrix, uint32 transform);
	private static glTrackMatrixNV_t p_glTrackMatrixNV;
	[CallingConvention(GL.CallConv)]
	public static void glTrackMatrixNV(uint32 target, uint32 address, uint32 matrix, uint32 transform) => p_glTrackMatrixNV(target, address, matrix, transform);

	private typealias glVertexAttribPointerNV_t = function void(uint32 index, int32 fsize, uint32 type, int32 stride, void* pointer);
	private static glVertexAttribPointerNV_t p_glVertexAttribPointerNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribPointerNV(uint32 index, int32 fsize, uint32 type, int32 stride, void* pointer) => p_glVertexAttribPointerNV(index, fsize, type, stride, pointer);

	private typealias glVertexAttrib1dNV_t = function void(uint32 index, double x);
	private static glVertexAttrib1dNV_t p_glVertexAttrib1dNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1dNV(uint32 index, double x) => p_glVertexAttrib1dNV(index, x);

	private typealias glVertexAttrib1dvNV_t = function void(uint32 index, double* v);
	private static glVertexAttrib1dvNV_t p_glVertexAttrib1dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1dvNV(uint32 index, double* v) => p_glVertexAttrib1dvNV(index, v);

	private typealias glVertexAttrib1fNV_t = function void(uint32 index, float x);
	private static glVertexAttrib1fNV_t p_glVertexAttrib1fNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1fNV(uint32 index, float x) => p_glVertexAttrib1fNV(index, x);

	private typealias glVertexAttrib1fvNV_t = function void(uint32 index, float* v);
	private static glVertexAttrib1fvNV_t p_glVertexAttrib1fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1fvNV(uint32 index, float* v) => p_glVertexAttrib1fvNV(index, v);

	private typealias glVertexAttrib1sNV_t = function void(uint32 index, int16 x);
	private static glVertexAttrib1sNV_t p_glVertexAttrib1sNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1sNV(uint32 index, int16 x) => p_glVertexAttrib1sNV(index, x);

	private typealias glVertexAttrib1svNV_t = function void(uint32 index, int16* v);
	private static glVertexAttrib1svNV_t p_glVertexAttrib1svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib1svNV(uint32 index, int16* v) => p_glVertexAttrib1svNV(index, v);

	private typealias glVertexAttrib2dNV_t = function void(uint32 index, double x, double y);
	private static glVertexAttrib2dNV_t p_glVertexAttrib2dNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2dNV(uint32 index, double x, double y) => p_glVertexAttrib2dNV(index, x, y);

	private typealias glVertexAttrib2dvNV_t = function void(uint32 index, double* v);
	private static glVertexAttrib2dvNV_t p_glVertexAttrib2dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2dvNV(uint32 index, double* v) => p_glVertexAttrib2dvNV(index, v);

	private typealias glVertexAttrib2fNV_t = function void(uint32 index, float x, float y);
	private static glVertexAttrib2fNV_t p_glVertexAttrib2fNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2fNV(uint32 index, float x, float y) => p_glVertexAttrib2fNV(index, x, y);

	private typealias glVertexAttrib2fvNV_t = function void(uint32 index, float* v);
	private static glVertexAttrib2fvNV_t p_glVertexAttrib2fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2fvNV(uint32 index, float* v) => p_glVertexAttrib2fvNV(index, v);

	private typealias glVertexAttrib2sNV_t = function void(uint32 index, int16 x, int16 y);
	private static glVertexAttrib2sNV_t p_glVertexAttrib2sNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2sNV(uint32 index, int16 x, int16 y) => p_glVertexAttrib2sNV(index, x, y);

	private typealias glVertexAttrib2svNV_t = function void(uint32 index, int16* v);
	private static glVertexAttrib2svNV_t p_glVertexAttrib2svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib2svNV(uint32 index, int16* v) => p_glVertexAttrib2svNV(index, v);

	private typealias glVertexAttrib3dNV_t = function void(uint32 index, double x, double y, double z);
	private static glVertexAttrib3dNV_t p_glVertexAttrib3dNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3dNV(uint32 index, double x, double y, double z) => p_glVertexAttrib3dNV(index, x, y, z);

	private typealias glVertexAttrib3dvNV_t = function void(uint32 index, double* v);
	private static glVertexAttrib3dvNV_t p_glVertexAttrib3dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3dvNV(uint32 index, double* v) => p_glVertexAttrib3dvNV(index, v);

	private typealias glVertexAttrib3fNV_t = function void(uint32 index, float x, float y, float z);
	private static glVertexAttrib3fNV_t p_glVertexAttrib3fNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3fNV(uint32 index, float x, float y, float z) => p_glVertexAttrib3fNV(index, x, y, z);

	private typealias glVertexAttrib3fvNV_t = function void(uint32 index, float* v);
	private static glVertexAttrib3fvNV_t p_glVertexAttrib3fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3fvNV(uint32 index, float* v) => p_glVertexAttrib3fvNV(index, v);

	private typealias glVertexAttrib3sNV_t = function void(uint32 index, int16 x, int16 y, int16 z);
	private static glVertexAttrib3sNV_t p_glVertexAttrib3sNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3sNV(uint32 index, int16 x, int16 y, int16 z) => p_glVertexAttrib3sNV(index, x, y, z);

	private typealias glVertexAttrib3svNV_t = function void(uint32 index, int16* v);
	private static glVertexAttrib3svNV_t p_glVertexAttrib3svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib3svNV(uint32 index, int16* v) => p_glVertexAttrib3svNV(index, v);

	private typealias glVertexAttrib4dNV_t = function void(uint32 index, double x, double y, double z, double w);
	private static glVertexAttrib4dNV_t p_glVertexAttrib4dNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4dNV(uint32 index, double x, double y, double z, double w) => p_glVertexAttrib4dNV(index, x, y, z, w);

	private typealias glVertexAttrib4dvNV_t = function void(uint32 index, double* v);
	private static glVertexAttrib4dvNV_t p_glVertexAttrib4dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4dvNV(uint32 index, double* v) => p_glVertexAttrib4dvNV(index, v);

	private typealias glVertexAttrib4fNV_t = function void(uint32 index, float x, float y, float z, float w);
	private static glVertexAttrib4fNV_t p_glVertexAttrib4fNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4fNV(uint32 index, float x, float y, float z, float w) => p_glVertexAttrib4fNV(index, x, y, z, w);

	private typealias glVertexAttrib4fvNV_t = function void(uint32 index, float* v);
	private static glVertexAttrib4fvNV_t p_glVertexAttrib4fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4fvNV(uint32 index, float* v) => p_glVertexAttrib4fvNV(index, v);

	private typealias glVertexAttrib4sNV_t = function void(uint32 index, int16 x, int16 y, int16 z, int16 w);
	private static glVertexAttrib4sNV_t p_glVertexAttrib4sNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4sNV(uint32 index, int16 x, int16 y, int16 z, int16 w) => p_glVertexAttrib4sNV(index, x, y, z, w);

	private typealias glVertexAttrib4svNV_t = function void(uint32 index, int16* v);
	private static glVertexAttrib4svNV_t p_glVertexAttrib4svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4svNV(uint32 index, int16* v) => p_glVertexAttrib4svNV(index, v);

	private typealias glVertexAttrib4ubNV_t = function void(uint32 index, uint8 x, uint8 y, uint8 z, uint8 w);
	private static glVertexAttrib4ubNV_t p_glVertexAttrib4ubNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4ubNV(uint32 index, uint8 x, uint8 y, uint8 z, uint8 w) => p_glVertexAttrib4ubNV(index, x, y, z, w);

	private typealias glVertexAttrib4ubvNV_t = function void(uint32 index, uint8* v);
	private static glVertexAttrib4ubvNV_t p_glVertexAttrib4ubvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttrib4ubvNV(uint32 index, uint8* v) => p_glVertexAttrib4ubvNV(index, v);

	private typealias glVertexAttribs1dvNV_t = function void(uint32 index, int32 count, double* v);
	private static glVertexAttribs1dvNV_t p_glVertexAttribs1dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs1dvNV(uint32 index, int32 count, double* v) => p_glVertexAttribs1dvNV(index, count, v);

	private typealias glVertexAttribs1fvNV_t = function void(uint32 index, int32 count, float* v);
	private static glVertexAttribs1fvNV_t p_glVertexAttribs1fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs1fvNV(uint32 index, int32 count, float* v) => p_glVertexAttribs1fvNV(index, count, v);

	private typealias glVertexAttribs1svNV_t = function void(uint32 index, int32 count, int16* v);
	private static glVertexAttribs1svNV_t p_glVertexAttribs1svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs1svNV(uint32 index, int32 count, int16* v) => p_glVertexAttribs1svNV(index, count, v);

	private typealias glVertexAttribs2dvNV_t = function void(uint32 index, int32 count, double* v);
	private static glVertexAttribs2dvNV_t p_glVertexAttribs2dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs2dvNV(uint32 index, int32 count, double* v) => p_glVertexAttribs2dvNV(index, count, v);

	private typealias glVertexAttribs2fvNV_t = function void(uint32 index, int32 count, float* v);
	private static glVertexAttribs2fvNV_t p_glVertexAttribs2fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs2fvNV(uint32 index, int32 count, float* v) => p_glVertexAttribs2fvNV(index, count, v);

	private typealias glVertexAttribs2svNV_t = function void(uint32 index, int32 count, int16* v);
	private static glVertexAttribs2svNV_t p_glVertexAttribs2svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs2svNV(uint32 index, int32 count, int16* v) => p_glVertexAttribs2svNV(index, count, v);

	private typealias glVertexAttribs3dvNV_t = function void(uint32 index, int32 count, double* v);
	private static glVertexAttribs3dvNV_t p_glVertexAttribs3dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs3dvNV(uint32 index, int32 count, double* v) => p_glVertexAttribs3dvNV(index, count, v);

	private typealias glVertexAttribs3fvNV_t = function void(uint32 index, int32 count, float* v);
	private static glVertexAttribs3fvNV_t p_glVertexAttribs3fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs3fvNV(uint32 index, int32 count, float* v) => p_glVertexAttribs3fvNV(index, count, v);

	private typealias glVertexAttribs3svNV_t = function void(uint32 index, int32 count, int16* v);
	private static glVertexAttribs3svNV_t p_glVertexAttribs3svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs3svNV(uint32 index, int32 count, int16* v) => p_glVertexAttribs3svNV(index, count, v);

	private typealias glVertexAttribs4dvNV_t = function void(uint32 index, int32 count, double* v);
	private static glVertexAttribs4dvNV_t p_glVertexAttribs4dvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs4dvNV(uint32 index, int32 count, double* v) => p_glVertexAttribs4dvNV(index, count, v);

	private typealias glVertexAttribs4fvNV_t = function void(uint32 index, int32 count, float* v);
	private static glVertexAttribs4fvNV_t p_glVertexAttribs4fvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs4fvNV(uint32 index, int32 count, float* v) => p_glVertexAttribs4fvNV(index, count, v);

	private typealias glVertexAttribs4svNV_t = function void(uint32 index, int32 count, int16* v);
	private static glVertexAttribs4svNV_t p_glVertexAttribs4svNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs4svNV(uint32 index, int32 count, int16* v) => p_glVertexAttribs4svNV(index, count, v);

	private typealias glVertexAttribs4ubvNV_t = function void(uint32 index, int32 count, uint8* v);
	private static glVertexAttribs4ubvNV_t p_glVertexAttribs4ubvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribs4ubvNV(uint32 index, int32 count, uint8* v) => p_glVertexAttribs4ubvNV(index, count, v);

	private typealias glVertexAttribI1iEXT_t = function void(uint32 index, int32 x);
	private static glVertexAttribI1iEXT_t p_glVertexAttribI1iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1iEXT(uint32 index, int32 x) => p_glVertexAttribI1iEXT(index, x);

	private typealias glVertexAttribI2iEXT_t = function void(uint32 index, int32 x, int32 y);
	private static glVertexAttribI2iEXT_t p_glVertexAttribI2iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2iEXT(uint32 index, int32 x, int32 y) => p_glVertexAttribI2iEXT(index, x, y);

	private typealias glVertexAttribI3iEXT_t = function void(uint32 index, int32 x, int32 y, int32 z);
	private static glVertexAttribI3iEXT_t p_glVertexAttribI3iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3iEXT(uint32 index, int32 x, int32 y, int32 z) => p_glVertexAttribI3iEXT(index, x, y, z);

	private typealias glVertexAttribI4iEXT_t = function void(uint32 index, int32 x, int32 y, int32 z, int32 w);
	private static glVertexAttribI4iEXT_t p_glVertexAttribI4iEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4iEXT(uint32 index, int32 x, int32 y, int32 z, int32 w) => p_glVertexAttribI4iEXT(index, x, y, z, w);

	private typealias glVertexAttribI1uiEXT_t = function void(uint32 index, uint32 x);
	private static glVertexAttribI1uiEXT_t p_glVertexAttribI1uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1uiEXT(uint32 index, uint32 x) => p_glVertexAttribI1uiEXT(index, x);

	private typealias glVertexAttribI2uiEXT_t = function void(uint32 index, uint32 x, uint32 y);
	private static glVertexAttribI2uiEXT_t p_glVertexAttribI2uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2uiEXT(uint32 index, uint32 x, uint32 y) => p_glVertexAttribI2uiEXT(index, x, y);

	private typealias glVertexAttribI3uiEXT_t = function void(uint32 index, uint32 x, uint32 y, uint32 z);
	private static glVertexAttribI3uiEXT_t p_glVertexAttribI3uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3uiEXT(uint32 index, uint32 x, uint32 y, uint32 z) => p_glVertexAttribI3uiEXT(index, x, y, z);

	private typealias glVertexAttribI4uiEXT_t = function void(uint32 index, uint32 x, uint32 y, uint32 z, uint32 w);
	private static glVertexAttribI4uiEXT_t p_glVertexAttribI4uiEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4uiEXT(uint32 index, uint32 x, uint32 y, uint32 z, uint32 w) => p_glVertexAttribI4uiEXT(index, x, y, z, w);

	private typealias glVertexAttribI1ivEXT_t = function void(uint32 index, int32* v);
	private static glVertexAttribI1ivEXT_t p_glVertexAttribI1ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1ivEXT(uint32 index, int32* v) => p_glVertexAttribI1ivEXT(index, v);

	private typealias glVertexAttribI2ivEXT_t = function void(uint32 index, int32* v);
	private static glVertexAttribI2ivEXT_t p_glVertexAttribI2ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2ivEXT(uint32 index, int32* v) => p_glVertexAttribI2ivEXT(index, v);

	private typealias glVertexAttribI3ivEXT_t = function void(uint32 index, int32* v);
	private static glVertexAttribI3ivEXT_t p_glVertexAttribI3ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3ivEXT(uint32 index, int32* v) => p_glVertexAttribI3ivEXT(index, v);

	private typealias glVertexAttribI4ivEXT_t = function void(uint32 index, int32* v);
	private static glVertexAttribI4ivEXT_t p_glVertexAttribI4ivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4ivEXT(uint32 index, int32* v) => p_glVertexAttribI4ivEXT(index, v);

	private typealias glVertexAttribI1uivEXT_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI1uivEXT_t p_glVertexAttribI1uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI1uivEXT(uint32 index, uint32* v) => p_glVertexAttribI1uivEXT(index, v);

	private typealias glVertexAttribI2uivEXT_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI2uivEXT_t p_glVertexAttribI2uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI2uivEXT(uint32 index, uint32* v) => p_glVertexAttribI2uivEXT(index, v);

	private typealias glVertexAttribI3uivEXT_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI3uivEXT_t p_glVertexAttribI3uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI3uivEXT(uint32 index, uint32* v) => p_glVertexAttribI3uivEXT(index, v);

	private typealias glVertexAttribI4uivEXT_t = function void(uint32 index, uint32* v);
	private static glVertexAttribI4uivEXT_t p_glVertexAttribI4uivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4uivEXT(uint32 index, uint32* v) => p_glVertexAttribI4uivEXT(index, v);

	private typealias glVertexAttribI4bvEXT_t = function void(uint32 index, uint8* v);
	private static glVertexAttribI4bvEXT_t p_glVertexAttribI4bvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4bvEXT(uint32 index, uint8* v) => p_glVertexAttribI4bvEXT(index, v);

	private typealias glVertexAttribI4svEXT_t = function void(uint32 index, int16* v);
	private static glVertexAttribI4svEXT_t p_glVertexAttribI4svEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4svEXT(uint32 index, int16* v) => p_glVertexAttribI4svEXT(index, v);

	private typealias glVertexAttribI4ubvEXT_t = function void(uint32 index, uint8* v);
	private static glVertexAttribI4ubvEXT_t p_glVertexAttribI4ubvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4ubvEXT(uint32 index, uint8* v) => p_glVertexAttribI4ubvEXT(index, v);

	private typealias glVertexAttribI4usvEXT_t = function void(uint32 index, int16* v);
	private static glVertexAttribI4usvEXT_t p_glVertexAttribI4usvEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribI4usvEXT(uint32 index, int16* v) => p_glVertexAttribI4usvEXT(index, v);

	private typealias glVertexAttribIPointerEXT_t = function void(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer);
	private static glVertexAttribIPointerEXT_t p_glVertexAttribIPointerEXT;
	[CallingConvention(GL.CallConv)]
	public static void glVertexAttribIPointerEXT(uint32 index, int32 size, VertexAttribPointerType type, int32 stride, void* pointer) => p_glVertexAttribIPointerEXT(index, size, type, stride, pointer);

	private typealias glGetVertexAttribIivEXT_t = function void(uint32 index, VertexAttribEnum pname, int32* @params);
	private static glGetVertexAttribIivEXT_t p_glGetVertexAttribIivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribIivEXT(uint32 index, VertexAttribEnum pname, int32* @params) => p_glGetVertexAttribIivEXT(index, pname, @params);

	private typealias glGetVertexAttribIuivEXT_t = function void(uint32 index, VertexAttribEnum pname, uint32* @params);
	private static glGetVertexAttribIuivEXT_t p_glGetVertexAttribIuivEXT;
	[CallingConvention(GL.CallConv)]
	public static void glGetVertexAttribIuivEXT(uint32 index, VertexAttribEnum pname, uint32* @params) => p_glGetVertexAttribIuivEXT(index, pname, @params);

	private typealias glBeginVideoCaptureNV_t = function void(uint32 video_capture_slot);
	private static glBeginVideoCaptureNV_t p_glBeginVideoCaptureNV;
	[CallingConvention(GL.CallConv)]
	public static void glBeginVideoCaptureNV(uint32 video_capture_slot) => p_glBeginVideoCaptureNV(video_capture_slot);

	private typealias glBindVideoCaptureStreamBufferNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 frame_region, int32 offset);
	private static glBindVideoCaptureStreamBufferNV_t p_glBindVideoCaptureStreamBufferNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindVideoCaptureStreamBufferNV(uint32 video_capture_slot, uint32 stream, uint32 frame_region, int32 offset) => p_glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);

	private typealias glBindVideoCaptureStreamTextureNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 frame_region, uint32 target, uint32 texture);
	private static glBindVideoCaptureStreamTextureNV_t p_glBindVideoCaptureStreamTextureNV;
	[CallingConvention(GL.CallConv)]
	public static void glBindVideoCaptureStreamTextureNV(uint32 video_capture_slot, uint32 stream, uint32 frame_region, uint32 target, uint32 texture) => p_glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);

	private typealias glEndVideoCaptureNV_t = function void(uint32 video_capture_slot);
	private static glEndVideoCaptureNV_t p_glEndVideoCaptureNV;
	[CallingConvention(GL.CallConv)]
	public static void glEndVideoCaptureNV(uint32 video_capture_slot) => p_glEndVideoCaptureNV(video_capture_slot);

	private typealias glGetVideoCaptureivNV_t = function void(uint32 video_capture_slot, uint32 pname, int32* @params);
	private static glGetVideoCaptureivNV_t p_glGetVideoCaptureivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideoCaptureivNV(uint32 video_capture_slot, uint32 pname, int32* @params) => p_glGetVideoCaptureivNV(video_capture_slot, pname, @params);

	private typealias glGetVideoCaptureStreamivNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 pname, int32* @params);
	private static glGetVideoCaptureStreamivNV_t p_glGetVideoCaptureStreamivNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideoCaptureStreamivNV(uint32 video_capture_slot, uint32 stream, uint32 pname, int32* @params) => p_glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, @params);

	private typealias glGetVideoCaptureStreamfvNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 pname, float* @params);
	private static glGetVideoCaptureStreamfvNV_t p_glGetVideoCaptureStreamfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideoCaptureStreamfvNV(uint32 video_capture_slot, uint32 stream, uint32 pname, float* @params) => p_glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, @params);

	private typealias glGetVideoCaptureStreamdvNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 pname, double* @params);
	private static glGetVideoCaptureStreamdvNV_t p_glGetVideoCaptureStreamdvNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetVideoCaptureStreamdvNV(uint32 video_capture_slot, uint32 stream, uint32 pname, double* @params) => p_glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, @params);

	private typealias glVideoCaptureNV_t = function uint32(uint32 video_capture_slot, uint32* sequence_num, void* capture_time);
	private static glVideoCaptureNV_t p_glVideoCaptureNV;
	[CallingConvention(GL.CallConv)]
	public static uint32 glVideoCaptureNV(uint32 video_capture_slot, uint32* sequence_num, void* capture_time) => p_glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);

	private typealias glVideoCaptureStreamParameterivNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 pname, int32* @params);
	private static glVideoCaptureStreamParameterivNV_t p_glVideoCaptureStreamParameterivNV;
	[CallingConvention(GL.CallConv)]
	public static void glVideoCaptureStreamParameterivNV(uint32 video_capture_slot, uint32 stream, uint32 pname, int32* @params) => p_glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, @params);

	private typealias glVideoCaptureStreamParameterfvNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 pname, float* @params);
	private static glVideoCaptureStreamParameterfvNV_t p_glVideoCaptureStreamParameterfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVideoCaptureStreamParameterfvNV(uint32 video_capture_slot, uint32 stream, uint32 pname, float* @params) => p_glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, @params);

	private typealias glVideoCaptureStreamParameterdvNV_t = function void(uint32 video_capture_slot, uint32 stream, uint32 pname, double* @params);
	private static glVideoCaptureStreamParameterdvNV_t p_glVideoCaptureStreamParameterdvNV;
	[CallingConvention(GL.CallConv)]
	public static void glVideoCaptureStreamParameterdvNV(uint32 video_capture_slot, uint32 stream, uint32 pname, double* @params) => p_glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, @params);

	private typealias glViewportArrayvNV_t = function void(uint32 first, int32 count, float* v);
	private static glViewportArrayvNV_t p_glViewportArrayvNV;
	[CallingConvention(GL.CallConv)]
	public static void glViewportArrayvNV(uint32 first, int32 count, float* v) => p_glViewportArrayvNV(first, count, v);

	private typealias glViewportIndexedfNV_t = function void(uint32 index, float x, float y, float w, float h);
	private static glViewportIndexedfNV_t p_glViewportIndexedfNV;
	[CallingConvention(GL.CallConv)]
	public static void glViewportIndexedfNV(uint32 index, float x, float y, float w, float h) => p_glViewportIndexedfNV(index, x, y, w, h);

	private typealias glViewportIndexedfvNV_t = function void(uint32 index, float* v);
	private static glViewportIndexedfvNV_t p_glViewportIndexedfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glViewportIndexedfvNV(uint32 index, float* v) => p_glViewportIndexedfvNV(index, v);

	private typealias glScissorArrayvNV_t = function void(uint32 first, int32 count, int32* v);
	private static glScissorArrayvNV_t p_glScissorArrayvNV;
	[CallingConvention(GL.CallConv)]
	public static void glScissorArrayvNV(uint32 first, int32 count, int32* v) => p_glScissorArrayvNV(first, count, v);

	private typealias glScissorIndexedNV_t = function void(uint32 index, int32 left, int32 bottom, int32 width, int32 height);
	private static glScissorIndexedNV_t p_glScissorIndexedNV;
	[CallingConvention(GL.CallConv)]
	public static void glScissorIndexedNV(uint32 index, int32 left, int32 bottom, int32 width, int32 height) => p_glScissorIndexedNV(index, left, bottom, width, height);

	private typealias glScissorIndexedvNV_t = function void(uint32 index, int32* v);
	private static glScissorIndexedvNV_t p_glScissorIndexedvNV;
	[CallingConvention(GL.CallConv)]
	public static void glScissorIndexedvNV(uint32 index, int32* v) => p_glScissorIndexedvNV(index, v);

	private typealias glDepthRangeArrayfvNV_t = function void(uint32 first, int32 count, float* v);
	private static glDepthRangeArrayfvNV_t p_glDepthRangeArrayfvNV;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangeArrayfvNV(uint32 first, int32 count, float* v) => p_glDepthRangeArrayfvNV(first, count, v);

	private typealias glDepthRangeIndexedfNV_t = function void(uint32 index, float n, float f);
	private static glDepthRangeIndexedfNV_t p_glDepthRangeIndexedfNV;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangeIndexedfNV(uint32 index, float n, float f) => p_glDepthRangeIndexedfNV(index, n, f);

	private typealias glGetFloati_vNV_t = function void(TypeEnum target, uint32 index, float* data);
	private static glGetFloati_vNV_t p_glGetFloati_vNV;
	[CallingConvention(GL.CallConv)]
	public static void glGetFloati_vNV(TypeEnum target, uint32 index, float* data) => p_glGetFloati_vNV(target, index, data);

	private typealias glEnableiNV_t = function void(EnableCap target, uint32 index);
	private static glEnableiNV_t p_glEnableiNV;
	[CallingConvention(GL.CallConv)]
	public static void glEnableiNV(EnableCap target, uint32 index) => p_glEnableiNV(target, index);

	private typealias glDisableiNV_t = function void(EnableCap target, uint32 index);
	private static glDisableiNV_t p_glDisableiNV;
	[CallingConvention(GL.CallConv)]
	public static void glDisableiNV(EnableCap target, uint32 index) => p_glDisableiNV(target, index);

	private typealias glIsEnablediNV_t = function bool(EnableCap target, uint32 index);
	private static glIsEnablediNV_t p_glIsEnablediNV;
	[CallingConvention(GL.CallConv)]
	public static bool glIsEnablediNV(EnableCap target, uint32 index) => p_glIsEnablediNV(target, index);

	private typealias glViewportSwizzleNV_t = function void(uint32 index, uint32 swizzlex, uint32 swizzley, uint32 swizzlez, uint32 swizzlew);
	private static glViewportSwizzleNV_t p_glViewportSwizzleNV;
	[CallingConvention(GL.CallConv)]
	public static void glViewportSwizzleNV(uint32 index, uint32 swizzlex, uint32 swizzley, uint32 swizzlez, uint32 swizzlew) => p_glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);

	private typealias glEGLImageTargetTexture2DOES_t = function void(uint32 target, void* image);
	private static glEGLImageTargetTexture2DOES_t p_glEGLImageTargetTexture2DOES;
	[CallingConvention(GL.CallConv)]
	public static void glEGLImageTargetTexture2DOES(uint32 target, void* image) => p_glEGLImageTargetTexture2DOES(target, image);

	private typealias glEGLImageTargetRenderbufferStorageOES_t = function void(uint32 target, void* image);
	private static glEGLImageTargetRenderbufferStorageOES_t p_glEGLImageTargetRenderbufferStorageOES;
	[CallingConvention(GL.CallConv)]
	public static void glEGLImageTargetRenderbufferStorageOES(uint32 target, void* image) => p_glEGLImageTargetRenderbufferStorageOES(target, image);

	private typealias glBlendEquationSeparateOES_t = function void(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparateOES_t p_glBlendEquationSeparateOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparateOES(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparateOES(modeRGB, modeAlpha);

	private typealias glBlendFuncSeparateOES_t = function void(BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
	private static glBlendFuncSeparateOES_t p_glBlendFuncSeparateOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparateOES(BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) => p_glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha);

	private typealias glBlendEquationOES_t = function void(BlendEquationModeEXT mode);
	private static glBlendEquationOES_t p_glBlendEquationOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationOES(BlendEquationModeEXT mode) => p_glBlendEquationOES(mode);

	private typealias glMultiTexCoord1bOES_t = function void(TextureUnit texture, int8 s);
	private static glMultiTexCoord1bOES_t p_glMultiTexCoord1bOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1bOES(TextureUnit texture, int8 s) => p_glMultiTexCoord1bOES(texture, s);

	private typealias glMultiTexCoord1bvOES_t = function void(TextureUnit texture, uint8* coords);
	private static glMultiTexCoord1bvOES_t p_glMultiTexCoord1bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1bvOES(TextureUnit texture, uint8* coords) => p_glMultiTexCoord1bvOES(texture, coords);

	private typealias glMultiTexCoord2bOES_t = function void(TextureUnit texture, int8 s, int8 t);
	private static glMultiTexCoord2bOES_t p_glMultiTexCoord2bOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2bOES(TextureUnit texture, int8 s, int8 t) => p_glMultiTexCoord2bOES(texture, s, t);

	private typealias glMultiTexCoord2bvOES_t = function void(TextureUnit texture, uint8* coords);
	private static glMultiTexCoord2bvOES_t p_glMultiTexCoord2bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2bvOES(TextureUnit texture, uint8* coords) => p_glMultiTexCoord2bvOES(texture, coords);

	private typealias glMultiTexCoord3bOES_t = function void(TextureUnit texture, int8 s, int8 t, int8 r);
	private static glMultiTexCoord3bOES_t p_glMultiTexCoord3bOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3bOES(TextureUnit texture, int8 s, int8 t, int8 r) => p_glMultiTexCoord3bOES(texture, s, t, r);

	private typealias glMultiTexCoord3bvOES_t = function void(TextureUnit texture, uint8* coords);
	private static glMultiTexCoord3bvOES_t p_glMultiTexCoord3bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3bvOES(TextureUnit texture, uint8* coords) => p_glMultiTexCoord3bvOES(texture, coords);

	private typealias glMultiTexCoord4bOES_t = function void(TextureUnit texture, int8 s, int8 t, int8 r, int8 q);
	private static glMultiTexCoord4bOES_t p_glMultiTexCoord4bOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4bOES(TextureUnit texture, int8 s, int8 t, int8 r, int8 q) => p_glMultiTexCoord4bOES(texture, s, t, r, q);

	private typealias glMultiTexCoord4bvOES_t = function void(TextureUnit texture, uint8* coords);
	private static glMultiTexCoord4bvOES_t p_glMultiTexCoord4bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4bvOES(TextureUnit texture, uint8* coords) => p_glMultiTexCoord4bvOES(texture, coords);

	private typealias glTexCoord1bOES_t = function void(int8 s);
	private static glTexCoord1bOES_t p_glTexCoord1bOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord1bOES(int8 s) => p_glTexCoord1bOES(s);

	private typealias glTexCoord1bvOES_t = function void(uint8* coords);
	private static glTexCoord1bvOES_t p_glTexCoord1bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord1bvOES(uint8* coords) => p_glTexCoord1bvOES(coords);

	private typealias glTexCoord2bOES_t = function void(int8 s, int8 t);
	private static glTexCoord2bOES_t p_glTexCoord2bOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2bOES(int8 s, int8 t) => p_glTexCoord2bOES(s, t);

	private typealias glTexCoord2bvOES_t = function void(uint8* coords);
	private static glTexCoord2bvOES_t p_glTexCoord2bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2bvOES(uint8* coords) => p_glTexCoord2bvOES(coords);

	private typealias glTexCoord3bOES_t = function void(int8 s, int8 t, int8 r);
	private static glTexCoord3bOES_t p_glTexCoord3bOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord3bOES(int8 s, int8 t, int8 r) => p_glTexCoord3bOES(s, t, r);

	private typealias glTexCoord3bvOES_t = function void(uint8* coords);
	private static glTexCoord3bvOES_t p_glTexCoord3bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord3bvOES(uint8* coords) => p_glTexCoord3bvOES(coords);

	private typealias glTexCoord4bOES_t = function void(int8 s, int8 t, int8 r, int8 q);
	private static glTexCoord4bOES_t p_glTexCoord4bOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4bOES(int8 s, int8 t, int8 r, int8 q) => p_glTexCoord4bOES(s, t, r, q);

	private typealias glTexCoord4bvOES_t = function void(uint8* coords);
	private static glTexCoord4bvOES_t p_glTexCoord4bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4bvOES(uint8* coords) => p_glTexCoord4bvOES(coords);

	private typealias glVertex2bOES_t = function void(int8 x, int8 y);
	private static glVertex2bOES_t p_glVertex2bOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex2bOES(int8 x, int8 y) => p_glVertex2bOES(x, y);

	private typealias glVertex2bvOES_t = function void(uint8* coords);
	private static glVertex2bvOES_t p_glVertex2bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex2bvOES(uint8* coords) => p_glVertex2bvOES(coords);

	private typealias glVertex3bOES_t = function void(int8 x, int8 y, int8 z);
	private static glVertex3bOES_t p_glVertex3bOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex3bOES(int8 x, int8 y, int8 z) => p_glVertex3bOES(x, y, z);

	private typealias glVertex3bvOES_t = function void(uint8* coords);
	private static glVertex3bvOES_t p_glVertex3bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex3bvOES(uint8* coords) => p_glVertex3bvOES(coords);

	private typealias glVertex4bOES_t = function void(int8 x, int8 y, int8 z, int8 w);
	private static glVertex4bOES_t p_glVertex4bOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex4bOES(int8 x, int8 y, int8 z, int8 w) => p_glVertex4bOES(x, y, z, w);

	private typealias glVertex4bvOES_t = function void(uint8* coords);
	private static glVertex4bvOES_t p_glVertex4bvOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex4bvOES(uint8* coords) => p_glVertex4bvOES(coords);

	private typealias glCopyImageSubDataOES_t = function void(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth);
	private static glCopyImageSubDataOES_t p_glCopyImageSubDataOES;
	[CallingConvention(GL.CallConv)]
	public static void glCopyImageSubDataOES(uint32 srcName, CopyBufferSubDataTarget srcTarget, int32 srcLevel, int32 srcX, int32 srcY, int32 srcZ, uint32 dstName, CopyBufferSubDataTarget dstTarget, int32 dstLevel, int32 dstX, int32 dstY, int32 dstZ, int32 srcWidth, int32 srcHeight, int32 srcDepth) => p_glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

	private typealias glEnableiOES_t = function void(EnableCap target, uint32 index);
	private static glEnableiOES_t p_glEnableiOES;
	[CallingConvention(GL.CallConv)]
	public static void glEnableiOES(EnableCap target, uint32 index) => p_glEnableiOES(target, index);

	private typealias glDisableiOES_t = function void(EnableCap target, uint32 index);
	private static glDisableiOES_t p_glDisableiOES;
	[CallingConvention(GL.CallConv)]
	public static void glDisableiOES(EnableCap target, uint32 index) => p_glDisableiOES(target, index);

	private typealias glBlendEquationiOES_t = function void(uint32 buf, BlendEquationModeEXT mode);
	private static glBlendEquationiOES_t p_glBlendEquationiOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationiOES(uint32 buf, BlendEquationModeEXT mode) => p_glBlendEquationiOES(buf, mode);

	private typealias glBlendEquationSeparateiOES_t = function void(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
	private static glBlendEquationSeparateiOES_t p_glBlendEquationSeparateiOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendEquationSeparateiOES(uint32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) => p_glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha);

	private typealias glBlendFunciOES_t = function void(uint32 buf, BlendingFactor src, BlendingFactor dst);
	private static glBlendFunciOES_t p_glBlendFunciOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFunciOES(uint32 buf, BlendingFactor src, BlendingFactor dst) => p_glBlendFunciOES(buf, src, dst);

	private typealias glBlendFuncSeparateiOES_t = function void(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
	private static glBlendFuncSeparateiOES_t p_glBlendFuncSeparateiOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendFuncSeparateiOES(uint32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) => p_glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

	private typealias glColorMaskiOES_t = function void(uint32 index, bool r, bool g, bool b, bool a);
	private static glColorMaskiOES_t p_glColorMaskiOES;
	[CallingConvention(GL.CallConv)]
	public static void glColorMaskiOES(uint32 index, bool r, bool g, bool b, bool a) => p_glColorMaskiOES(index, r, g, b, a);

	private typealias glIsEnablediOES_t = function bool(EnableCap target, uint32 index);
	private static glIsEnablediOES_t p_glIsEnablediOES;
	[CallingConvention(GL.CallConv)]
	public static bool glIsEnablediOES(EnableCap target, uint32 index) => p_glIsEnablediOES(target, index);

	private typealias glDrawElementsBaseVertexOES_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 basevertex);
	private static glDrawElementsBaseVertexOES_t p_glDrawElementsBaseVertexOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsBaseVertexOES(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 basevertex) => p_glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex);

	private typealias glDrawRangeElementsBaseVertexOES_t = function void(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices, int32 basevertex);
	private static glDrawRangeElementsBaseVertexOES_t p_glDrawRangeElementsBaseVertexOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawRangeElementsBaseVertexOES(PrimitiveType mode, uint32 start, uint32 end, int32 count, DrawElementsType type, void* indices, int32 basevertex) => p_glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex);

	private typealias glDrawElementsInstancedBaseVertexOES_t = function void(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex);
	private static glDrawElementsInstancedBaseVertexOES_t p_glDrawElementsInstancedBaseVertexOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawElementsInstancedBaseVertexOES(PrimitiveType mode, int32 count, DrawElementsType type, void* indices, int32 instancecount, int32 basevertex) => p_glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex);

	private typealias glDrawTexsOES_t = function void(int16 x, int16 y, int16 z, int16 width, int16 height);
	private static glDrawTexsOES_t p_glDrawTexsOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexsOES(int16 x, int16 y, int16 z, int16 width, int16 height) => p_glDrawTexsOES(x, y, z, width, height);

	private typealias glDrawTexiOES_t = function void(int32 x, int32 y, int32 z, int32 width, int32 height);
	private static glDrawTexiOES_t p_glDrawTexiOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexiOES(int32 x, int32 y, int32 z, int32 width, int32 height) => p_glDrawTexiOES(x, y, z, width, height);

	private typealias glDrawTexxOES_t = function void(int32 x, int32 y, int32 z, int32 width, int32 height);
	private static glDrawTexxOES_t p_glDrawTexxOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexxOES(int32 x, int32 y, int32 z, int32 width, int32 height) => p_glDrawTexxOES(x, y, z, width, height);

	private typealias glDrawTexsvOES_t = function void(int16* coords);
	private static glDrawTexsvOES_t p_glDrawTexsvOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexsvOES(int16* coords) => p_glDrawTexsvOES(coords);

	private typealias glDrawTexivOES_t = function void(int32* coords);
	private static glDrawTexivOES_t p_glDrawTexivOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexivOES(int32* coords) => p_glDrawTexivOES(coords);

	private typealias glDrawTexxvOES_t = function void(void* coords);
	private static glDrawTexxvOES_t p_glDrawTexxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexxvOES(void* coords) => p_glDrawTexxvOES(coords);

	private typealias glDrawTexfOES_t = function void(float x, float y, float z, float width, float height);
	private static glDrawTexfOES_t p_glDrawTexfOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexfOES(float x, float y, float z, float width, float height) => p_glDrawTexfOES(x, y, z, width, height);

	private typealias glDrawTexfvOES_t = function void(float* coords);
	private static glDrawTexfvOES_t p_glDrawTexfvOES;
	[CallingConvention(GL.CallConv)]
	public static void glDrawTexfvOES(float* coords) => p_glDrawTexfvOES(coords);

	private typealias glAlphaFuncxOES_t = function void(AlphaFunction func, int32 @ref);
	private static glAlphaFuncxOES_t p_glAlphaFuncxOES;
	[CallingConvention(GL.CallConv)]
	public static void glAlphaFuncxOES(AlphaFunction func, int32 @ref) => p_glAlphaFuncxOES(func, @ref);

	private typealias glClearColorxOES_t = function void(int32 red, int32 green, int32 blue, int32 alpha);
	private static glClearColorxOES_t p_glClearColorxOES;
	[CallingConvention(GL.CallConv)]
	public static void glClearColorxOES(int32 red, int32 green, int32 blue, int32 alpha) => p_glClearColorxOES(red, green, blue, alpha);

	private typealias glClearDepthxOES_t = function void(int32 depth);
	private static glClearDepthxOES_t p_glClearDepthxOES;
	[CallingConvention(GL.CallConv)]
	public static void glClearDepthxOES(int32 depth) => p_glClearDepthxOES(depth);

	private typealias glClipPlanexOES_t = function void(ClipPlaneName plane, void* equation);
	private static glClipPlanexOES_t p_glClipPlanexOES;
	[CallingConvention(GL.CallConv)]
	public static void glClipPlanexOES(ClipPlaneName plane, void* equation) => p_glClipPlanexOES(plane, equation);

	private typealias glColor4xOES_t = function void(int32 red, int32 green, int32 blue, int32 alpha);
	private static glColor4xOES_t p_glColor4xOES;
	[CallingConvention(GL.CallConv)]
	public static void glColor4xOES(int32 red, int32 green, int32 blue, int32 alpha) => p_glColor4xOES(red, green, blue, alpha);

	private typealias glDepthRangexOES_t = function void(int32 n, int32 f);
	private static glDepthRangexOES_t p_glDepthRangexOES;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangexOES(int32 n, int32 f) => p_glDepthRangexOES(n, f);

	private typealias glFogxOES_t = function void(uint32 pname, int32 param);
	private static glFogxOES_t p_glFogxOES;
	[CallingConvention(GL.CallConv)]
	public static void glFogxOES(uint32 pname, int32 param) => p_glFogxOES(pname, param);

	private typealias glFogxvOES_t = function void(uint32 pname, void* param);
	private static glFogxvOES_t p_glFogxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glFogxvOES(uint32 pname, void* param) => p_glFogxvOES(pname, param);

	private typealias glFrustumxOES_t = function void(int32 l, int32 r, int32 b, int32 t, int32 n, int32 f);
	private static glFrustumxOES_t p_glFrustumxOES;
	[CallingConvention(GL.CallConv)]
	public static void glFrustumxOES(int32 l, int32 r, int32 b, int32 t, int32 n, int32 f) => p_glFrustumxOES(l, r, b, t, n, f);

	private typealias glGetClipPlanexOES_t = function void(ClipPlaneName plane, void* equation);
	private static glGetClipPlanexOES_t p_glGetClipPlanexOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetClipPlanexOES(ClipPlaneName plane, void* equation) => p_glGetClipPlanexOES(plane, equation);

	private typealias glGetFixedvOES_t = function void(GetPName pname, void* @params);
	private static glGetFixedvOES_t p_glGetFixedvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetFixedvOES(GetPName pname, void* @params) => p_glGetFixedvOES(pname, @params);

	private typealias glGetTexEnvxvOES_t = function void(uint32 target, uint32 pname, void* @params);
	private static glGetTexEnvxvOES_t p_glGetTexEnvxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexEnvxvOES(uint32 target, uint32 pname, void* @params) => p_glGetTexEnvxvOES(target, pname, @params);

	private typealias glGetTexParameterxvOES_t = function void(TextureTarget target, GetTextureParameter pname, void* @params);
	private static glGetTexParameterxvOES_t p_glGetTexParameterxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, void* @params) => p_glGetTexParameterxvOES(target, pname, @params);

	private typealias glLightModelxOES_t = function void(LightModelParameter pname, int32 param);
	private static glLightModelxOES_t p_glLightModelxOES;
	[CallingConvention(GL.CallConv)]
	public static void glLightModelxOES(LightModelParameter pname, int32 param) => p_glLightModelxOES(pname, param);

	private typealias glLightModelxvOES_t = function void(LightModelParameter pname, void* param);
	private static glLightModelxvOES_t p_glLightModelxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glLightModelxvOES(LightModelParameter pname, void* param) => p_glLightModelxvOES(pname, param);

	private typealias glLightxOES_t = function void(LightName light, uint32 pname, int32 param);
	private static glLightxOES_t p_glLightxOES;
	[CallingConvention(GL.CallConv)]
	public static void glLightxOES(LightName light, uint32 pname, int32 param) => p_glLightxOES(light, pname, param);

	private typealias glLightxvOES_t = function void(LightName light, uint32 pname, void* @params);
	private static glLightxvOES_t p_glLightxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glLightxvOES(LightName light, uint32 pname, void* @params) => p_glLightxvOES(light, pname, @params);

	private typealias glLineWidthxOES_t = function void(int32 width);
	private static glLineWidthxOES_t p_glLineWidthxOES;
	[CallingConvention(GL.CallConv)]
	public static void glLineWidthxOES(int32 width) => p_glLineWidthxOES(width);

	private typealias glLoadMatrixxOES_t = function void(void* m);
	private static glLoadMatrixxOES_t p_glLoadMatrixxOES;
	[CallingConvention(GL.CallConv)]
	public static void glLoadMatrixxOES(void* m) => p_glLoadMatrixxOES(m);

	private typealias glMaterialxOES_t = function void(MaterialFace face, uint32 pname, int32 param);
	private static glMaterialxOES_t p_glMaterialxOES;
	[CallingConvention(GL.CallConv)]
	public static void glMaterialxOES(MaterialFace face, uint32 pname, int32 param) => p_glMaterialxOES(face, pname, param);

	private typealias glMaterialxvOES_t = function void(MaterialFace face, uint32 pname, void* param);
	private static glMaterialxvOES_t p_glMaterialxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMaterialxvOES(MaterialFace face, uint32 pname, void* param) => p_glMaterialxvOES(face, pname, param);

	private typealias glMultMatrixxOES_t = function void(void* m);
	private static glMultMatrixxOES_t p_glMultMatrixxOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultMatrixxOES(void* m) => p_glMultMatrixxOES(m);

	private typealias glMultiTexCoord4xOES_t = function void(TextureUnit texture, int32 s, int32 t, int32 r, int32 q);
	private static glMultiTexCoord4xOES_t p_glMultiTexCoord4xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4xOES(TextureUnit texture, int32 s, int32 t, int32 r, int32 q) => p_glMultiTexCoord4xOES(texture, s, t, r, q);

	private typealias glNormal3xOES_t = function void(int32 nx, int32 ny, int32 nz);
	private static glNormal3xOES_t p_glNormal3xOES;
	[CallingConvention(GL.CallConv)]
	public static void glNormal3xOES(int32 nx, int32 ny, int32 nz) => p_glNormal3xOES(nx, ny, nz);

	private typealias glOrthoxOES_t = function void(int32 l, int32 r, int32 b, int32 t, int32 n, int32 f);
	private static glOrthoxOES_t p_glOrthoxOES;
	[CallingConvention(GL.CallConv)]
	public static void glOrthoxOES(int32 l, int32 r, int32 b, int32 t, int32 n, int32 f) => p_glOrthoxOES(l, r, b, t, n, f);

	private typealias glPointParameterxvOES_t = function void(uint32 pname, void* @params);
	private static glPointParameterxvOES_t p_glPointParameterxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterxvOES(uint32 pname, void* @params) => p_glPointParameterxvOES(pname, @params);

	private typealias glPointSizexOES_t = function void(int32 size);
	private static glPointSizexOES_t p_glPointSizexOES;
	[CallingConvention(GL.CallConv)]
	public static void glPointSizexOES(int32 size) => p_glPointSizexOES(size);

	private typealias glPolygonOffsetxOES_t = function void(int32 factor, int32 units);
	private static glPolygonOffsetxOES_t p_glPolygonOffsetxOES;
	[CallingConvention(GL.CallConv)]
	public static void glPolygonOffsetxOES(int32 factor, int32 units) => p_glPolygonOffsetxOES(factor, units);

	private typealias glRotatexOES_t = function void(int32 angle, int32 x, int32 y, int32 z);
	private static glRotatexOES_t p_glRotatexOES;
	[CallingConvention(GL.CallConv)]
	public static void glRotatexOES(int32 angle, int32 x, int32 y, int32 z) => p_glRotatexOES(angle, x, y, z);

	private typealias glScalexOES_t = function void(int32 x, int32 y, int32 z);
	private static glScalexOES_t p_glScalexOES;
	[CallingConvention(GL.CallConv)]
	public static void glScalexOES(int32 x, int32 y, int32 z) => p_glScalexOES(x, y, z);

	private typealias glTexEnvxOES_t = function void(uint32 target, uint32 pname, int32 param);
	private static glTexEnvxOES_t p_glTexEnvxOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexEnvxOES(uint32 target, uint32 pname, int32 param) => p_glTexEnvxOES(target, pname, param);

	private typealias glTexEnvxvOES_t = function void(uint32 target, uint32 pname, void* @params);
	private static glTexEnvxvOES_t p_glTexEnvxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexEnvxvOES(uint32 target, uint32 pname, void* @params) => p_glTexEnvxvOES(target, pname, @params);

	private typealias glTexParameterxOES_t = function void(TextureTarget target, GetTextureParameter pname, int32 param);
	private static glTexParameterxOES_t p_glTexParameterxOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterxOES(TextureTarget target, GetTextureParameter pname, int32 param) => p_glTexParameterxOES(target, pname, param);

	private typealias glTexParameterxvOES_t = function void(TextureTarget target, GetTextureParameter pname, void* @params);
	private static glTexParameterxvOES_t p_glTexParameterxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterxvOES(TextureTarget target, GetTextureParameter pname, void* @params) => p_glTexParameterxvOES(target, pname, @params);

	private typealias glTranslatexOES_t = function void(int32 x, int32 y, int32 z);
	private static glTranslatexOES_t p_glTranslatexOES;
	[CallingConvention(GL.CallConv)]
	public static void glTranslatexOES(int32 x, int32 y, int32 z) => p_glTranslatexOES(x, y, z);

	private typealias glGetLightxvOES_t = function void(LightName light, uint32 pname, void* @params);
	private static glGetLightxvOES_t p_glGetLightxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetLightxvOES(LightName light, uint32 pname, void* @params) => p_glGetLightxvOES(light, pname, @params);

	private typealias glGetMaterialxvOES_t = function void(MaterialFace face, uint32 pname, void* @params);
	private static glGetMaterialxvOES_t p_glGetMaterialxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetMaterialxvOES(MaterialFace face, uint32 pname, void* @params) => p_glGetMaterialxvOES(face, pname, @params);

	private typealias glPointParameterxOES_t = function void(uint32 pname, int32 param);
	private static glPointParameterxOES_t p_glPointParameterxOES;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterxOES(uint32 pname, int32 param) => p_glPointParameterxOES(pname, param);

	private typealias glSampleCoveragexOES_t = function void(int32 value, bool invert);
	private static glSampleCoveragexOES_t p_glSampleCoveragexOES;
	[CallingConvention(GL.CallConv)]
	public static void glSampleCoveragexOES(int32 value, bool invert) => p_glSampleCoveragexOES(value, invert);

	private typealias glAccumxOES_t = function void(uint32 op, int32 value);
	private static glAccumxOES_t p_glAccumxOES;
	[CallingConvention(GL.CallConv)]
	public static void glAccumxOES(uint32 op, int32 value) => p_glAccumxOES(op, value);

	private typealias glBitmapxOES_t = function void(int32 width, int32 height, int32 xorig, int32 yorig, int32 xmove, int32 ymove, uint8* bitmap);
	private static glBitmapxOES_t p_glBitmapxOES;
	[CallingConvention(GL.CallConv)]
	public static void glBitmapxOES(int32 width, int32 height, int32 xorig, int32 yorig, int32 xmove, int32 ymove, uint8* bitmap) => p_glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap);

	private typealias glBlendColorxOES_t = function void(int32 red, int32 green, int32 blue, int32 alpha);
	private static glBlendColorxOES_t p_glBlendColorxOES;
	[CallingConvention(GL.CallConv)]
	public static void glBlendColorxOES(int32 red, int32 green, int32 blue, int32 alpha) => p_glBlendColorxOES(red, green, blue, alpha);

	private typealias glClearAccumxOES_t = function void(int32 red, int32 green, int32 blue, int32 alpha);
	private static glClearAccumxOES_t p_glClearAccumxOES;
	[CallingConvention(GL.CallConv)]
	public static void glClearAccumxOES(int32 red, int32 green, int32 blue, int32 alpha) => p_glClearAccumxOES(red, green, blue, alpha);

	private typealias glColor3xOES_t = function void(int32 red, int32 green, int32 blue);
	private static glColor3xOES_t p_glColor3xOES;
	[CallingConvention(GL.CallConv)]
	public static void glColor3xOES(int32 red, int32 green, int32 blue) => p_glColor3xOES(red, green, blue);

	private typealias glColor3xvOES_t = function void(void* components);
	private static glColor3xvOES_t p_glColor3xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glColor3xvOES(void* components) => p_glColor3xvOES(components);

	private typealias glColor4xvOES_t = function void(void* components);
	private static glColor4xvOES_t p_glColor4xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glColor4xvOES(void* components) => p_glColor4xvOES(components);

	private typealias glConvolutionParameterxOES_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32 param);
	private static glConvolutionParameterxOES_t p_glConvolutionParameterxOES;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameterxOES(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int32 param) => p_glConvolutionParameterxOES(target, pname, param);

	private typealias glConvolutionParameterxvOES_t = function void(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, void* @params);
	private static glConvolutionParameterxvOES_t p_glConvolutionParameterxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, void* @params) => p_glConvolutionParameterxvOES(target, pname, @params);

	private typealias glEvalCoord1xOES_t = function void(int32 u);
	private static glEvalCoord1xOES_t p_glEvalCoord1xOES;
	[CallingConvention(GL.CallConv)]
	public static void glEvalCoord1xOES(int32 u) => p_glEvalCoord1xOES(u);

	private typealias glEvalCoord1xvOES_t = function void(void* coords);
	private static glEvalCoord1xvOES_t p_glEvalCoord1xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glEvalCoord1xvOES(void* coords) => p_glEvalCoord1xvOES(coords);

	private typealias glEvalCoord2xOES_t = function void(int32 u, int32 v);
	private static glEvalCoord2xOES_t p_glEvalCoord2xOES;
	[CallingConvention(GL.CallConv)]
	public static void glEvalCoord2xOES(int32 u, int32 v) => p_glEvalCoord2xOES(u, v);

	private typealias glEvalCoord2xvOES_t = function void(void* coords);
	private static glEvalCoord2xvOES_t p_glEvalCoord2xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glEvalCoord2xvOES(void* coords) => p_glEvalCoord2xvOES(coords);

	private typealias glFeedbackBufferxOES_t = function void(int32 n, uint32 type, void* buffer);
	private static glFeedbackBufferxOES_t p_glFeedbackBufferxOES;
	[CallingConvention(GL.CallConv)]
	public static void glFeedbackBufferxOES(int32 n, uint32 type, void* buffer) => p_glFeedbackBufferxOES(n, type, buffer);

	private typealias glGetConvolutionParameterxvOES_t = function void(uint32 target, uint32 pname, void* @params);
	private static glGetConvolutionParameterxvOES_t p_glGetConvolutionParameterxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetConvolutionParameterxvOES(uint32 target, uint32 pname, void* @params) => p_glGetConvolutionParameterxvOES(target, pname, @params);

	private typealias glGetHistogramParameterxvOES_t = function void(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, void* @params);
	private static glGetHistogramParameterxvOES_t p_glGetHistogramParameterxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, void* @params) => p_glGetHistogramParameterxvOES(target, pname, @params);

	private typealias glGetLightxOES_t = function void(LightName light, uint32 pname, void* @params);
	private static glGetLightxOES_t p_glGetLightxOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetLightxOES(LightName light, uint32 pname, void* @params) => p_glGetLightxOES(light, pname, @params);

	private typealias glGetMapxvOES_t = function void(MapTarget target, uint32 query, void* v);
	private static glGetMapxvOES_t p_glGetMapxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetMapxvOES(MapTarget target, uint32 query, void* v) => p_glGetMapxvOES(target, query, v);

	private typealias glGetMaterialxOES_t = function void(MaterialFace face, uint32 pname, int32 param);
	private static glGetMaterialxOES_t p_glGetMaterialxOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetMaterialxOES(MaterialFace face, uint32 pname, int32 param) => p_glGetMaterialxOES(face, pname, param);

	private typealias glGetPixelMapxv_t = function void(PixelMap map, int32 size, void* values);
	private static glGetPixelMapxv_t p_glGetPixelMapxv;
	[CallingConvention(GL.CallConv)]
	public static void glGetPixelMapxv(PixelMap map, int32 size, void* values) => p_glGetPixelMapxv(map, size, values);

	private typealias glGetTexGenxvOES_t = function void(uint32 coord, TextureGenParameter pname, void* @params);
	private static glGetTexGenxvOES_t p_glGetTexGenxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexGenxvOES(uint32 coord, TextureGenParameter pname, void* @params) => p_glGetTexGenxvOES(coord, pname, @params);

	private typealias glGetTexLevelParameterxvOES_t = function void(TextureTarget target, int32 level, GetTextureParameter pname, void* @params);
	private static glGetTexLevelParameterxvOES_t p_glGetTexLevelParameterxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexLevelParameterxvOES(TextureTarget target, int32 level, GetTextureParameter pname, void* @params) => p_glGetTexLevelParameterxvOES(target, level, pname, @params);

	private typealias glIndexxOES_t = function void(int32 component);
	private static glIndexxOES_t p_glIndexxOES;
	[CallingConvention(GL.CallConv)]
	public static void glIndexxOES(int32 component) => p_glIndexxOES(component);

	private typealias glIndexxvOES_t = function void(void* component);
	private static glIndexxvOES_t p_glIndexxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glIndexxvOES(void* component) => p_glIndexxvOES(component);

	private typealias glLoadTransposeMatrixxOES_t = function void(void* m);
	private static glLoadTransposeMatrixxOES_t p_glLoadTransposeMatrixxOES;
	[CallingConvention(GL.CallConv)]
	public static void glLoadTransposeMatrixxOES(void* m) => p_glLoadTransposeMatrixxOES(m);

	private typealias glMap1xOES_t = function void(MapTarget target, int32 u1, int32 u2, int32 stride, int32 order, int32 points);
	private static glMap1xOES_t p_glMap1xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMap1xOES(MapTarget target, int32 u1, int32 u2, int32 stride, int32 order, int32 points) => p_glMap1xOES(target, u1, u2, stride, order, points);

	private typealias glMap2xOES_t = function void(MapTarget target, int32 u1, int32 u2, int32 ustride, int32 uorder, int32 v1, int32 v2, int32 vstride, int32 vorder, int32 points);
	private static glMap2xOES_t p_glMap2xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMap2xOES(MapTarget target, int32 u1, int32 u2, int32 ustride, int32 uorder, int32 v1, int32 v2, int32 vstride, int32 vorder, int32 points) => p_glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

	private typealias glMapGrid1xOES_t = function void(int32 n, int32 u1, int32 u2);
	private static glMapGrid1xOES_t p_glMapGrid1xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMapGrid1xOES(int32 n, int32 u1, int32 u2) => p_glMapGrid1xOES(n, u1, u2);

	private typealias glMapGrid2xOES_t = function void(int32 n, int32 u1, int32 u2, int32 v1, int32 v2);
	private static glMapGrid2xOES_t p_glMapGrid2xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMapGrid2xOES(int32 n, int32 u1, int32 u2, int32 v1, int32 v2) => p_glMapGrid2xOES(n, u1, u2, v1, v2);

	private typealias glMultTransposeMatrixxOES_t = function void(void* m);
	private static glMultTransposeMatrixxOES_t p_glMultTransposeMatrixxOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultTransposeMatrixxOES(void* m) => p_glMultTransposeMatrixxOES(m);

	private typealias glMultiTexCoord1xOES_t = function void(TextureUnit texture, int32 s);
	private static glMultiTexCoord1xOES_t p_glMultiTexCoord1xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1xOES(TextureUnit texture, int32 s) => p_glMultiTexCoord1xOES(texture, s);

	private typealias glMultiTexCoord1xvOES_t = function void(TextureUnit texture, void* coords);
	private static glMultiTexCoord1xvOES_t p_glMultiTexCoord1xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord1xvOES(TextureUnit texture, void* coords) => p_glMultiTexCoord1xvOES(texture, coords);

	private typealias glMultiTexCoord2xOES_t = function void(TextureUnit texture, int32 s, int32 t);
	private static glMultiTexCoord2xOES_t p_glMultiTexCoord2xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2xOES(TextureUnit texture, int32 s, int32 t) => p_glMultiTexCoord2xOES(texture, s, t);

	private typealias glMultiTexCoord2xvOES_t = function void(TextureUnit texture, void* coords);
	private static glMultiTexCoord2xvOES_t p_glMultiTexCoord2xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord2xvOES(TextureUnit texture, void* coords) => p_glMultiTexCoord2xvOES(texture, coords);

	private typealias glMultiTexCoord3xOES_t = function void(TextureUnit texture, int32 s, int32 t, int32 r);
	private static glMultiTexCoord3xOES_t p_glMultiTexCoord3xOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3xOES(TextureUnit texture, int32 s, int32 t, int32 r) => p_glMultiTexCoord3xOES(texture, s, t, r);

	private typealias glMultiTexCoord3xvOES_t = function void(TextureUnit texture, void* coords);
	private static glMultiTexCoord3xvOES_t p_glMultiTexCoord3xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord3xvOES(TextureUnit texture, void* coords) => p_glMultiTexCoord3xvOES(texture, coords);

	private typealias glMultiTexCoord4xvOES_t = function void(TextureUnit texture, void* coords);
	private static glMultiTexCoord4xvOES_t p_glMultiTexCoord4xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glMultiTexCoord4xvOES(TextureUnit texture, void* coords) => p_glMultiTexCoord4xvOES(texture, coords);

	private typealias glNormal3xvOES_t = function void(void* coords);
	private static glNormal3xvOES_t p_glNormal3xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glNormal3xvOES(void* coords) => p_glNormal3xvOES(coords);

	private typealias glPassThroughxOES_t = function void(int32 token);
	private static glPassThroughxOES_t p_glPassThroughxOES;
	[CallingConvention(GL.CallConv)]
	public static void glPassThroughxOES(int32 token) => p_glPassThroughxOES(token);

	private typealias glPixelMapx_t = function void(PixelMap map, int32 size, void* values);
	private static glPixelMapx_t p_glPixelMapx;
	[CallingConvention(GL.CallConv)]
	public static void glPixelMapx(PixelMap map, int32 size, void* values) => p_glPixelMapx(map, size, values);

	private typealias glPixelStorex_t = function void(PixelStoreParameter pname, int32 param);
	private static glPixelStorex_t p_glPixelStorex;
	[CallingConvention(GL.CallConv)]
	public static void glPixelStorex(PixelStoreParameter pname, int32 param) => p_glPixelStorex(pname, param);

	private typealias glPixelTransferxOES_t = function void(PixelTransferParameter pname, int32 param);
	private static glPixelTransferxOES_t p_glPixelTransferxOES;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTransferxOES(PixelTransferParameter pname, int32 param) => p_glPixelTransferxOES(pname, param);

	private typealias glPixelZoomxOES_t = function void(int32 xfactor, int32 yfactor);
	private static glPixelZoomxOES_t p_glPixelZoomxOES;
	[CallingConvention(GL.CallConv)]
	public static void glPixelZoomxOES(int32 xfactor, int32 yfactor) => p_glPixelZoomxOES(xfactor, yfactor);

	private typealias glPrioritizeTexturesxOES_t = function void(int32 n, uint32* textures, void* priorities);
	private static glPrioritizeTexturesxOES_t p_glPrioritizeTexturesxOES;
	[CallingConvention(GL.CallConv)]
	public static void glPrioritizeTexturesxOES(int32 n, uint32* textures, void* priorities) => p_glPrioritizeTexturesxOES(n, textures, priorities);

	private typealias glRasterPos2xOES_t = function void(int32 x, int32 y);
	private static glRasterPos2xOES_t p_glRasterPos2xOES;
	[CallingConvention(GL.CallConv)]
	public static void glRasterPos2xOES(int32 x, int32 y) => p_glRasterPos2xOES(x, y);

	private typealias glRasterPos2xvOES_t = function void(void* coords);
	private static glRasterPos2xvOES_t p_glRasterPos2xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glRasterPos2xvOES(void* coords) => p_glRasterPos2xvOES(coords);

	private typealias glRasterPos3xOES_t = function void(int32 x, int32 y, int32 z);
	private static glRasterPos3xOES_t p_glRasterPos3xOES;
	[CallingConvention(GL.CallConv)]
	public static void glRasterPos3xOES(int32 x, int32 y, int32 z) => p_glRasterPos3xOES(x, y, z);

	private typealias glRasterPos3xvOES_t = function void(void* coords);
	private static glRasterPos3xvOES_t p_glRasterPos3xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glRasterPos3xvOES(void* coords) => p_glRasterPos3xvOES(coords);

	private typealias glRasterPos4xOES_t = function void(int32 x, int32 y, int32 z, int32 w);
	private static glRasterPos4xOES_t p_glRasterPos4xOES;
	[CallingConvention(GL.CallConv)]
	public static void glRasterPos4xOES(int32 x, int32 y, int32 z, int32 w) => p_glRasterPos4xOES(x, y, z, w);

	private typealias glRasterPos4xvOES_t = function void(void* coords);
	private static glRasterPos4xvOES_t p_glRasterPos4xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glRasterPos4xvOES(void* coords) => p_glRasterPos4xvOES(coords);

	private typealias glRectxOES_t = function void(int32 x1, int32 y1, int32 x2, int32 y2);
	private static glRectxOES_t p_glRectxOES;
	[CallingConvention(GL.CallConv)]
	public static void glRectxOES(int32 x1, int32 y1, int32 x2, int32 y2) => p_glRectxOES(x1, y1, x2, y2);

	private typealias glRectxvOES_t = function void(void* v1, void* v2);
	private static glRectxvOES_t p_glRectxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glRectxvOES(void* v1, void* v2) => p_glRectxvOES(v1, v2);

	private typealias glTexCoord1xOES_t = function void(int32 s);
	private static glTexCoord1xOES_t p_glTexCoord1xOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord1xOES(int32 s) => p_glTexCoord1xOES(s);

	private typealias glTexCoord1xvOES_t = function void(void* coords);
	private static glTexCoord1xvOES_t p_glTexCoord1xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord1xvOES(void* coords) => p_glTexCoord1xvOES(coords);

	private typealias glTexCoord2xOES_t = function void(int32 s, int32 t);
	private static glTexCoord2xOES_t p_glTexCoord2xOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2xOES(int32 s, int32 t) => p_glTexCoord2xOES(s, t);

	private typealias glTexCoord2xvOES_t = function void(void* coords);
	private static glTexCoord2xvOES_t p_glTexCoord2xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2xvOES(void* coords) => p_glTexCoord2xvOES(coords);

	private typealias glTexCoord3xOES_t = function void(int32 s, int32 t, int32 r);
	private static glTexCoord3xOES_t p_glTexCoord3xOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord3xOES(int32 s, int32 t, int32 r) => p_glTexCoord3xOES(s, t, r);

	private typealias glTexCoord3xvOES_t = function void(void* coords);
	private static glTexCoord3xvOES_t p_glTexCoord3xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord3xvOES(void* coords) => p_glTexCoord3xvOES(coords);

	private typealias glTexCoord4xOES_t = function void(int32 s, int32 t, int32 r, int32 q);
	private static glTexCoord4xOES_t p_glTexCoord4xOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4xOES(int32 s, int32 t, int32 r, int32 q) => p_glTexCoord4xOES(s, t, r, q);

	private typealias glTexCoord4xvOES_t = function void(void* coords);
	private static glTexCoord4xvOES_t p_glTexCoord4xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4xvOES(void* coords) => p_glTexCoord4xvOES(coords);

	private typealias glTexGenxOES_t = function void(uint32 coord, TextureGenParameter pname, int32 param);
	private static glTexGenxOES_t p_glTexGenxOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexGenxOES(uint32 coord, TextureGenParameter pname, int32 param) => p_glTexGenxOES(coord, pname, param);

	private typealias glTexGenxvOES_t = function void(uint32 coord, TextureGenParameter pname, void* @params);
	private static glTexGenxvOES_t p_glTexGenxvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexGenxvOES(uint32 coord, TextureGenParameter pname, void* @params) => p_glTexGenxvOES(coord, pname, @params);

	private typealias glVertex2xOES_t = function void(int32 x);
	private static glVertex2xOES_t p_glVertex2xOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex2xOES(int32 x) => p_glVertex2xOES(x);

	private typealias glVertex2xvOES_t = function void(void* coords);
	private static glVertex2xvOES_t p_glVertex2xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex2xvOES(void* coords) => p_glVertex2xvOES(coords);

	private typealias glVertex3xOES_t = function void(int32 x, int32 y);
	private static glVertex3xOES_t p_glVertex3xOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex3xOES(int32 x, int32 y) => p_glVertex3xOES(x, y);

	private typealias glVertex3xvOES_t = function void(void* coords);
	private static glVertex3xvOES_t p_glVertex3xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex3xvOES(void* coords) => p_glVertex3xvOES(coords);

	private typealias glVertex4xOES_t = function void(int32 x, int32 y, int32 z);
	private static glVertex4xOES_t p_glVertex4xOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex4xOES(int32 x, int32 y, int32 z) => p_glVertex4xOES(x, y, z);

	private typealias glVertex4xvOES_t = function void(void* coords);
	private static glVertex4xvOES_t p_glVertex4xvOES;
	[CallingConvention(GL.CallConv)]
	public static void glVertex4xvOES(void* coords) => p_glVertex4xvOES(coords);

	private typealias glIsRenderbufferOES_t = function bool(uint32 renderbuffer);
	private static glIsRenderbufferOES_t p_glIsRenderbufferOES;
	[CallingConvention(GL.CallConv)]
	public static bool glIsRenderbufferOES(uint32 renderbuffer) => p_glIsRenderbufferOES(renderbuffer);

	private typealias glBindRenderbufferOES_t = function void(RenderbufferTarget target, uint32 renderbuffer);
	private static glBindRenderbufferOES_t p_glBindRenderbufferOES;
	[CallingConvention(GL.CallConv)]
	public static void glBindRenderbufferOES(RenderbufferTarget target, uint32 renderbuffer) => p_glBindRenderbufferOES(target, renderbuffer);

	private typealias glDeleteRenderbuffersOES_t = function void(int32 n, uint32* renderbuffers);
	private static glDeleteRenderbuffersOES_t p_glDeleteRenderbuffersOES;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteRenderbuffersOES(int32 n, uint32* renderbuffers) => p_glDeleteRenderbuffersOES(n, renderbuffers);

	private typealias glGenRenderbuffersOES_t = function void(int32 n, uint32* renderbuffers);
	private static glGenRenderbuffersOES_t p_glGenRenderbuffersOES;
	[CallingConvention(GL.CallConv)]
	public static void glGenRenderbuffersOES(int32 n, uint32* renderbuffers) => p_glGenRenderbuffersOES(n, renderbuffers);

	private typealias glRenderbufferStorageOES_t = function void(RenderbufferTarget target, InternalFormat internalformat, int32 width, int32 height);
	private static glRenderbufferStorageOES_t p_glRenderbufferStorageOES;
	[CallingConvention(GL.CallConv)]
	public static void glRenderbufferStorageOES(RenderbufferTarget target, InternalFormat internalformat, int32 width, int32 height) => p_glRenderbufferStorageOES(target, internalformat, width, height);

	private typealias glGetRenderbufferParameterivOES_t = function void(RenderbufferTarget target, RenderbufferParameterName pname, int32* @params);
	private static glGetRenderbufferParameterivOES_t p_glGetRenderbufferParameterivOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetRenderbufferParameterivOES(RenderbufferTarget target, RenderbufferParameterName pname, int32* @params) => p_glGetRenderbufferParameterivOES(target, pname, @params);

	private typealias glIsFramebufferOES_t = function bool(uint32 framebuffer);
	private static glIsFramebufferOES_t p_glIsFramebufferOES;
	[CallingConvention(GL.CallConv)]
	public static bool glIsFramebufferOES(uint32 framebuffer) => p_glIsFramebufferOES(framebuffer);

	private typealias glBindFramebufferOES_t = function void(FramebufferTarget target, uint32 framebuffer);
	private static glBindFramebufferOES_t p_glBindFramebufferOES;
	[CallingConvention(GL.CallConv)]
	public static void glBindFramebufferOES(FramebufferTarget target, uint32 framebuffer) => p_glBindFramebufferOES(target, framebuffer);

	private typealias glDeleteFramebuffersOES_t = function void(int32 n, uint32* framebuffers);
	private static glDeleteFramebuffersOES_t p_glDeleteFramebuffersOES;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteFramebuffersOES(int32 n, uint32* framebuffers) => p_glDeleteFramebuffersOES(n, framebuffers);

	private typealias glGenFramebuffersOES_t = function void(int32 n, uint32* framebuffers);
	private static glGenFramebuffersOES_t p_glGenFramebuffersOES;
	[CallingConvention(GL.CallConv)]
	public static void glGenFramebuffersOES(int32 n, uint32* framebuffers) => p_glGenFramebuffersOES(n, framebuffers);

	private typealias glCheckFramebufferStatusOES_t = function FramebufferStatus(FramebufferTarget target);
	private static glCheckFramebufferStatusOES_t p_glCheckFramebufferStatusOES;
	[CallingConvention(GL.CallConv)]
	public static FramebufferStatus glCheckFramebufferStatusOES(FramebufferTarget target) => p_glCheckFramebufferStatusOES(target);

	private typealias glFramebufferRenderbufferOES_t = function void(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer);
	private static glFramebufferRenderbufferOES_t p_glFramebufferRenderbufferOES;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferRenderbufferOES(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint32 renderbuffer) => p_glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);

	private typealias glFramebufferTexture2DOES_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level);
	private static glFramebufferTexture2DOES_t p_glFramebufferTexture2DOES;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture2DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level) => p_glFramebufferTexture2DOES(target, attachment, textarget, texture, level);

	private typealias glGetFramebufferAttachmentParameterivOES_t = function void(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params);
	private static glGetFramebufferAttachmentParameterivOES_t p_glGetFramebufferAttachmentParameterivOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetFramebufferAttachmentParameterivOES(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int32* @params) => p_glGetFramebufferAttachmentParameterivOES(target, attachment, pname, @params);

	private typealias glGenerateMipmapOES_t = function void(TextureTarget target);
	private static glGenerateMipmapOES_t p_glGenerateMipmapOES;
	[CallingConvention(GL.CallConv)]
	public static void glGenerateMipmapOES(TextureTarget target) => p_glGenerateMipmapOES(target);

	private typealias glFramebufferTextureOES_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level);
	private static glFramebufferTextureOES_t p_glFramebufferTextureOES;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureOES(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level) => p_glFramebufferTextureOES(target, attachment, texture, level);

	private typealias glGetProgramBinaryOES_t = function void(uint32 program, int32 bufSize, int32* length, uint32* binaryFormat, void* binary);
	private static glGetProgramBinaryOES_t p_glGetProgramBinaryOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetProgramBinaryOES(uint32 program, int32 bufSize, int32* length, uint32* binaryFormat, void* binary) => p_glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);

	private typealias glProgramBinaryOES_t = function void(uint32 program, uint32 binaryFormat, void* binary, int32 length);
	private static glProgramBinaryOES_t p_glProgramBinaryOES;
	[CallingConvention(GL.CallConv)]
	public static void glProgramBinaryOES(uint32 program, uint32 binaryFormat, void* binary, int32 length) => p_glProgramBinaryOES(program, binaryFormat, binary, length);

	private typealias glMapBufferOES_t = function void*(BufferTargetARB target, BufferAccessARB access);
	private static glMapBufferOES_t p_glMapBufferOES;
	[CallingConvention(GL.CallConv)]
	public static void* glMapBufferOES(BufferTargetARB target, BufferAccessARB access) => p_glMapBufferOES(target, access);

	private typealias glUnmapBufferOES_t = function bool(uint32 target);
	private static glUnmapBufferOES_t p_glUnmapBufferOES;
	[CallingConvention(GL.CallConv)]
	public static bool glUnmapBufferOES(uint32 target) => p_glUnmapBufferOES(target);

	private typealias glGetBufferPointervOES_t = function void(BufferTargetARB target, uint32 pname, void** @params);
	private static glGetBufferPointervOES_t p_glGetBufferPointervOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetBufferPointervOES(BufferTargetARB target, uint32 pname, void** @params) => p_glGetBufferPointervOES(target, pname, @params);

	private typealias glCurrentPaletteMatrixOES_t = function void(uint32 matrixpaletteindex);
	private static glCurrentPaletteMatrixOES_t p_glCurrentPaletteMatrixOES;
	[CallingConvention(GL.CallConv)]
	public static void glCurrentPaletteMatrixOES(uint32 matrixpaletteindex) => p_glCurrentPaletteMatrixOES(matrixpaletteindex);

	private typealias glLoadPaletteFromModelViewMatrixOES_t = function void();
	private static glLoadPaletteFromModelViewMatrixOES_t p_glLoadPaletteFromModelViewMatrixOES;
	[CallingConvention(GL.CallConv)]
	public static void glLoadPaletteFromModelViewMatrixOES() => p_glLoadPaletteFromModelViewMatrixOES();

	private typealias glMatrixIndexPointerOES_t = function void(int32 size, uint32 type, int32 stride, void* pointer);
	private static glMatrixIndexPointerOES_t p_glMatrixIndexPointerOES;
	[CallingConvention(GL.CallConv)]
	public static void glMatrixIndexPointerOES(int32 size, uint32 type, int32 stride, void* pointer) => p_glMatrixIndexPointerOES(size, type, stride, pointer);

	private typealias glWeightPointerOES_t = function void(int32 size, uint32 type, int32 stride, void* pointer);
	private static glWeightPointerOES_t p_glWeightPointerOES;
	[CallingConvention(GL.CallConv)]
	public static void glWeightPointerOES(int32 size, uint32 type, int32 stride, void* pointer) => p_glWeightPointerOES(size, type, stride, pointer);

	private typealias glPointSizePointerOES_t = function void(uint32 type, int32 stride, void* pointer);
	private static glPointSizePointerOES_t p_glPointSizePointerOES;
	[CallingConvention(GL.CallConv)]
	public static void glPointSizePointerOES(uint32 type, int32 stride, void* pointer) => p_glPointSizePointerOES(type, stride, pointer);

	private typealias glPrimitiveBoundingBoxOES_t = function void(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
	private static glPrimitiveBoundingBoxOES_t p_glPrimitiveBoundingBoxOES;
	[CallingConvention(GL.CallConv)]
	public static void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) => p_glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

	private typealias glQueryMatrixxOES_t = function uint32(void* mantissa, int32* exponent);
	private static glQueryMatrixxOES_t p_glQueryMatrixxOES;
	[CallingConvention(GL.CallConv)]
	public static uint32 glQueryMatrixxOES(void* mantissa, int32* exponent) => p_glQueryMatrixxOES(mantissa, exponent);

	private typealias glMinSampleShadingOES_t = function void(float value);
	private static glMinSampleShadingOES_t p_glMinSampleShadingOES;
	[CallingConvention(GL.CallConv)]
	public static void glMinSampleShadingOES(float value) => p_glMinSampleShadingOES(value);

	private typealias glClearDepthfOES_t = function void(float depth);
	private static glClearDepthfOES_t p_glClearDepthfOES;
	[CallingConvention(GL.CallConv)]
	public static void glClearDepthfOES(float depth) => p_glClearDepthfOES(depth);

	private typealias glClipPlanefOES_t = function void(ClipPlaneName plane, float* equation);
	private static glClipPlanefOES_t p_glClipPlanefOES;
	[CallingConvention(GL.CallConv)]
	public static void glClipPlanefOES(ClipPlaneName plane, float* equation) => p_glClipPlanefOES(plane, equation);

	private typealias glDepthRangefOES_t = function void(float n, float f);
	private static glDepthRangefOES_t p_glDepthRangefOES;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangefOES(float n, float f) => p_glDepthRangefOES(n, f);

	private typealias glFrustumfOES_t = function void(float l, float r, float b, float t, float n, float f);
	private static glFrustumfOES_t p_glFrustumfOES;
	[CallingConvention(GL.CallConv)]
	public static void glFrustumfOES(float l, float r, float b, float t, float n, float f) => p_glFrustumfOES(l, r, b, t, n, f);

	private typealias glGetClipPlanefOES_t = function void(ClipPlaneName plane, float* equation);
	private static glGetClipPlanefOES_t p_glGetClipPlanefOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetClipPlanefOES(ClipPlaneName plane, float* equation) => p_glGetClipPlanefOES(plane, equation);

	private typealias glOrthofOES_t = function void(float l, float r, float b, float t, float n, float f);
	private static glOrthofOES_t p_glOrthofOES;
	[CallingConvention(GL.CallConv)]
	public static void glOrthofOES(float l, float r, float b, float t, float n, float f) => p_glOrthofOES(l, r, b, t, n, f);

	private typealias glPatchParameteriOES_t = function void(PatchParameterName pname, int32 value);
	private static glPatchParameteriOES_t p_glPatchParameteriOES;
	[CallingConvention(GL.CallConv)]
	public static void glPatchParameteriOES(PatchParameterName pname, int32 value) => p_glPatchParameteriOES(pname, value);

	private typealias glTexImage3DOES_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTexImage3DOES_t p_glTexImage3DOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage3DOES(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels);

	private typealias glTexSubImage3DOES_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage3DOES_t p_glTexSubImage3DOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage3DOES(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

	private typealias glCopyTexSubImage3DOES_t = function void(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height);
	private static glCopyTexSubImage3DOES_t p_glCopyTexSubImage3DOES;
	[CallingConvention(GL.CallConv)]
	public static void glCopyTexSubImage3DOES(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 x, int32 y, int32 width, int32 height) => p_glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);

	private typealias glCompressedTexImage3DOES_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* data);
	private static glCompressedTexImage3DOES_t p_glCompressedTexImage3DOES;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexImage3DOES(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 border, int32 imageSize, void* data) => p_glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);

	private typealias glCompressedTexSubImage3DOES_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data);
	private static glCompressedTexSubImage3DOES_t p_glCompressedTexSubImage3DOES;
	[CallingConvention(GL.CallConv)]
	public static void glCompressedTexSubImage3DOES(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, int32 imageSize, void* data) => p_glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

	private typealias glFramebufferTexture3DOES_t = function void(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset);
	private static glFramebufferTexture3DOES_t p_glFramebufferTexture3DOES;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTexture3DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint32 texture, int32 level, int32 zoffset) => p_glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);

	private typealias glTexParameterIivOES_t = function void(TextureTarget target, TextureParameterName pname, int32* @params);
	private static glTexParameterIivOES_t p_glTexParameterIivOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterIivOES(TextureTarget target, TextureParameterName pname, int32* @params) => p_glTexParameterIivOES(target, pname, @params);

	private typealias glTexParameterIuivOES_t = function void(TextureTarget target, TextureParameterName pname, uint32* @params);
	private static glTexParameterIuivOES_t p_glTexParameterIuivOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexParameterIuivOES(TextureTarget target, TextureParameterName pname, uint32* @params) => p_glTexParameterIuivOES(target, pname, @params);

	private typealias glGetTexParameterIivOES_t = function void(TextureTarget target, GetTextureParameter pname, int32* @params);
	private static glGetTexParameterIivOES_t p_glGetTexParameterIivOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterIivOES(TextureTarget target, GetTextureParameter pname, int32* @params) => p_glGetTexParameterIivOES(target, pname, @params);

	private typealias glGetTexParameterIuivOES_t = function void(TextureTarget target, GetTextureParameter pname, uint32* @params);
	private static glGetTexParameterIuivOES_t p_glGetTexParameterIuivOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexParameterIuivOES(TextureTarget target, GetTextureParameter pname, uint32* @params) => p_glGetTexParameterIuivOES(target, pname, @params);

	private typealias glSamplerParameterIivOES_t = function void(uint32 sampler, SamplerParameterName pname, int32* param);
	private static glSamplerParameterIivOES_t p_glSamplerParameterIivOES;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterIivOES(uint32 sampler, SamplerParameterName pname, int32* param) => p_glSamplerParameterIivOES(sampler, pname, param);

	private typealias glSamplerParameterIuivOES_t = function void(uint32 sampler, SamplerParameterName pname, uint32* param);
	private static glSamplerParameterIuivOES_t p_glSamplerParameterIuivOES;
	[CallingConvention(GL.CallConv)]
	public static void glSamplerParameterIuivOES(uint32 sampler, SamplerParameterName pname, uint32* param) => p_glSamplerParameterIuivOES(sampler, pname, param);

	private typealias glGetSamplerParameterIivOES_t = function void(uint32 sampler, SamplerParameterName pname, int32* @params);
	private static glGetSamplerParameterIivOES_t p_glGetSamplerParameterIivOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameterIivOES(uint32 sampler, SamplerParameterName pname, int32* @params) => p_glGetSamplerParameterIivOES(sampler, pname, @params);

	private typealias glGetSamplerParameterIuivOES_t = function void(uint32 sampler, SamplerParameterName pname, uint32* @params);
	private static glGetSamplerParameterIuivOES_t p_glGetSamplerParameterIuivOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetSamplerParameterIuivOES(uint32 sampler, SamplerParameterName pname, uint32* @params) => p_glGetSamplerParameterIuivOES(sampler, pname, @params);

	private typealias glTexBufferOES_t = function void(TextureTarget target, InternalFormat internalformat, uint32 buffer);
	private static glTexBufferOES_t p_glTexBufferOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexBufferOES(TextureTarget target, InternalFormat internalformat, uint32 buffer) => p_glTexBufferOES(target, internalformat, buffer);

	private typealias glTexBufferRangeOES_t = function void(TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size);
	private static glTexBufferRangeOES_t p_glTexBufferRangeOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexBufferRangeOES(TextureTarget target, InternalFormat internalformat, uint32 buffer, void* offset, int32 size) => p_glTexBufferRangeOES(target, internalformat, buffer, offset, size);

	private typealias glTexGenfOES_t = function void(uint32 coord, TextureGenParameter pname, float param);
	private static glTexGenfOES_t p_glTexGenfOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexGenfOES(uint32 coord, TextureGenParameter pname, float param) => p_glTexGenfOES(coord, pname, param);

	private typealias glTexGenfvOES_t = function void(uint32 coord, TextureGenParameter pname, float* @params);
	private static glTexGenfvOES_t p_glTexGenfvOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexGenfvOES(uint32 coord, TextureGenParameter pname, float* @params) => p_glTexGenfvOES(coord, pname, @params);

	private typealias glTexGeniOES_t = function void(uint32 coord, TextureGenParameter pname, int32 param);
	private static glTexGeniOES_t p_glTexGeniOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexGeniOES(uint32 coord, TextureGenParameter pname, int32 param) => p_glTexGeniOES(coord, pname, param);

	private typealias glTexGenivOES_t = function void(uint32 coord, TextureGenParameter pname, int32* @params);
	private static glTexGenivOES_t p_glTexGenivOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexGenivOES(uint32 coord, TextureGenParameter pname, int32* @params) => p_glTexGenivOES(coord, pname, @params);

	private typealias glGetTexGenfvOES_t = function void(uint32 coord, TextureGenParameter pname, float* @params);
	private static glGetTexGenfvOES_t p_glGetTexGenfvOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexGenfvOES(uint32 coord, TextureGenParameter pname, float* @params) => p_glGetTexGenfvOES(coord, pname, @params);

	private typealias glGetTexGenivOES_t = function void(uint32 coord, TextureGenParameter pname, int32* @params);
	private static glGetTexGenivOES_t p_glGetTexGenivOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexGenivOES(uint32 coord, TextureGenParameter pname, int32* @params) => p_glGetTexGenivOES(coord, pname, @params);

	private typealias glTexStorage3DMultisampleOES_t = function void(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations);
	private static glTexStorage3DMultisampleOES_t p_glTexStorage3DMultisampleOES;
	[CallingConvention(GL.CallConv)]
	public static void glTexStorage3DMultisampleOES(TextureTarget target, int32 samples, InternalFormat internalformat, int32 width, int32 height, int32 depth, bool fixedsamplelocations) => p_glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations);

	private typealias glTextureViewOES_t = function void(uint32 texture, TextureTarget target, uint32 origtexture, InternalFormat internalformat, uint32 minlevel, uint32 numlevels, uint32 minlayer, uint32 numlayers);
	private static glTextureViewOES_t p_glTextureViewOES;
	[CallingConvention(GL.CallConv)]
	public static void glTextureViewOES(uint32 texture, TextureTarget target, uint32 origtexture, InternalFormat internalformat, uint32 minlevel, uint32 numlevels, uint32 minlayer, uint32 numlayers) => p_glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

	private typealias glBindVertexArrayOES_t = function void(uint32 array);
	private static glBindVertexArrayOES_t p_glBindVertexArrayOES;
	[CallingConvention(GL.CallConv)]
	public static void glBindVertexArrayOES(uint32 array) => p_glBindVertexArrayOES(array);

	private typealias glDeleteVertexArraysOES_t = function void(int32 n, uint32* arrays);
	private static glDeleteVertexArraysOES_t p_glDeleteVertexArraysOES;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteVertexArraysOES(int32 n, uint32* arrays) => p_glDeleteVertexArraysOES(n, arrays);

	private typealias glGenVertexArraysOES_t = function void(int32 n, uint32* arrays);
	private static glGenVertexArraysOES_t p_glGenVertexArraysOES;
	[CallingConvention(GL.CallConv)]
	public static void glGenVertexArraysOES(int32 n, uint32* arrays) => p_glGenVertexArraysOES(n, arrays);

	private typealias glIsVertexArrayOES_t = function bool(uint32 array);
	private static glIsVertexArrayOES_t p_glIsVertexArrayOES;
	[CallingConvention(GL.CallConv)]
	public static bool glIsVertexArrayOES(uint32 array) => p_glIsVertexArrayOES(array);

	private typealias glViewportArrayvOES_t = function void(uint32 first, int32 count, float* v);
	private static glViewportArrayvOES_t p_glViewportArrayvOES;
	[CallingConvention(GL.CallConv)]
	public static void glViewportArrayvOES(uint32 first, int32 count, float* v) => p_glViewportArrayvOES(first, count, v);

	private typealias glViewportIndexedfOES_t = function void(uint32 index, float x, float y, float w, float h);
	private static glViewportIndexedfOES_t p_glViewportIndexedfOES;
	[CallingConvention(GL.CallConv)]
	public static void glViewportIndexedfOES(uint32 index, float x, float y, float w, float h) => p_glViewportIndexedfOES(index, x, y, w, h);

	private typealias glViewportIndexedfvOES_t = function void(uint32 index, float* v);
	private static glViewportIndexedfvOES_t p_glViewportIndexedfvOES;
	[CallingConvention(GL.CallConv)]
	public static void glViewportIndexedfvOES(uint32 index, float* v) => p_glViewportIndexedfvOES(index, v);

	private typealias glScissorArrayvOES_t = function void(uint32 first, int32 count, int32* v);
	private static glScissorArrayvOES_t p_glScissorArrayvOES;
	[CallingConvention(GL.CallConv)]
	public static void glScissorArrayvOES(uint32 first, int32 count, int32* v) => p_glScissorArrayvOES(first, count, v);

	private typealias glScissorIndexedOES_t = function void(uint32 index, int32 left, int32 bottom, int32 width, int32 height);
	private static glScissorIndexedOES_t p_glScissorIndexedOES;
	[CallingConvention(GL.CallConv)]
	public static void glScissorIndexedOES(uint32 index, int32 left, int32 bottom, int32 width, int32 height) => p_glScissorIndexedOES(index, left, bottom, width, height);

	private typealias glScissorIndexedvOES_t = function void(uint32 index, int32* v);
	private static glScissorIndexedvOES_t p_glScissorIndexedvOES;
	[CallingConvention(GL.CallConv)]
	public static void glScissorIndexedvOES(uint32 index, int32* v) => p_glScissorIndexedvOES(index, v);

	private typealias glDepthRangeArrayfvOES_t = function void(uint32 first, int32 count, float* v);
	private static glDepthRangeArrayfvOES_t p_glDepthRangeArrayfvOES;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangeArrayfvOES(uint32 first, int32 count, float* v) => p_glDepthRangeArrayfvOES(first, count, v);

	private typealias glDepthRangeIndexedfOES_t = function void(uint32 index, float n, float f);
	private static glDepthRangeIndexedfOES_t p_glDepthRangeIndexedfOES;
	[CallingConvention(GL.CallConv)]
	public static void glDepthRangeIndexedfOES(uint32 index, float n, float f) => p_glDepthRangeIndexedfOES(index, n, f);

	private typealias glGetFloati_vOES_t = function void(TypeEnum target, uint32 index, float* data);
	private static glGetFloati_vOES_t p_glGetFloati_vOES;
	[CallingConvention(GL.CallConv)]
	public static void glGetFloati_vOES(TypeEnum target, uint32 index, float* data) => p_glGetFloati_vOES(target, index, data);

	private typealias glFramebufferTextureMultiviewOVR_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 baseViewIndex, int32 numViews);
	private static glFramebufferTextureMultiviewOVR_t p_glFramebufferTextureMultiviewOVR;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 baseViewIndex, int32 numViews) => p_glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);

	private typealias glFramebufferTextureMultisampleMultiviewOVR_t = function void(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 samples, int32 baseViewIndex, int32 numViews);
	private static glFramebufferTextureMultisampleMultiviewOVR_t p_glFramebufferTextureMultisampleMultiviewOVR;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferTextureMultisampleMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint32 texture, int32 level, int32 samples, int32 baseViewIndex, int32 numViews) => p_glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews);

	private typealias glHintPGI_t = function void(uint32 target, int32 mode);
	private static glHintPGI_t p_glHintPGI;
	[CallingConvention(GL.CallConv)]
	public static void glHintPGI(uint32 target, int32 mode) => p_glHintPGI(target, mode);

	private typealias glAlphaFuncQCOM_t = function void(uint32 func, float @ref);
	private static glAlphaFuncQCOM_t p_glAlphaFuncQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glAlphaFuncQCOM(uint32 func, float @ref) => p_glAlphaFuncQCOM(func, @ref);

	private typealias glGetDriverControlsQCOM_t = function void(int32* num, int32 size, uint32* driverControls);
	private static glGetDriverControlsQCOM_t p_glGetDriverControlsQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glGetDriverControlsQCOM(int32* num, int32 size, uint32* driverControls) => p_glGetDriverControlsQCOM(num, size, driverControls);

	private typealias glGetDriverControlStringQCOM_t = function void(uint32 driverControl, int32 bufSize, int32* length, char8* driverControlString);
	private static glGetDriverControlStringQCOM_t p_glGetDriverControlStringQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glGetDriverControlStringQCOM(uint32 driverControl, int32 bufSize, int32* length, char8* driverControlString) => p_glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);

	private typealias glEnableDriverControlQCOM_t = function void(uint32 driverControl);
	private static glEnableDriverControlQCOM_t p_glEnableDriverControlQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glEnableDriverControlQCOM(uint32 driverControl) => p_glEnableDriverControlQCOM(driverControl);

	private typealias glDisableDriverControlQCOM_t = function void(uint32 driverControl);
	private static glDisableDriverControlQCOM_t p_glDisableDriverControlQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glDisableDriverControlQCOM(uint32 driverControl) => p_glDisableDriverControlQCOM(driverControl);

	private typealias glExtGetTexturesQCOM_t = function void(uint32* textures, int32 maxTextures, int32* numTextures);
	private static glExtGetTexturesQCOM_t p_glExtGetTexturesQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetTexturesQCOM(uint32* textures, int32 maxTextures, int32* numTextures) => p_glExtGetTexturesQCOM(textures, maxTextures, numTextures);

	private typealias glExtGetBuffersQCOM_t = function void(uint32* buffers, int32 maxBuffers, int32* numBuffers);
	private static glExtGetBuffersQCOM_t p_glExtGetBuffersQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetBuffersQCOM(uint32* buffers, int32 maxBuffers, int32* numBuffers) => p_glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);

	private typealias glExtGetRenderbuffersQCOM_t = function void(uint32* renderbuffers, int32 maxRenderbuffers, int32* numRenderbuffers);
	private static glExtGetRenderbuffersQCOM_t p_glExtGetRenderbuffersQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetRenderbuffersQCOM(uint32* renderbuffers, int32 maxRenderbuffers, int32* numRenderbuffers) => p_glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);

	private typealias glExtGetFramebuffersQCOM_t = function void(uint32* framebuffers, int32 maxFramebuffers, int32* numFramebuffers);
	private static glExtGetFramebuffersQCOM_t p_glExtGetFramebuffersQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetFramebuffersQCOM(uint32* framebuffers, int32 maxFramebuffers, int32* numFramebuffers) => p_glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);

	private typealias glExtGetTexLevelParameterivQCOM_t = function void(uint32 texture, uint32 face, int32 level, uint32 pname, int32* @params);
	private static glExtGetTexLevelParameterivQCOM_t p_glExtGetTexLevelParameterivQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetTexLevelParameterivQCOM(uint32 texture, uint32 face, int32 level, uint32 pname, int32* @params) => p_glExtGetTexLevelParameterivQCOM(texture, face, level, pname, @params);

	private typealias glExtTexObjectStateOverrideiQCOM_t = function void(uint32 target, uint32 pname, int32 param);
	private static glExtTexObjectStateOverrideiQCOM_t p_glExtTexObjectStateOverrideiQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtTexObjectStateOverrideiQCOM(uint32 target, uint32 pname, int32 param) => p_glExtTexObjectStateOverrideiQCOM(target, pname, param);

	private typealias glExtGetTexSubImageQCOM_t = function void(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* texels);
	private static glExtGetTexSubImageQCOM_t p_glExtGetTexSubImageQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetTexSubImageQCOM(uint32 target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 width, int32 height, int32 depth, PixelFormat format, PixelType type, void* texels) => p_glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);

	private typealias glExtGetBufferPointervQCOM_t = function void(uint32 target, void** @params);
	private static glExtGetBufferPointervQCOM_t p_glExtGetBufferPointervQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetBufferPointervQCOM(uint32 target, void** @params) => p_glExtGetBufferPointervQCOM(target, @params);

	private typealias glExtGetShadersQCOM_t = function void(uint32* shaders, int32 maxShaders, int32* numShaders);
	private static glExtGetShadersQCOM_t p_glExtGetShadersQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetShadersQCOM(uint32* shaders, int32 maxShaders, int32* numShaders) => p_glExtGetShadersQCOM(shaders, maxShaders, numShaders);

	private typealias glExtGetProgramsQCOM_t = function void(uint32* programs, int32 maxPrograms, int32* numPrograms);
	private static glExtGetProgramsQCOM_t p_glExtGetProgramsQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetProgramsQCOM(uint32* programs, int32 maxPrograms, int32* numPrograms) => p_glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);

	private typealias glExtIsProgramBinaryQCOM_t = function bool(uint32 program);
	private static glExtIsProgramBinaryQCOM_t p_glExtIsProgramBinaryQCOM;
	[CallingConvention(GL.CallConv)]
	public static bool glExtIsProgramBinaryQCOM(uint32 program) => p_glExtIsProgramBinaryQCOM(program);

	private typealias glExtGetProgramBinarySourceQCOM_t = function void(uint32 program, ShaderType shadertype, char8* source, int32* length);
	private static glExtGetProgramBinarySourceQCOM_t p_glExtGetProgramBinarySourceQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glExtGetProgramBinarySourceQCOM(uint32 program, ShaderType shadertype, char8* source, int32* length) => p_glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);

	private typealias glFramebufferFoveationConfigQCOM_t = function void(uint32 framebuffer, uint32 numLayers, uint32 focalPointsPerLayer, uint32 requestedFeatures, uint32* providedFeatures);
	private static glFramebufferFoveationConfigQCOM_t p_glFramebufferFoveationConfigQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferFoveationConfigQCOM(uint32 framebuffer, uint32 numLayers, uint32 focalPointsPerLayer, uint32 requestedFeatures, uint32* providedFeatures) => p_glFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);

	private typealias glFramebufferFoveationParametersQCOM_t = function void(uint32 framebuffer, uint32 layer, uint32 focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
	private static glFramebufferFoveationParametersQCOM_t p_glFramebufferFoveationParametersQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferFoveationParametersQCOM(uint32 framebuffer, uint32 layer, uint32 focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) => p_glFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);

	private typealias glTextureFoveationParametersQCOM_t = function void(uint32 texture, uint32 layer, uint32 focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
	private static glTextureFoveationParametersQCOM_t p_glTextureFoveationParametersQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glTextureFoveationParametersQCOM(uint32 texture, uint32 layer, uint32 focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) => p_glTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);

	private typealias glFramebufferFetchBarrierQCOM_t = function void();
	private static glFramebufferFetchBarrierQCOM_t p_glFramebufferFetchBarrierQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glFramebufferFetchBarrierQCOM() => p_glFramebufferFetchBarrierQCOM();

	private typealias glStartTilingQCOM_t = function void(uint32 x, uint32 y, uint32 width, uint32 height, uint32 preserveMask);
	private static glStartTilingQCOM_t p_glStartTilingQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glStartTilingQCOM(uint32 x, uint32 y, uint32 width, uint32 height, uint32 preserveMask) => p_glStartTilingQCOM(x, y, width, height, preserveMask);

	private typealias glEndTilingQCOM_t = function void(uint32 preserveMask);
	private static glEndTilingQCOM_t p_glEndTilingQCOM;
	[CallingConvention(GL.CallConv)]
	public static void glEndTilingQCOM(uint32 preserveMask) => p_glEndTilingQCOM(preserveMask);

	private typealias glDetailTexFuncSGIS_t = function void(TextureTarget target, int32 n, float* points);
	private static glDetailTexFuncSGIS_t p_glDetailTexFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glDetailTexFuncSGIS(TextureTarget target, int32 n, float* points) => p_glDetailTexFuncSGIS(target, n, points);

	private typealias glGetDetailTexFuncSGIS_t = function void(TextureTarget target, float* points);
	private static glGetDetailTexFuncSGIS_t p_glGetDetailTexFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glGetDetailTexFuncSGIS(TextureTarget target, float* points) => p_glGetDetailTexFuncSGIS(target, points);

	private typealias glFogFuncSGIS_t = function void(int32 n, float* points);
	private static glFogFuncSGIS_t p_glFogFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glFogFuncSGIS(int32 n, float* points) => p_glFogFuncSGIS(n, points);

	private typealias glGetFogFuncSGIS_t = function void(float* points);
	private static glGetFogFuncSGIS_t p_glGetFogFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glGetFogFuncSGIS(float* points) => p_glGetFogFuncSGIS(points);

	private typealias glSampleMaskSGIS_t = function void(float value, bool invert);
	private static glSampleMaskSGIS_t p_glSampleMaskSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glSampleMaskSGIS(float value, bool invert) => p_glSampleMaskSGIS(value, invert);

	private typealias glSamplePatternSGIS_t = function void(SamplePatternSGIS pattern);
	private static glSamplePatternSGIS_t p_glSamplePatternSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glSamplePatternSGIS(SamplePatternSGIS pattern) => p_glSamplePatternSGIS(pattern);

	private typealias glPixelTexGenParameteriSGIS_t = function void(PixelTexGenParameterNameSGIS pname, int32 param);
	private static glPixelTexGenParameteriSGIS_t p_glPixelTexGenParameteriSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTexGenParameteriSGIS(PixelTexGenParameterNameSGIS pname, int32 param) => p_glPixelTexGenParameteriSGIS(pname, param);

	private typealias glPixelTexGenParameterivSGIS_t = function void(PixelTexGenParameterNameSGIS pname, int32* @params);
	private static glPixelTexGenParameterivSGIS_t p_glPixelTexGenParameterivSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int32* @params) => p_glPixelTexGenParameterivSGIS(pname, @params);

	private typealias glPixelTexGenParameterfSGIS_t = function void(PixelTexGenParameterNameSGIS pname, float param);
	private static glPixelTexGenParameterfSGIS_t p_glPixelTexGenParameterfSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTexGenParameterfSGIS(PixelTexGenParameterNameSGIS pname, float param) => p_glPixelTexGenParameterfSGIS(pname, param);

	private typealias glPixelTexGenParameterfvSGIS_t = function void(PixelTexGenParameterNameSGIS pname, float* @params);
	private static glPixelTexGenParameterfvSGIS_t p_glPixelTexGenParameterfvSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float* @params) => p_glPixelTexGenParameterfvSGIS(pname, @params);

	private typealias glGetPixelTexGenParameterivSGIS_t = function void(PixelTexGenParameterNameSGIS pname, int32* @params);
	private static glGetPixelTexGenParameterivSGIS_t p_glGetPixelTexGenParameterivSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glGetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int32* @params) => p_glGetPixelTexGenParameterivSGIS(pname, @params);

	private typealias glGetPixelTexGenParameterfvSGIS_t = function void(PixelTexGenParameterNameSGIS pname, float* @params);
	private static glGetPixelTexGenParameterfvSGIS_t p_glGetPixelTexGenParameterfvSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glGetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float* @params) => p_glGetPixelTexGenParameterfvSGIS(pname, @params);

	private typealias glPointParameterfSGIS_t = function void(uint32 pname, float param);
	private static glPointParameterfSGIS_t p_glPointParameterfSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterfSGIS(uint32 pname, float param) => p_glPointParameterfSGIS(pname, param);

	private typealias glPointParameterfvSGIS_t = function void(uint32 pname, float* @params);
	private static glPointParameterfvSGIS_t p_glPointParameterfvSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glPointParameterfvSGIS(uint32 pname, float* @params) => p_glPointParameterfvSGIS(pname, @params);

	private typealias glSharpenTexFuncSGIS_t = function void(TextureTarget target, int32 n, float* points);
	private static glSharpenTexFuncSGIS_t p_glSharpenTexFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glSharpenTexFuncSGIS(TextureTarget target, int32 n, float* points) => p_glSharpenTexFuncSGIS(target, n, points);

	private typealias glGetSharpenTexFuncSGIS_t = function void(TextureTarget target, float* points);
	private static glGetSharpenTexFuncSGIS_t p_glGetSharpenTexFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glGetSharpenTexFuncSGIS(TextureTarget target, float* points) => p_glGetSharpenTexFuncSGIS(target, points);

	private typealias glTexImage4DSGIS_t = function void(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 size4d, int32 border, PixelFormat format, PixelType type, void* pixels);
	private static glTexImage4DSGIS_t p_glTexImage4DSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glTexImage4DSGIS(TextureTarget target, int32 level, InternalFormat internalformat, int32 width, int32 height, int32 depth, int32 size4d, int32 border, PixelFormat format, PixelType type, void* pixels) => p_glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);

	private typealias glTexSubImage4DSGIS_t = function void(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 woffset, int32 width, int32 height, int32 depth, int32 size4d, PixelFormat format, PixelType type, void* pixels);
	private static glTexSubImage4DSGIS_t p_glTexSubImage4DSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glTexSubImage4DSGIS(TextureTarget target, int32 level, int32 xoffset, int32 yoffset, int32 zoffset, int32 woffset, int32 width, int32 height, int32 depth, int32 size4d, PixelFormat format, PixelType type, void* pixels) => p_glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);

	private typealias glTextureColorMaskSGIS_t = function void(bool red, bool green, bool blue, bool alpha);
	private static glTextureColorMaskSGIS_t p_glTextureColorMaskSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glTextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha) => p_glTextureColorMaskSGIS(red, green, blue, alpha);

	private typealias glGetTexFilterFuncSGIS_t = function void(TextureTarget target, uint32 filter, float* weights);
	private static glGetTexFilterFuncSGIS_t p_glGetTexFilterFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glGetTexFilterFuncSGIS(TextureTarget target, uint32 filter, float* weights) => p_glGetTexFilterFuncSGIS(target, filter, weights);

	private typealias glTexFilterFuncSGIS_t = function void(TextureTarget target, uint32 filter, int32 n, float* weights);
	private static glTexFilterFuncSGIS_t p_glTexFilterFuncSGIS;
	[CallingConvention(GL.CallConv)]
	public static void glTexFilterFuncSGIS(TextureTarget target, uint32 filter, int32 n, float* weights) => p_glTexFilterFuncSGIS(target, filter, n, weights);

	private typealias glAsyncMarkerSGIX_t = function void(uint32 marker);
	private static glAsyncMarkerSGIX_t p_glAsyncMarkerSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glAsyncMarkerSGIX(uint32 marker) => p_glAsyncMarkerSGIX(marker);

	private typealias glFinishAsyncSGIX_t = function int32(uint32* markerp);
	private static glFinishAsyncSGIX_t p_glFinishAsyncSGIX;
	[CallingConvention(GL.CallConv)]
	public static int32 glFinishAsyncSGIX(uint32* markerp) => p_glFinishAsyncSGIX(markerp);

	private typealias glPollAsyncSGIX_t = function int32(uint32* markerp);
	private static glPollAsyncSGIX_t p_glPollAsyncSGIX;
	[CallingConvention(GL.CallConv)]
	public static int32 glPollAsyncSGIX(uint32* markerp) => p_glPollAsyncSGIX(markerp);

	private typealias glGenAsyncMarkersSGIX_t = function uint32(int32 range);
	private static glGenAsyncMarkersSGIX_t p_glGenAsyncMarkersSGIX;
	[CallingConvention(GL.CallConv)]
	public static uint32 glGenAsyncMarkersSGIX(int32 range) => p_glGenAsyncMarkersSGIX(range);

	private typealias glDeleteAsyncMarkersSGIX_t = function void(uint32 marker, int32 range);
	private static glDeleteAsyncMarkersSGIX_t p_glDeleteAsyncMarkersSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glDeleteAsyncMarkersSGIX(uint32 marker, int32 range) => p_glDeleteAsyncMarkersSGIX(marker, range);

	private typealias glIsAsyncMarkerSGIX_t = function bool(uint32 marker);
	private static glIsAsyncMarkerSGIX_t p_glIsAsyncMarkerSGIX;
	[CallingConvention(GL.CallConv)]
	public static bool glIsAsyncMarkerSGIX(uint32 marker) => p_glIsAsyncMarkerSGIX(marker);

	private typealias glFlushRasterSGIX_t = function void();
	private static glFlushRasterSGIX_t p_glFlushRasterSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFlushRasterSGIX() => p_glFlushRasterSGIX();

	private typealias glFragmentColorMaterialSGIX_t = function void(MaterialFace face, uint32 mode);
	private static glFragmentColorMaterialSGIX_t p_glFragmentColorMaterialSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentColorMaterialSGIX(MaterialFace face, uint32 mode) => p_glFragmentColorMaterialSGIX(face, mode);

	private typealias glFragmentLightfSGIX_t = function void(uint32 light, uint32 pname, float param);
	private static glFragmentLightfSGIX_t p_glFragmentLightfSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightfSGIX(uint32 light, uint32 pname, float param) => p_glFragmentLightfSGIX(light, pname, param);

	private typealias glFragmentLightfvSGIX_t = function void(uint32 light, uint32 pname, float* @params);
	private static glFragmentLightfvSGIX_t p_glFragmentLightfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightfvSGIX(uint32 light, uint32 pname, float* @params) => p_glFragmentLightfvSGIX(light, pname, @params);

	private typealias glFragmentLightiSGIX_t = function void(uint32 light, uint32 pname, int32 param);
	private static glFragmentLightiSGIX_t p_glFragmentLightiSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightiSGIX(uint32 light, uint32 pname, int32 param) => p_glFragmentLightiSGIX(light, pname, param);

	private typealias glFragmentLightivSGIX_t = function void(uint32 light, uint32 pname, int32* @params);
	private static glFragmentLightivSGIX_t p_glFragmentLightivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightivSGIX(uint32 light, uint32 pname, int32* @params) => p_glFragmentLightivSGIX(light, pname, @params);

	private typealias glFragmentLightModelfSGIX_t = function void(FragmentLightModelParameterSGIX pname, float param);
	private static glFragmentLightModelfSGIX_t p_glFragmentLightModelfSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightModelfSGIX(FragmentLightModelParameterSGIX pname, float param) => p_glFragmentLightModelfSGIX(pname, param);

	private typealias glFragmentLightModelfvSGIX_t = function void(FragmentLightModelParameterSGIX pname, float* @params);
	private static glFragmentLightModelfvSGIX_t p_glFragmentLightModelfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, float* @params) => p_glFragmentLightModelfvSGIX(pname, @params);

	private typealias glFragmentLightModeliSGIX_t = function void(FragmentLightModelParameterSGIX pname, int32 param);
	private static glFragmentLightModeliSGIX_t p_glFragmentLightModeliSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightModeliSGIX(FragmentLightModelParameterSGIX pname, int32 param) => p_glFragmentLightModeliSGIX(pname, param);

	private typealias glFragmentLightModelivSGIX_t = function void(FragmentLightModelParameterSGIX pname, int32* @params);
	private static glFragmentLightModelivSGIX_t p_glFragmentLightModelivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, int32* @params) => p_glFragmentLightModelivSGIX(pname, @params);

	private typealias glFragmentMaterialfSGIX_t = function void(MaterialFace face, uint32 pname, float param);
	private static glFragmentMaterialfSGIX_t p_glFragmentMaterialfSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentMaterialfSGIX(MaterialFace face, uint32 pname, float param) => p_glFragmentMaterialfSGIX(face, pname, param);

	private typealias glFragmentMaterialfvSGIX_t = function void(MaterialFace face, uint32 pname, float* @params);
	private static glFragmentMaterialfvSGIX_t p_glFragmentMaterialfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentMaterialfvSGIX(MaterialFace face, uint32 pname, float* @params) => p_glFragmentMaterialfvSGIX(face, pname, @params);

	private typealias glFragmentMaterialiSGIX_t = function void(MaterialFace face, uint32 pname, int32 param);
	private static glFragmentMaterialiSGIX_t p_glFragmentMaterialiSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentMaterialiSGIX(MaterialFace face, uint32 pname, int32 param) => p_glFragmentMaterialiSGIX(face, pname, param);

	private typealias glFragmentMaterialivSGIX_t = function void(MaterialFace face, uint32 pname, int32* @params);
	private static glFragmentMaterialivSGIX_t p_glFragmentMaterialivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFragmentMaterialivSGIX(MaterialFace face, uint32 pname, int32* @params) => p_glFragmentMaterialivSGIX(face, pname, @params);

	private typealias glGetFragmentLightfvSGIX_t = function void(uint32 light, uint32 pname, float* @params);
	private static glGetFragmentLightfvSGIX_t p_glGetFragmentLightfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glGetFragmentLightfvSGIX(uint32 light, uint32 pname, float* @params) => p_glGetFragmentLightfvSGIX(light, pname, @params);

	private typealias glGetFragmentLightivSGIX_t = function void(uint32 light, uint32 pname, int32* @params);
	private static glGetFragmentLightivSGIX_t p_glGetFragmentLightivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glGetFragmentLightivSGIX(uint32 light, uint32 pname, int32* @params) => p_glGetFragmentLightivSGIX(light, pname, @params);

	private typealias glGetFragmentMaterialfvSGIX_t = function void(MaterialFace face, uint32 pname, float* @params);
	private static glGetFragmentMaterialfvSGIX_t p_glGetFragmentMaterialfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glGetFragmentMaterialfvSGIX(MaterialFace face, uint32 pname, float* @params) => p_glGetFragmentMaterialfvSGIX(face, pname, @params);

	private typealias glGetFragmentMaterialivSGIX_t = function void(MaterialFace face, uint32 pname, int32* @params);
	private static glGetFragmentMaterialivSGIX_t p_glGetFragmentMaterialivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glGetFragmentMaterialivSGIX(MaterialFace face, uint32 pname, int32* @params) => p_glGetFragmentMaterialivSGIX(face, pname, @params);

	private typealias glLightEnviSGIX_t = function void(uint32 pname, int32 param);
	private static glLightEnviSGIX_t p_glLightEnviSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glLightEnviSGIX(uint32 pname, int32 param) => p_glLightEnviSGIX(pname, param);

	private typealias glFrameZoomSGIX_t = function void(int32 factor);
	private static glFrameZoomSGIX_t p_glFrameZoomSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glFrameZoomSGIX(int32 factor) => p_glFrameZoomSGIX(factor);

	private typealias glIglooInterfaceSGIX_t = function void(uint32 pname, void* @params);
	private static glIglooInterfaceSGIX_t p_glIglooInterfaceSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glIglooInterfaceSGIX(uint32 pname, void* @params) => p_glIglooInterfaceSGIX(pname, @params);

	private typealias glGetInstrumentsSGIX_t = function int32();
	private static glGetInstrumentsSGIX_t p_glGetInstrumentsSGIX;
	[CallingConvention(GL.CallConv)]
	public static int32 glGetInstrumentsSGIX() => p_glGetInstrumentsSGIX();

	private typealias glInstrumentsBufferSGIX_t = function void(int32 size, int32* buffer);
	private static glInstrumentsBufferSGIX_t p_glInstrumentsBufferSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glInstrumentsBufferSGIX(int32 size, int32* buffer) => p_glInstrumentsBufferSGIX(size, buffer);

	private typealias glPollInstrumentsSGIX_t = function int32(int32* marker_p);
	private static glPollInstrumentsSGIX_t p_glPollInstrumentsSGIX;
	[CallingConvention(GL.CallConv)]
	public static int32 glPollInstrumentsSGIX(int32* marker_p) => p_glPollInstrumentsSGIX(marker_p);

	private typealias glReadInstrumentsSGIX_t = function void(int32 marker);
	private static glReadInstrumentsSGIX_t p_glReadInstrumentsSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glReadInstrumentsSGIX(int32 marker) => p_glReadInstrumentsSGIX(marker);

	private typealias glStartInstrumentsSGIX_t = function void();
	private static glStartInstrumentsSGIX_t p_glStartInstrumentsSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glStartInstrumentsSGIX() => p_glStartInstrumentsSGIX();

	private typealias glStopInstrumentsSGIX_t = function void(int32 marker);
	private static glStopInstrumentsSGIX_t p_glStopInstrumentsSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glStopInstrumentsSGIX(int32 marker) => p_glStopInstrumentsSGIX(marker);

	private typealias glGetListParameterfvSGIX_t = function void(uint32 list, ListParameterName pname, float* @params);
	private static glGetListParameterfvSGIX_t p_glGetListParameterfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glGetListParameterfvSGIX(uint32 list, ListParameterName pname, float* @params) => p_glGetListParameterfvSGIX(list, pname, @params);

	private typealias glGetListParameterivSGIX_t = function void(uint32 list, ListParameterName pname, int32* @params);
	private static glGetListParameterivSGIX_t p_glGetListParameterivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glGetListParameterivSGIX(uint32 list, ListParameterName pname, int32* @params) => p_glGetListParameterivSGIX(list, pname, @params);

	private typealias glListParameterfSGIX_t = function void(uint32 list, ListParameterName pname, float param);
	private static glListParameterfSGIX_t p_glListParameterfSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glListParameterfSGIX(uint32 list, ListParameterName pname, float param) => p_glListParameterfSGIX(list, pname, param);

	private typealias glListParameterfvSGIX_t = function void(uint32 list, ListParameterName pname, float* @params);
	private static glListParameterfvSGIX_t p_glListParameterfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glListParameterfvSGIX(uint32 list, ListParameterName pname, float* @params) => p_glListParameterfvSGIX(list, pname, @params);

	private typealias glListParameteriSGIX_t = function void(uint32 list, ListParameterName pname, int32 param);
	private static glListParameteriSGIX_t p_glListParameteriSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glListParameteriSGIX(uint32 list, ListParameterName pname, int32 param) => p_glListParameteriSGIX(list, pname, param);

	private typealias glListParameterivSGIX_t = function void(uint32 list, ListParameterName pname, int32* @params);
	private static glListParameterivSGIX_t p_glListParameterivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glListParameterivSGIX(uint32 list, ListParameterName pname, int32* @params) => p_glListParameterivSGIX(list, pname, @params);

	private typealias glPixelTexGenSGIX_t = function void(uint32 mode);
	private static glPixelTexGenSGIX_t p_glPixelTexGenSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glPixelTexGenSGIX(uint32 mode) => p_glPixelTexGenSGIX(mode);

	private typealias glDeformationMap3dSGIX_t = function void(uint32 target, double u1, double u2, int32 ustride, int32 uorder, double v1, double v2, int32 vstride, int32 vorder, double w1, double w2, int32 wstride, int32 worder, double* points);
	private static glDeformationMap3dSGIX_t p_glDeformationMap3dSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glDeformationMap3dSGIX(uint32 target, double u1, double u2, int32 ustride, int32 uorder, double v1, double v2, int32 vstride, int32 vorder, double w1, double w2, int32 wstride, int32 worder, double* points) => p_glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);

	private typealias glDeformationMap3fSGIX_t = function void(uint32 target, float u1, float u2, int32 ustride, int32 uorder, float v1, float v2, int32 vstride, int32 vorder, float w1, float w2, int32 wstride, int32 worder, float* points);
	private static glDeformationMap3fSGIX_t p_glDeformationMap3fSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glDeformationMap3fSGIX(uint32 target, float u1, float u2, int32 ustride, int32 uorder, float v1, float v2, int32 vstride, int32 vorder, float w1, float w2, int32 wstride, int32 worder, float* points) => p_glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);

	private typealias glDeformSGIX_t = function void(uint32 mask);
	private static glDeformSGIX_t p_glDeformSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glDeformSGIX(uint32 mask) => p_glDeformSGIX(mask);

	private typealias glLoadIdentityDeformationMapSGIX_t = function void(uint32 mask);
	private static glLoadIdentityDeformationMapSGIX_t p_glLoadIdentityDeformationMapSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glLoadIdentityDeformationMapSGIX(uint32 mask) => p_glLoadIdentityDeformationMapSGIX(mask);

	private typealias glReferencePlaneSGIX_t = function void(double* equation);
	private static glReferencePlaneSGIX_t p_glReferencePlaneSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glReferencePlaneSGIX(double* equation) => p_glReferencePlaneSGIX(equation);

	private typealias glSpriteParameterfSGIX_t = function void(uint32 pname, float param);
	private static glSpriteParameterfSGIX_t p_glSpriteParameterfSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glSpriteParameterfSGIX(uint32 pname, float param) => p_glSpriteParameterfSGIX(pname, param);

	private typealias glSpriteParameterfvSGIX_t = function void(uint32 pname, float* @params);
	private static glSpriteParameterfvSGIX_t p_glSpriteParameterfvSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glSpriteParameterfvSGIX(uint32 pname, float* @params) => p_glSpriteParameterfvSGIX(pname, @params);

	private typealias glSpriteParameteriSGIX_t = function void(uint32 pname, int32 param);
	private static glSpriteParameteriSGIX_t p_glSpriteParameteriSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glSpriteParameteriSGIX(uint32 pname, int32 param) => p_glSpriteParameteriSGIX(pname, param);

	private typealias glSpriteParameterivSGIX_t = function void(uint32 pname, int32* @params);
	private static glSpriteParameterivSGIX_t p_glSpriteParameterivSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glSpriteParameterivSGIX(uint32 pname, int32* @params) => p_glSpriteParameterivSGIX(pname, @params);

	private typealias glTagSampleBufferSGIX_t = function void();
	private static glTagSampleBufferSGIX_t p_glTagSampleBufferSGIX;
	[CallingConvention(GL.CallConv)]
	public static void glTagSampleBufferSGIX() => p_glTagSampleBufferSGIX();

	private typealias glColorTableSGI_t = function void(ColorTableTargetSGI target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* table);
	private static glColorTableSGI_t p_glColorTableSGI;
	[CallingConvention(GL.CallConv)]
	public static void glColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int32 width, PixelFormat format, PixelType type, void* table) => p_glColorTableSGI(target, internalformat, width, format, type, table);

	private typealias glColorTableParameterfvSGI_t = function void(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, float* @params);
	private static glColorTableParameterfvSGI_t p_glColorTableParameterfvSGI;
	[CallingConvention(GL.CallConv)]
	public static void glColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, float* @params) => p_glColorTableParameterfvSGI(target, pname, @params);

	private typealias glColorTableParameterivSGI_t = function void(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, int32* @params);
	private static glColorTableParameterivSGI_t p_glColorTableParameterivSGI;
	[CallingConvention(GL.CallConv)]
	public static void glColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, int32* @params) => p_glColorTableParameterivSGI(target, pname, @params);

	private typealias glCopyColorTableSGI_t = function void(ColorTableTargetSGI target, InternalFormat internalformat, int32 x, int32 y, int32 width);
	private static glCopyColorTableSGI_t p_glCopyColorTableSGI;
	[CallingConvention(GL.CallConv)]
	public static void glCopyColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int32 x, int32 y, int32 width) => p_glCopyColorTableSGI(target, internalformat, x, y, width);

	private typealias glGetColorTableSGI_t = function void(ColorTableTargetSGI target, PixelFormat format, PixelType type, void* table);
	private static glGetColorTableSGI_t p_glGetColorTableSGI;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, void* table) => p_glGetColorTableSGI(target, format, type, table);

	private typealias glGetColorTableParameterfvSGI_t = function void(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, float* @params);
	private static glGetColorTableParameterfvSGI_t p_glGetColorTableParameterfvSGI;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableParameterfvSGI(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, float* @params) => p_glGetColorTableParameterfvSGI(target, pname, @params);

	private typealias glGetColorTableParameterivSGI_t = function void(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, int32* @params);
	private static glGetColorTableParameterivSGI_t p_glGetColorTableParameterivSGI;
	[CallingConvention(GL.CallConv)]
	public static void glGetColorTableParameterivSGI(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, int32* @params) => p_glGetColorTableParameterivSGI(target, pname, @params);

	private typealias glFinishTextureSUNX_t = function void();
	private static glFinishTextureSUNX_t p_glFinishTextureSUNX;
	[CallingConvention(GL.CallConv)]
	public static void glFinishTextureSUNX() => p_glFinishTextureSUNX();

	private typealias glGlobalAlphaFactorbSUN_t = function void(int8 factor);
	private static glGlobalAlphaFactorbSUN_t p_glGlobalAlphaFactorbSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactorbSUN(int8 factor) => p_glGlobalAlphaFactorbSUN(factor);

	private typealias glGlobalAlphaFactorsSUN_t = function void(int16 factor);
	private static glGlobalAlphaFactorsSUN_t p_glGlobalAlphaFactorsSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactorsSUN(int16 factor) => p_glGlobalAlphaFactorsSUN(factor);

	private typealias glGlobalAlphaFactoriSUN_t = function void(int32 factor);
	private static glGlobalAlphaFactoriSUN_t p_glGlobalAlphaFactoriSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactoriSUN(int32 factor) => p_glGlobalAlphaFactoriSUN(factor);

	private typealias glGlobalAlphaFactorfSUN_t = function void(float factor);
	private static glGlobalAlphaFactorfSUN_t p_glGlobalAlphaFactorfSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactorfSUN(float factor) => p_glGlobalAlphaFactorfSUN(factor);

	private typealias glGlobalAlphaFactordSUN_t = function void(double factor);
	private static glGlobalAlphaFactordSUN_t p_glGlobalAlphaFactordSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactordSUN(double factor) => p_glGlobalAlphaFactordSUN(factor);

	private typealias glGlobalAlphaFactorubSUN_t = function void(uint8 factor);
	private static glGlobalAlphaFactorubSUN_t p_glGlobalAlphaFactorubSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactorubSUN(uint8 factor) => p_glGlobalAlphaFactorubSUN(factor);

	private typealias glGlobalAlphaFactorusSUN_t = function void(uint16 factor);
	private static glGlobalAlphaFactorusSUN_t p_glGlobalAlphaFactorusSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactorusSUN(uint16 factor) => p_glGlobalAlphaFactorusSUN(factor);

	private typealias glGlobalAlphaFactoruiSUN_t = function void(uint32 factor);
	private static glGlobalAlphaFactoruiSUN_t p_glGlobalAlphaFactoruiSUN;
	[CallingConvention(GL.CallConv)]
	public static void glGlobalAlphaFactoruiSUN(uint32 factor) => p_glGlobalAlphaFactoruiSUN(factor);

	private typealias glDrawMeshArraysSUN_t = function void(PrimitiveType mode, int32 first, int32 count, int32 width);
	private static glDrawMeshArraysSUN_t p_glDrawMeshArraysSUN;
	[CallingConvention(GL.CallConv)]
	public static void glDrawMeshArraysSUN(PrimitiveType mode, int32 first, int32 count, int32 width) => p_glDrawMeshArraysSUN(mode, first, count, width);

	private typealias glReplacementCodeuiSUN_t = function void(uint32 code);
	private static glReplacementCodeuiSUN_t p_glReplacementCodeuiSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiSUN(uint32 code) => p_glReplacementCodeuiSUN(code);

	private typealias glReplacementCodeusSUN_t = function void(uint16 code);
	private static glReplacementCodeusSUN_t p_glReplacementCodeusSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeusSUN(uint16 code) => p_glReplacementCodeusSUN(code);

	private typealias glReplacementCodeubSUN_t = function void(uint8 code);
	private static glReplacementCodeubSUN_t p_glReplacementCodeubSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeubSUN(uint8 code) => p_glReplacementCodeubSUN(code);

	private typealias glReplacementCodeuivSUN_t = function void(uint32* code);
	private static glReplacementCodeuivSUN_t p_glReplacementCodeuivSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuivSUN(uint32* code) => p_glReplacementCodeuivSUN(code);

	private typealias glReplacementCodeusvSUN_t = function void(int16* code);
	private static glReplacementCodeusvSUN_t p_glReplacementCodeusvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeusvSUN(int16* code) => p_glReplacementCodeusvSUN(code);

	private typealias glReplacementCodeubvSUN_t = function void(uint8* code);
	private static glReplacementCodeubvSUN_t p_glReplacementCodeubvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeubvSUN(uint8* code) => p_glReplacementCodeubvSUN(code);

	private typealias glReplacementCodePointerSUN_t = function void(uint32 type, int32 stride, void** pointer);
	private static glReplacementCodePointerSUN_t p_glReplacementCodePointerSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodePointerSUN(uint32 type, int32 stride, void** pointer) => p_glReplacementCodePointerSUN(type, stride, pointer);

	private typealias glColor4ubVertex2fSUN_t = function void(uint8 r, uint8 g, uint8 b, uint8 a, float x, float y);
	private static glColor4ubVertex2fSUN_t p_glColor4ubVertex2fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor4ubVertex2fSUN(uint8 r, uint8 g, uint8 b, uint8 a, float x, float y) => p_glColor4ubVertex2fSUN(r, g, b, a, x, y);

	private typealias glColor4ubVertex2fvSUN_t = function void(uint8* c, float* v);
	private static glColor4ubVertex2fvSUN_t p_glColor4ubVertex2fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor4ubVertex2fvSUN(uint8* c, float* v) => p_glColor4ubVertex2fvSUN(c, v);

	private typealias glColor4ubVertex3fSUN_t = function void(uint8 r, uint8 g, uint8 b, uint8 a, float x, float y, float z);
	private static glColor4ubVertex3fSUN_t p_glColor4ubVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor4ubVertex3fSUN(uint8 r, uint8 g, uint8 b, uint8 a, float x, float y, float z) => p_glColor4ubVertex3fSUN(r, g, b, a, x, y, z);

	private typealias glColor4ubVertex3fvSUN_t = function void(uint8* c, float* v);
	private static glColor4ubVertex3fvSUN_t p_glColor4ubVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor4ubVertex3fvSUN(uint8* c, float* v) => p_glColor4ubVertex3fvSUN(c, v);

	private typealias glColor3fVertex3fSUN_t = function void(float r, float g, float b, float x, float y, float z);
	private static glColor3fVertex3fSUN_t p_glColor3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z) => p_glColor3fVertex3fSUN(r, g, b, x, y, z);

	private typealias glColor3fVertex3fvSUN_t = function void(float* c, float* v);
	private static glColor3fVertex3fvSUN_t p_glColor3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor3fVertex3fvSUN(float* c, float* v) => p_glColor3fVertex3fvSUN(c, v);

	private typealias glNormal3fVertex3fSUN_t = function void(float nx, float ny, float nz, float x, float y, float z);
	private static glNormal3fVertex3fSUN_t p_glNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z) => p_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);

	private typealias glNormal3fVertex3fvSUN_t = function void(float* n, float* v);
	private static glNormal3fVertex3fvSUN_t p_glNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glNormal3fVertex3fvSUN(float* n, float* v) => p_glNormal3fVertex3fvSUN(n, v);

	private typealias glColor4fNormal3fVertex3fSUN_t = function void(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
	private static glColor4fNormal3fVertex3fSUN_t p_glColor4fNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => p_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);

	private typealias glColor4fNormal3fVertex3fvSUN_t = function void(float* c, float* n, float* v);
	private static glColor4fNormal3fVertex3fvSUN_t p_glColor4fNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glColor4fNormal3fVertex3fvSUN(float* c, float* n, float* v) => p_glColor4fNormal3fVertex3fvSUN(c, n, v);

	private typealias glTexCoord2fVertex3fSUN_t = function void(float s, float t, float x, float y, float z);
	private static glTexCoord2fVertex3fSUN_t p_glTexCoord2fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z) => p_glTexCoord2fVertex3fSUN(s, t, x, y, z);

	private typealias glTexCoord2fVertex3fvSUN_t = function void(float* tc, float* v);
	private static glTexCoord2fVertex3fvSUN_t p_glTexCoord2fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fVertex3fvSUN(float* tc, float* v) => p_glTexCoord2fVertex3fvSUN(tc, v);

	private typealias glTexCoord4fVertex4fSUN_t = function void(float s, float t, float p, float q, float x, float y, float z, float w);
	private static glTexCoord4fVertex4fSUN_t p_glTexCoord4fVertex4fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w) => p_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);

	private typealias glTexCoord4fVertex4fvSUN_t = function void(float* tc, float* v);
	private static glTexCoord4fVertex4fvSUN_t p_glTexCoord4fVertex4fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4fVertex4fvSUN(float* tc, float* v) => p_glTexCoord4fVertex4fvSUN(tc, v);

	private typealias glTexCoord2fColor4ubVertex3fSUN_t = function void(float s, float t, uint8 r, uint8 g, uint8 b, uint8 a, float x, float y, float z);
	private static glTexCoord2fColor4ubVertex3fSUN_t p_glTexCoord2fColor4ubVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fColor4ubVertex3fSUN(float s, float t, uint8 r, uint8 g, uint8 b, uint8 a, float x, float y, float z) => p_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);

	private typealias glTexCoord2fColor4ubVertex3fvSUN_t = function void(float* tc, uint8* c, float* v);
	private static glTexCoord2fColor4ubVertex3fvSUN_t p_glTexCoord2fColor4ubVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fColor4ubVertex3fvSUN(float* tc, uint8* c, float* v) => p_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);

	private typealias glTexCoord2fColor3fVertex3fSUN_t = function void(float s, float t, float r, float g, float b, float x, float y, float z);
	private static glTexCoord2fColor3fVertex3fSUN_t p_glTexCoord2fColor3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z) => p_glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);

	private typealias glTexCoord2fColor3fVertex3fvSUN_t = function void(float* tc, float* c, float* v);
	private static glTexCoord2fColor3fVertex3fvSUN_t p_glTexCoord2fColor3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v) => p_glTexCoord2fColor3fVertex3fvSUN(tc, c, v);

	private typealias glTexCoord2fNormal3fVertex3fSUN_t = function void(float s, float t, float nx, float ny, float nz, float x, float y, float z);
	private static glTexCoord2fNormal3fVertex3fSUN_t p_glTexCoord2fNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z) => p_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);

	private typealias glTexCoord2fNormal3fVertex3fvSUN_t = function void(float* tc, float* n, float* v);
	private static glTexCoord2fNormal3fVertex3fvSUN_t p_glTexCoord2fNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v) => p_glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);

	private typealias glTexCoord2fColor4fNormal3fVertex3fSUN_t = function void(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
	private static glTexCoord2fColor4fNormal3fVertex3fSUN_t p_glTexCoord2fColor4fNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => p_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);

	private typealias glTexCoord2fColor4fNormal3fVertex3fvSUN_t = function void(float* tc, float* c, float* n, float* v);
	private static glTexCoord2fColor4fNormal3fVertex3fvSUN_t p_glTexCoord2fColor4fNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v) => p_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);

	private typealias glTexCoord4fColor4fNormal3fVertex4fSUN_t = function void(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);
	private static glTexCoord4fColor4fNormal3fVertex4fSUN_t p_glTexCoord4fColor4fNormal3fVertex4fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w) => p_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);

	private typealias glTexCoord4fColor4fNormal3fVertex4fvSUN_t = function void(float* tc, float* c, float* n, float* v);
	private static glTexCoord4fColor4fNormal3fVertex4fvSUN_t p_glTexCoord4fColor4fNormal3fVertex4fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v) => p_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);

	private typealias glReplacementCodeuiVertex3fSUN_t = function void(uint32 rc, float x, float y, float z);
	private static glReplacementCodeuiVertex3fSUN_t p_glReplacementCodeuiVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiVertex3fSUN(uint32 rc, float x, float y, float z) => p_glReplacementCodeuiVertex3fSUN(rc, x, y, z);

	private typealias glReplacementCodeuiVertex3fvSUN_t = function void(uint32* rc, float* v);
	private static glReplacementCodeuiVertex3fvSUN_t p_glReplacementCodeuiVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiVertex3fvSUN(uint32* rc, float* v) => p_glReplacementCodeuiVertex3fvSUN(rc, v);

	private typealias glReplacementCodeuiColor4ubVertex3fSUN_t = function void(uint32 rc, uint8 r, uint8 g, uint8 b, uint8 a, float x, float y, float z);
	private static glReplacementCodeuiColor4ubVertex3fSUN_t p_glReplacementCodeuiColor4ubVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiColor4ubVertex3fSUN(uint32 rc, uint8 r, uint8 g, uint8 b, uint8 a, float x, float y, float z) => p_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);

	private typealias glReplacementCodeuiColor4ubVertex3fvSUN_t = function void(uint32* rc, uint8* c, float* v);
	private static glReplacementCodeuiColor4ubVertex3fvSUN_t p_glReplacementCodeuiColor4ubVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiColor4ubVertex3fvSUN(uint32* rc, uint8* c, float* v) => p_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);

	private typealias glReplacementCodeuiColor3fVertex3fSUN_t = function void(uint32 rc, float r, float g, float b, float x, float y, float z);
	private static glReplacementCodeuiColor3fVertex3fSUN_t p_glReplacementCodeuiColor3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiColor3fVertex3fSUN(uint32 rc, float r, float g, float b, float x, float y, float z) => p_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);

	private typealias glReplacementCodeuiColor3fVertex3fvSUN_t = function void(uint32* rc, float* c, float* v);
	private static glReplacementCodeuiColor3fVertex3fvSUN_t p_glReplacementCodeuiColor3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiColor3fVertex3fvSUN(uint32* rc, float* c, float* v) => p_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);

	private typealias glReplacementCodeuiNormal3fVertex3fSUN_t = function void(uint32 rc, float nx, float ny, float nz, float x, float y, float z);
	private static glReplacementCodeuiNormal3fVertex3fSUN_t p_glReplacementCodeuiNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiNormal3fVertex3fSUN(uint32 rc, float nx, float ny, float nz, float x, float y, float z) => p_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);

	private typealias glReplacementCodeuiNormal3fVertex3fvSUN_t = function void(uint32* rc, float* n, float* v);
	private static glReplacementCodeuiNormal3fVertex3fvSUN_t p_glReplacementCodeuiNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiNormal3fVertex3fvSUN(uint32* rc, float* n, float* v) => p_glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);

	private typealias glReplacementCodeuiColor4fNormal3fVertex3fSUN_t = function void(uint32 rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
	private static glReplacementCodeuiColor4fNormal3fVertex3fSUN_t p_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint32 rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => p_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);

	private typealias glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t = function void(uint32* rc, float* c, float* n, float* v);
	private static glReplacementCodeuiColor4fNormal3fVertex3fvSUN_t p_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint32* rc, float* c, float* n, float* v) => p_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);

	private typealias glReplacementCodeuiTexCoord2fVertex3fSUN_t = function void(uint32 rc, float s, float t, float x, float y, float z);
	private static glReplacementCodeuiTexCoord2fVertex3fSUN_t p_glReplacementCodeuiTexCoord2fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiTexCoord2fVertex3fSUN(uint32 rc, float s, float t, float x, float y, float z) => p_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);

	private typealias glReplacementCodeuiTexCoord2fVertex3fvSUN_t = function void(uint32* rc, float* tc, float* v);
	private static glReplacementCodeuiTexCoord2fVertex3fvSUN_t p_glReplacementCodeuiTexCoord2fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint32* rc, float* tc, float* v) => p_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);

	private typealias glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t = function void(uint32 rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);
	private static glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_t p_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint32 rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) => p_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);

	private typealias glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t = function void(uint32* rc, float* tc, float* n, float* v);
	private static glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_t p_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint32* rc, float* tc, float* n, float* v) => p_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);

	private typealias glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t = function void(uint32 rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
	private static glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_t p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint32 rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) => p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);

	private typealias glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t = function void(uint32* rc, float* tc, float* c, float* n, float* v);
	private static glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_t p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
	[CallingConvention(GL.CallConv)]
	public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint32* rc, float* tc, float* c, float* n, float* v) => p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);

	public static void LoadGetString(function void*(StringView) getProcAddress)
	{
		s_getProcAddress = getProcAddress;
		LoadFunction("glGetString", out p_glGetString);
	}

	public static void LoadAllFunctions(function void*(StringView) getProcAddress)
	{
		s_getProcAddress = getProcAddress;

		LoadFunction("glCullFace", out p_glCullFace);
		LoadFunction("glFrontFace", out p_glFrontFace);
		LoadFunction("glHint", out p_glHint);
		LoadFunction("glLineWidth", out p_glLineWidth);
		LoadFunction("glPointSize", out p_glPointSize);
		LoadFunction("glPolygonMode", out p_glPolygonMode);
		LoadFunction("glScissor", out p_glScissor);
		LoadFunction("glTexParameterf", out p_glTexParameterf);
		LoadFunction("glTexParameterfv", out p_glTexParameterfv);
		LoadFunction("glTexParameteri", out p_glTexParameteri);
		LoadFunction("glTexParameteriv", out p_glTexParameteriv);
		LoadFunction("glTexImage1D", out p_glTexImage1D);
		LoadFunction("glTexImage2D", out p_glTexImage2D);
		LoadFunction("glDrawBuffer", out p_glDrawBuffer);
		LoadFunction("glClear", out p_glClear);
		LoadFunction("glClearColor", out p_glClearColor);
		LoadFunction("glClearStencil", out p_glClearStencil);
		LoadFunction("glClearDepth", out p_glClearDepth);
		LoadFunction("glStencilMask", out p_glStencilMask);
		LoadFunction("glColorMask", out p_glColorMask);
		LoadFunction("glDepthMask", out p_glDepthMask);
		LoadFunction("glDisable", out p_glDisable);
		LoadFunction("glEnable", out p_glEnable);
		LoadFunction("glFinish", out p_glFinish);
		LoadFunction("glFlush", out p_glFlush);
		LoadFunction("glBlendFunc", out p_glBlendFunc);
		LoadFunction("glLogicOp", out p_glLogicOp);
		LoadFunction("glStencilFunc", out p_glStencilFunc);
		LoadFunction("glStencilOp", out p_glStencilOp);
		LoadFunction("glDepthFunc", out p_glDepthFunc);
		LoadFunction("glPixelStoref", out p_glPixelStoref);
		LoadFunction("glPixelStorei", out p_glPixelStorei);
		LoadFunction("glReadBuffer", out p_glReadBuffer);
		LoadFunction("glReadPixels", out p_glReadPixels);
		LoadFunction("glGetBooleanv", out p_glGetBooleanv);
		LoadFunction("glGetDoublev", out p_glGetDoublev);
		LoadFunction("glGetError", out p_glGetError);
		LoadFunction("glGetFloatv", out p_glGetFloatv);
		LoadFunction("glGetIntegerv", out p_glGetIntegerv);
		LoadFunction("glGetString", out p_glGetString);
		LoadFunction("glGetTexImage", out p_glGetTexImage);
		LoadFunction("glGetTexParameterfv", out p_glGetTexParameterfv);
		LoadFunction("glGetTexParameteriv", out p_glGetTexParameteriv);
		LoadFunction("glGetTexLevelParameterfv", out p_glGetTexLevelParameterfv);
		LoadFunction("glGetTexLevelParameteriv", out p_glGetTexLevelParameteriv);
		LoadFunction("glIsEnabled", out p_glIsEnabled);
		LoadFunction("glDepthRange", out p_glDepthRange);
		LoadFunction("glViewport", out p_glViewport);
		LoadFunction("glDrawArrays", out p_glDrawArrays);
		LoadFunction("glDrawElements", out p_glDrawElements);
		LoadFunction("glPolygonOffset", out p_glPolygonOffset);
		LoadFunction("glCopyTexImage1D", out p_glCopyTexImage1D);
		LoadFunction("glCopyTexImage2D", out p_glCopyTexImage2D);
		LoadFunction("glCopyTexSubImage1D", out p_glCopyTexSubImage1D);
		LoadFunction("glCopyTexSubImage2D", out p_glCopyTexSubImage2D);
		LoadFunction("glTexSubImage1D", out p_glTexSubImage1D);
		LoadFunction("glTexSubImage2D", out p_glTexSubImage2D);
		LoadFunction("glBindTexture", out p_glBindTexture);
		LoadFunction("glDeleteTextures", out p_glDeleteTextures);
		LoadFunction("glGenTextures", out p_glGenTextures);
		LoadFunction("glIsTexture", out p_glIsTexture);
		LoadFunction("glDrawRangeElements", out p_glDrawRangeElements);
		LoadFunction("glTexImage3D", out p_glTexImage3D);
		LoadFunction("glTexSubImage3D", out p_glTexSubImage3D);
		LoadFunction("glCopyTexSubImage3D", out p_glCopyTexSubImage3D);
		LoadFunction("glActiveTexture", out p_glActiveTexture);
		LoadFunction("glSampleCoverage", out p_glSampleCoverage);
		LoadFunction("glCompressedTexImage3D", out p_glCompressedTexImage3D);
		LoadFunction("glCompressedTexImage2D", out p_glCompressedTexImage2D);
		LoadFunction("glCompressedTexImage1D", out p_glCompressedTexImage1D);
		LoadFunction("glCompressedTexSubImage3D", out p_glCompressedTexSubImage3D);
		LoadFunction("glCompressedTexSubImage2D", out p_glCompressedTexSubImage2D);
		LoadFunction("glCompressedTexSubImage1D", out p_glCompressedTexSubImage1D);
		LoadFunction("glGetCompressedTexImage", out p_glGetCompressedTexImage);
		LoadFunction("glBlendFuncSeparate", out p_glBlendFuncSeparate);
		LoadFunction("glMultiDrawArrays", out p_glMultiDrawArrays);
		LoadFunction("glMultiDrawElements", out p_glMultiDrawElements);
		LoadFunction("glPointParameterf", out p_glPointParameterf);
		LoadFunction("glPointParameterfv", out p_glPointParameterfv);
		LoadFunction("glPointParameteri", out p_glPointParameteri);
		LoadFunction("glPointParameteriv", out p_glPointParameteriv);
		LoadFunction("glBlendColor", out p_glBlendColor);
		LoadFunction("glBlendEquation", out p_glBlendEquation);
		LoadFunction("glGenQueries", out p_glGenQueries);
		LoadFunction("glDeleteQueries", out p_glDeleteQueries);
		LoadFunction("glIsQuery", out p_glIsQuery);
		LoadFunction("glBeginQuery", out p_glBeginQuery);
		LoadFunction("glEndQuery", out p_glEndQuery);
		LoadFunction("glGetQueryiv", out p_glGetQueryiv);
		LoadFunction("glGetQueryObjectiv", out p_glGetQueryObjectiv);
		LoadFunction("glGetQueryObjectuiv", out p_glGetQueryObjectuiv);
		LoadFunction("glBindBuffer", out p_glBindBuffer);
		LoadFunction("glDeleteBuffers", out p_glDeleteBuffers);
		LoadFunction("glGenBuffers", out p_glGenBuffers);
		LoadFunction("glIsBuffer", out p_glIsBuffer);
		LoadFunction("glBufferData", out p_glBufferData);
		LoadFunction("glBufferSubData", out p_glBufferSubData);
		LoadFunction("glGetBufferSubData", out p_glGetBufferSubData);
		LoadFunction("glMapBuffer", out p_glMapBuffer);
		LoadFunction("glUnmapBuffer", out p_glUnmapBuffer);
		LoadFunction("glGetBufferParameteriv", out p_glGetBufferParameteriv);
		LoadFunction("glGetBufferPointerv", out p_glGetBufferPointerv);
		LoadFunction("glBlendEquationSeparate", out p_glBlendEquationSeparate);
		LoadFunction("glDrawBuffers", out p_glDrawBuffers);
		LoadFunction("glStencilOpSeparate", out p_glStencilOpSeparate);
		LoadFunction("glStencilFuncSeparate", out p_glStencilFuncSeparate);
		LoadFunction("glStencilMaskSeparate", out p_glStencilMaskSeparate);
		LoadFunction("glAttachShader", out p_glAttachShader);
		LoadFunction("glBindAttribLocation", out p_glBindAttribLocation);
		LoadFunction("glCompileShader", out p_glCompileShader);
		LoadFunction("glCreateProgram", out p_glCreateProgram);
		LoadFunction("glCreateShader", out p_glCreateShader);
		LoadFunction("glDeleteProgram", out p_glDeleteProgram);
		LoadFunction("glDeleteShader", out p_glDeleteShader);
		LoadFunction("glDetachShader", out p_glDetachShader);
		LoadFunction("glDisableVertexAttribArray", out p_glDisableVertexAttribArray);
		LoadFunction("glEnableVertexAttribArray", out p_glEnableVertexAttribArray);
		LoadFunction("glGetActiveAttrib", out p_glGetActiveAttrib);
		LoadFunction("glGetActiveUniform", out p_glGetActiveUniform);
		LoadFunction("glGetAttachedShaders", out p_glGetAttachedShaders);
		LoadFunction("glGetAttribLocation", out p_glGetAttribLocation);
		LoadFunction("glGetProgramiv", out p_glGetProgramiv);
		LoadFunction("glGetProgramInfoLog", out p_glGetProgramInfoLog);
		LoadFunction("glGetShaderiv", out p_glGetShaderiv);
		LoadFunction("glGetShaderInfoLog", out p_glGetShaderInfoLog);
		LoadFunction("glGetShaderSource", out p_glGetShaderSource);
		LoadFunction("glGetUniformLocation", out p_glGetUniformLocation);
		LoadFunction("glGetUniformfv", out p_glGetUniformfv);
		LoadFunction("glGetUniformiv", out p_glGetUniformiv);
		LoadFunction("glGetVertexAttribdv", out p_glGetVertexAttribdv);
		LoadFunction("glGetVertexAttribfv", out p_glGetVertexAttribfv);
		LoadFunction("glGetVertexAttribiv", out p_glGetVertexAttribiv);
		LoadFunction("glGetVertexAttribPointerv", out p_glGetVertexAttribPointerv);
		LoadFunction("glIsProgram", out p_glIsProgram);
		LoadFunction("glIsShader", out p_glIsShader);
		LoadFunction("glLinkProgram", out p_glLinkProgram);
		LoadFunction("glShaderSource", out p_glShaderSource);
		LoadFunction("glUseProgram", out p_glUseProgram);
		LoadFunction("glUniform1f", out p_glUniform1f);
		LoadFunction("glUniform2f", out p_glUniform2f);
		LoadFunction("glUniform3f", out p_glUniform3f);
		LoadFunction("glUniform4f", out p_glUniform4f);
		LoadFunction("glUniform1i", out p_glUniform1i);
		LoadFunction("glUniform2i", out p_glUniform2i);
		LoadFunction("glUniform3i", out p_glUniform3i);
		LoadFunction("glUniform4i", out p_glUniform4i);
		LoadFunction("glUniform1fv", out p_glUniform1fv);
		LoadFunction("glUniform2fv", out p_glUniform2fv);
		LoadFunction("glUniform3fv", out p_glUniform3fv);
		LoadFunction("glUniform4fv", out p_glUniform4fv);
		LoadFunction("glUniform1iv", out p_glUniform1iv);
		LoadFunction("glUniform2iv", out p_glUniform2iv);
		LoadFunction("glUniform3iv", out p_glUniform3iv);
		LoadFunction("glUniform4iv", out p_glUniform4iv);
		LoadFunction("glUniformMatrix2fv", out p_glUniformMatrix2fv);
		LoadFunction("glUniformMatrix3fv", out p_glUniformMatrix3fv);
		LoadFunction("glUniformMatrix4fv", out p_glUniformMatrix4fv);
		LoadFunction("glValidateProgram", out p_glValidateProgram);
		LoadFunction("glVertexAttrib1d", out p_glVertexAttrib1d);
		LoadFunction("glVertexAttrib1dv", out p_glVertexAttrib1dv);
		LoadFunction("glVertexAttrib1f", out p_glVertexAttrib1f);
		LoadFunction("glVertexAttrib1fv", out p_glVertexAttrib1fv);
		LoadFunction("glVertexAttrib1s", out p_glVertexAttrib1s);
		LoadFunction("glVertexAttrib1sv", out p_glVertexAttrib1sv);
		LoadFunction("glVertexAttrib2d", out p_glVertexAttrib2d);
		LoadFunction("glVertexAttrib2dv", out p_glVertexAttrib2dv);
		LoadFunction("glVertexAttrib2f", out p_glVertexAttrib2f);
		LoadFunction("glVertexAttrib2fv", out p_glVertexAttrib2fv);
		LoadFunction("glVertexAttrib2s", out p_glVertexAttrib2s);
		LoadFunction("glVertexAttrib2sv", out p_glVertexAttrib2sv);
		LoadFunction("glVertexAttrib3d", out p_glVertexAttrib3d);
		LoadFunction("glVertexAttrib3dv", out p_glVertexAttrib3dv);
		LoadFunction("glVertexAttrib3f", out p_glVertexAttrib3f);
		LoadFunction("glVertexAttrib3fv", out p_glVertexAttrib3fv);
		LoadFunction("glVertexAttrib3s", out p_glVertexAttrib3s);
		LoadFunction("glVertexAttrib3sv", out p_glVertexAttrib3sv);
		LoadFunction("glVertexAttrib4Nbv", out p_glVertexAttrib4Nbv);
		LoadFunction("glVertexAttrib4Niv", out p_glVertexAttrib4Niv);
		LoadFunction("glVertexAttrib4Nsv", out p_glVertexAttrib4Nsv);
		LoadFunction("glVertexAttrib4Nub", out p_glVertexAttrib4Nub);
		LoadFunction("glVertexAttrib4Nubv", out p_glVertexAttrib4Nubv);
		LoadFunction("glVertexAttrib4Nuiv", out p_glVertexAttrib4Nuiv);
		LoadFunction("glVertexAttrib4Nusv", out p_glVertexAttrib4Nusv);
		LoadFunction("glVertexAttrib4bv", out p_glVertexAttrib4bv);
		LoadFunction("glVertexAttrib4d", out p_glVertexAttrib4d);
		LoadFunction("glVertexAttrib4dv", out p_glVertexAttrib4dv);
		LoadFunction("glVertexAttrib4f", out p_glVertexAttrib4f);
		LoadFunction("glVertexAttrib4fv", out p_glVertexAttrib4fv);
		LoadFunction("glVertexAttrib4iv", out p_glVertexAttrib4iv);
		LoadFunction("glVertexAttrib4s", out p_glVertexAttrib4s);
		LoadFunction("glVertexAttrib4sv", out p_glVertexAttrib4sv);
		LoadFunction("glVertexAttrib4ubv", out p_glVertexAttrib4ubv);
		LoadFunction("glVertexAttrib4uiv", out p_glVertexAttrib4uiv);
		LoadFunction("glVertexAttrib4usv", out p_glVertexAttrib4usv);
		LoadFunction("glVertexAttribPointer", out p_glVertexAttribPointer);
		LoadFunction("glUniformMatrix2x3fv", out p_glUniformMatrix2x3fv);
		LoadFunction("glUniformMatrix3x2fv", out p_glUniformMatrix3x2fv);
		LoadFunction("glUniformMatrix2x4fv", out p_glUniformMatrix2x4fv);
		LoadFunction("glUniformMatrix4x2fv", out p_glUniformMatrix4x2fv);
		LoadFunction("glUniformMatrix3x4fv", out p_glUniformMatrix3x4fv);
		LoadFunction("glUniformMatrix4x3fv", out p_glUniformMatrix4x3fv);
		LoadFunction("glColorMaski", out p_glColorMaski);
		LoadFunction("glGetBooleani_v", out p_glGetBooleani_v);
		LoadFunction("glGetIntegeri_v", out p_glGetIntegeri_v);
		LoadFunction("glEnablei", out p_glEnablei);
		LoadFunction("glDisablei", out p_glDisablei);
		LoadFunction("glIsEnabledi", out p_glIsEnabledi);
		LoadFunction("glBeginTransformFeedback", out p_glBeginTransformFeedback);
		LoadFunction("glEndTransformFeedback", out p_glEndTransformFeedback);
		LoadFunction("glBindBufferRange", out p_glBindBufferRange);
		LoadFunction("glBindBufferBase", out p_glBindBufferBase);
		LoadFunction("glTransformFeedbackVaryings", out p_glTransformFeedbackVaryings);
		LoadFunction("glGetTransformFeedbackVarying", out p_glGetTransformFeedbackVarying);
		LoadFunction("glClampColor", out p_glClampColor);
		LoadFunction("glBeginConditionalRender", out p_glBeginConditionalRender);
		LoadFunction("glEndConditionalRender", out p_glEndConditionalRender);
		LoadFunction("glVertexAttribIPointer", out p_glVertexAttribIPointer);
		LoadFunction("glGetVertexAttribIiv", out p_glGetVertexAttribIiv);
		LoadFunction("glGetVertexAttribIuiv", out p_glGetVertexAttribIuiv);
		LoadFunction("glVertexAttribI1i", out p_glVertexAttribI1i);
		LoadFunction("glVertexAttribI2i", out p_glVertexAttribI2i);
		LoadFunction("glVertexAttribI3i", out p_glVertexAttribI3i);
		LoadFunction("glVertexAttribI4i", out p_glVertexAttribI4i);
		LoadFunction("glVertexAttribI1ui", out p_glVertexAttribI1ui);
		LoadFunction("glVertexAttribI2ui", out p_glVertexAttribI2ui);
		LoadFunction("glVertexAttribI3ui", out p_glVertexAttribI3ui);
		LoadFunction("glVertexAttribI4ui", out p_glVertexAttribI4ui);
		LoadFunction("glVertexAttribI1iv", out p_glVertexAttribI1iv);
		LoadFunction("glVertexAttribI2iv", out p_glVertexAttribI2iv);
		LoadFunction("glVertexAttribI3iv", out p_glVertexAttribI3iv);
		LoadFunction("glVertexAttribI4iv", out p_glVertexAttribI4iv);
		LoadFunction("glVertexAttribI1uiv", out p_glVertexAttribI1uiv);
		LoadFunction("glVertexAttribI2uiv", out p_glVertexAttribI2uiv);
		LoadFunction("glVertexAttribI3uiv", out p_glVertexAttribI3uiv);
		LoadFunction("glVertexAttribI4uiv", out p_glVertexAttribI4uiv);
		LoadFunction("glVertexAttribI4bv", out p_glVertexAttribI4bv);
		LoadFunction("glVertexAttribI4sv", out p_glVertexAttribI4sv);
		LoadFunction("glVertexAttribI4ubv", out p_glVertexAttribI4ubv);
		LoadFunction("glVertexAttribI4usv", out p_glVertexAttribI4usv);
		LoadFunction("glGetUniformuiv", out p_glGetUniformuiv);
		LoadFunction("glBindFragDataLocation", out p_glBindFragDataLocation);
		LoadFunction("glGetFragDataLocation", out p_glGetFragDataLocation);
		LoadFunction("glUniform1ui", out p_glUniform1ui);
		LoadFunction("glUniform2ui", out p_glUniform2ui);
		LoadFunction("glUniform3ui", out p_glUniform3ui);
		LoadFunction("glUniform4ui", out p_glUniform4ui);
		LoadFunction("glUniform1uiv", out p_glUniform1uiv);
		LoadFunction("glUniform2uiv", out p_glUniform2uiv);
		LoadFunction("glUniform3uiv", out p_glUniform3uiv);
		LoadFunction("glUniform4uiv", out p_glUniform4uiv);
		LoadFunction("glTexParameterIiv", out p_glTexParameterIiv);
		LoadFunction("glTexParameterIuiv", out p_glTexParameterIuiv);
		LoadFunction("glGetTexParameterIiv", out p_glGetTexParameterIiv);
		LoadFunction("glGetTexParameterIuiv", out p_glGetTexParameterIuiv);
		LoadFunction("glClearBufferiv", out p_glClearBufferiv);
		LoadFunction("glClearBufferuiv", out p_glClearBufferuiv);
		LoadFunction("glClearBufferfv", out p_glClearBufferfv);
		LoadFunction("glClearBufferfi", out p_glClearBufferfi);
		LoadFunction("glGetStringi", out p_glGetStringi);
		LoadFunction("glIsRenderbuffer", out p_glIsRenderbuffer);
		LoadFunction("glBindRenderbuffer", out p_glBindRenderbuffer);
		LoadFunction("glDeleteRenderbuffers", out p_glDeleteRenderbuffers);
		LoadFunction("glGenRenderbuffers", out p_glGenRenderbuffers);
		LoadFunction("glRenderbufferStorage", out p_glRenderbufferStorage);
		LoadFunction("glGetRenderbufferParameteriv", out p_glGetRenderbufferParameteriv);
		LoadFunction("glIsFramebuffer", out p_glIsFramebuffer);
		LoadFunction("glBindFramebuffer", out p_glBindFramebuffer);
		LoadFunction("glDeleteFramebuffers", out p_glDeleteFramebuffers);
		LoadFunction("glGenFramebuffers", out p_glGenFramebuffers);
		LoadFunction("glCheckFramebufferStatus", out p_glCheckFramebufferStatus);
		LoadFunction("glFramebufferTexture1D", out p_glFramebufferTexture1D);
		LoadFunction("glFramebufferTexture2D", out p_glFramebufferTexture2D);
		LoadFunction("glFramebufferTexture3D", out p_glFramebufferTexture3D);
		LoadFunction("glFramebufferRenderbuffer", out p_glFramebufferRenderbuffer);
		LoadFunction("glGetFramebufferAttachmentParameteriv", out p_glGetFramebufferAttachmentParameteriv);
		LoadFunction("glGenerateMipmap", out p_glGenerateMipmap);
		LoadFunction("glBlitFramebuffer", out p_glBlitFramebuffer);
		LoadFunction("glRenderbufferStorageMultisample", out p_glRenderbufferStorageMultisample);
		LoadFunction("glFramebufferTextureLayer", out p_glFramebufferTextureLayer);
		LoadFunction("glMapBufferRange", out p_glMapBufferRange);
		LoadFunction("glFlushMappedBufferRange", out p_glFlushMappedBufferRange);
		LoadFunction("glBindVertexArray", out p_glBindVertexArray);
		LoadFunction("glDeleteVertexArrays", out p_glDeleteVertexArrays);
		LoadFunction("glGenVertexArrays", out p_glGenVertexArrays);
		LoadFunction("glIsVertexArray", out p_glIsVertexArray);
		LoadFunction("glDrawArraysInstanced", out p_glDrawArraysInstanced);
		LoadFunction("glDrawElementsInstanced", out p_glDrawElementsInstanced);
		LoadFunction("glTexBuffer", out p_glTexBuffer);
		LoadFunction("glPrimitiveRestartIndex", out p_glPrimitiveRestartIndex);
		LoadFunction("glCopyBufferSubData", out p_glCopyBufferSubData);
		LoadFunction("glGetUniformIndices", out p_glGetUniformIndices);
		LoadFunction("glGetActiveUniformsiv", out p_glGetActiveUniformsiv);
		LoadFunction("glGetActiveUniformName", out p_glGetActiveUniformName);
		LoadFunction("glGetUniformBlockIndex", out p_glGetUniformBlockIndex);
		LoadFunction("glGetActiveUniformBlockiv", out p_glGetActiveUniformBlockiv);
		LoadFunction("glGetActiveUniformBlockName", out p_glGetActiveUniformBlockName);
		LoadFunction("glUniformBlockBinding", out p_glUniformBlockBinding);
		LoadFunction("glDrawElementsBaseVertex", out p_glDrawElementsBaseVertex);
		LoadFunction("glDrawRangeElementsBaseVertex", out p_glDrawRangeElementsBaseVertex);
		LoadFunction("glDrawElementsInstancedBaseVertex", out p_glDrawElementsInstancedBaseVertex);
		LoadFunction("glMultiDrawElementsBaseVertex", out p_glMultiDrawElementsBaseVertex);
		LoadFunction("glProvokingVertex", out p_glProvokingVertex);
		LoadFunction("glFenceSync", out p_glFenceSync);
		LoadFunction("glIsSync", out p_glIsSync);
		LoadFunction("glDeleteSync", out p_glDeleteSync);
		LoadFunction("glClientWaitSync", out p_glClientWaitSync);
		LoadFunction("glWaitSync", out p_glWaitSync);
		LoadFunction("glGetInteger64v", out p_glGetInteger64v);
		LoadFunction("glGetSynciv", out p_glGetSynciv);
		LoadFunction("glGetInteger64i_v", out p_glGetInteger64i_v);
		LoadFunction("glGetBufferParameteri64v", out p_glGetBufferParameteri64v);
		LoadFunction("glFramebufferTexture", out p_glFramebufferTexture);
		LoadFunction("glTexImage2DMultisample", out p_glTexImage2DMultisample);
		LoadFunction("glTexImage3DMultisample", out p_glTexImage3DMultisample);
		LoadFunction("glGetMultisamplefv", out p_glGetMultisamplefv);
		LoadFunction("glSampleMaski", out p_glSampleMaski);
		LoadFunction("glBindFragDataLocationIndexed", out p_glBindFragDataLocationIndexed);
		LoadFunction("glGetFragDataIndex", out p_glGetFragDataIndex);
		LoadFunction("glGenSamplers", out p_glGenSamplers);
		LoadFunction("glDeleteSamplers", out p_glDeleteSamplers);
		LoadFunction("glIsSampler", out p_glIsSampler);
		LoadFunction("glBindSampler", out p_glBindSampler);
		LoadFunction("glSamplerParameteri", out p_glSamplerParameteri);
		LoadFunction("glSamplerParameteriv", out p_glSamplerParameteriv);
		LoadFunction("glSamplerParameterf", out p_glSamplerParameterf);
		LoadFunction("glSamplerParameterfv", out p_glSamplerParameterfv);
		LoadFunction("glSamplerParameterIiv", out p_glSamplerParameterIiv);
		LoadFunction("glSamplerParameterIuiv", out p_glSamplerParameterIuiv);
		LoadFunction("glGetSamplerParameteriv", out p_glGetSamplerParameteriv);
		LoadFunction("glGetSamplerParameterIiv", out p_glGetSamplerParameterIiv);
		LoadFunction("glGetSamplerParameterfv", out p_glGetSamplerParameterfv);
		LoadFunction("glGetSamplerParameterIuiv", out p_glGetSamplerParameterIuiv);
		LoadFunction("glQueryCounter", out p_glQueryCounter);
		LoadFunction("glGetQueryObjecti64v", out p_glGetQueryObjecti64v);
		LoadFunction("glGetQueryObjectui64v", out p_glGetQueryObjectui64v);
		LoadFunction("glVertexAttribDivisor", out p_glVertexAttribDivisor);
		LoadFunction("glVertexAttribP1ui", out p_glVertexAttribP1ui);
		LoadFunction("glVertexAttribP1uiv", out p_glVertexAttribP1uiv);
		LoadFunction("glVertexAttribP2ui", out p_glVertexAttribP2ui);
		LoadFunction("glVertexAttribP2uiv", out p_glVertexAttribP2uiv);
		LoadFunction("glVertexAttribP3ui", out p_glVertexAttribP3ui);
		LoadFunction("glVertexAttribP3uiv", out p_glVertexAttribP3uiv);
		LoadFunction("glVertexAttribP4ui", out p_glVertexAttribP4ui);
		LoadFunction("glVertexAttribP4uiv", out p_glVertexAttribP4uiv);
		LoadFunction("glVertexP2ui", out p_glVertexP2ui);
		LoadFunction("glVertexP2uiv", out p_glVertexP2uiv);
		LoadFunction("glVertexP3ui", out p_glVertexP3ui);
		LoadFunction("glVertexP3uiv", out p_glVertexP3uiv);
		LoadFunction("glVertexP4ui", out p_glVertexP4ui);
		LoadFunction("glVertexP4uiv", out p_glVertexP4uiv);
		LoadFunction("glTexCoordP1ui", out p_glTexCoordP1ui);
		LoadFunction("glTexCoordP1uiv", out p_glTexCoordP1uiv);
		LoadFunction("glTexCoordP2ui", out p_glTexCoordP2ui);
		LoadFunction("glTexCoordP2uiv", out p_glTexCoordP2uiv);
		LoadFunction("glTexCoordP3ui", out p_glTexCoordP3ui);
		LoadFunction("glTexCoordP3uiv", out p_glTexCoordP3uiv);
		LoadFunction("glTexCoordP4ui", out p_glTexCoordP4ui);
		LoadFunction("glTexCoordP4uiv", out p_glTexCoordP4uiv);
		LoadFunction("glMultiTexCoordP1ui", out p_glMultiTexCoordP1ui);
		LoadFunction("glMultiTexCoordP1uiv", out p_glMultiTexCoordP1uiv);
		LoadFunction("glMultiTexCoordP2ui", out p_glMultiTexCoordP2ui);
		LoadFunction("glMultiTexCoordP2uiv", out p_glMultiTexCoordP2uiv);
		LoadFunction("glMultiTexCoordP3ui", out p_glMultiTexCoordP3ui);
		LoadFunction("glMultiTexCoordP3uiv", out p_glMultiTexCoordP3uiv);
		LoadFunction("glMultiTexCoordP4ui", out p_glMultiTexCoordP4ui);
		LoadFunction("glMultiTexCoordP4uiv", out p_glMultiTexCoordP4uiv);
		LoadFunction("glNormalP3ui", out p_glNormalP3ui);
		LoadFunction("glNormalP3uiv", out p_glNormalP3uiv);
		LoadFunction("glColorP3ui", out p_glColorP3ui);
		LoadFunction("glColorP3uiv", out p_glColorP3uiv);
		LoadFunction("glColorP4ui", out p_glColorP4ui);
		LoadFunction("glColorP4uiv", out p_glColorP4uiv);
		LoadFunction("glSecondaryColorP3ui", out p_glSecondaryColorP3ui);
		LoadFunction("glSecondaryColorP3uiv", out p_glSecondaryColorP3uiv);
		LoadFunction("glMinSampleShading", out p_glMinSampleShading);
		LoadFunction("glBlendEquationi", out p_glBlendEquationi);
		LoadFunction("glBlendEquationSeparatei", out p_glBlendEquationSeparatei);
		LoadFunction("glBlendFunci", out p_glBlendFunci);
		LoadFunction("glBlendFuncSeparatei", out p_glBlendFuncSeparatei);
		LoadFunction("glDrawArraysIndirect", out p_glDrawArraysIndirect);
		LoadFunction("glDrawElementsIndirect", out p_glDrawElementsIndirect);
		LoadFunction("glUniform1d", out p_glUniform1d);
		LoadFunction("glUniform2d", out p_glUniform2d);
		LoadFunction("glUniform3d", out p_glUniform3d);
		LoadFunction("glUniform4d", out p_glUniform4d);
		LoadFunction("glUniform1dv", out p_glUniform1dv);
		LoadFunction("glUniform2dv", out p_glUniform2dv);
		LoadFunction("glUniform3dv", out p_glUniform3dv);
		LoadFunction("glUniform4dv", out p_glUniform4dv);
		LoadFunction("glUniformMatrix2dv", out p_glUniformMatrix2dv);
		LoadFunction("glUniformMatrix3dv", out p_glUniformMatrix3dv);
		LoadFunction("glUniformMatrix4dv", out p_glUniformMatrix4dv);
		LoadFunction("glUniformMatrix2x3dv", out p_glUniformMatrix2x3dv);
		LoadFunction("glUniformMatrix2x4dv", out p_glUniformMatrix2x4dv);
		LoadFunction("glUniformMatrix3x2dv", out p_glUniformMatrix3x2dv);
		LoadFunction("glUniformMatrix3x4dv", out p_glUniformMatrix3x4dv);
		LoadFunction("glUniformMatrix4x2dv", out p_glUniformMatrix4x2dv);
		LoadFunction("glUniformMatrix4x3dv", out p_glUniformMatrix4x3dv);
		LoadFunction("glGetUniformdv", out p_glGetUniformdv);
		LoadFunction("glGetSubroutineUniformLocation", out p_glGetSubroutineUniformLocation);
		LoadFunction("glGetSubroutineIndex", out p_glGetSubroutineIndex);
		LoadFunction("glGetActiveSubroutineUniformiv", out p_glGetActiveSubroutineUniformiv);
		LoadFunction("glGetActiveSubroutineUniformName", out p_glGetActiveSubroutineUniformName);
		LoadFunction("glGetActiveSubroutineName", out p_glGetActiveSubroutineName);
		LoadFunction("glUniformSubroutinesuiv", out p_glUniformSubroutinesuiv);
		LoadFunction("glGetUniformSubroutineuiv", out p_glGetUniformSubroutineuiv);
		LoadFunction("glGetProgramStageiv", out p_glGetProgramStageiv);
		LoadFunction("glPatchParameteri", out p_glPatchParameteri);
		LoadFunction("glPatchParameterfv", out p_glPatchParameterfv);
		LoadFunction("glBindTransformFeedback", out p_glBindTransformFeedback);
		LoadFunction("glDeleteTransformFeedbacks", out p_glDeleteTransformFeedbacks);
		LoadFunction("glGenTransformFeedbacks", out p_glGenTransformFeedbacks);
		LoadFunction("glIsTransformFeedback", out p_glIsTransformFeedback);
		LoadFunction("glPauseTransformFeedback", out p_glPauseTransformFeedback);
		LoadFunction("glResumeTransformFeedback", out p_glResumeTransformFeedback);
		LoadFunction("glDrawTransformFeedback", out p_glDrawTransformFeedback);
		LoadFunction("glDrawTransformFeedbackStream", out p_glDrawTransformFeedbackStream);
		LoadFunction("glBeginQueryIndexed", out p_glBeginQueryIndexed);
		LoadFunction("glEndQueryIndexed", out p_glEndQueryIndexed);
		LoadFunction("glGetQueryIndexediv", out p_glGetQueryIndexediv);
		LoadFunction("glReleaseShaderCompiler", out p_glReleaseShaderCompiler);
		LoadFunction("glShaderBinary", out p_glShaderBinary);
		LoadFunction("glGetShaderPrecisionFormat", out p_glGetShaderPrecisionFormat);
		LoadFunction("glDepthRangef", out p_glDepthRangef);
		LoadFunction("glClearDepthf", out p_glClearDepthf);
		LoadFunction("glGetProgramBinary", out p_glGetProgramBinary);
		LoadFunction("glProgramBinary", out p_glProgramBinary);
		LoadFunction("glProgramParameteri", out p_glProgramParameteri);
		LoadFunction("glUseProgramStages", out p_glUseProgramStages);
		LoadFunction("glActiveShaderProgram", out p_glActiveShaderProgram);
		LoadFunction("glCreateShaderProgramv", out p_glCreateShaderProgramv);
		LoadFunction("glBindProgramPipeline", out p_glBindProgramPipeline);
		LoadFunction("glDeleteProgramPipelines", out p_glDeleteProgramPipelines);
		LoadFunction("glGenProgramPipelines", out p_glGenProgramPipelines);
		LoadFunction("glIsProgramPipeline", out p_glIsProgramPipeline);
		LoadFunction("glGetProgramPipelineiv", out p_glGetProgramPipelineiv);
		LoadFunction("glProgramUniform1i", out p_glProgramUniform1i);
		LoadFunction("glProgramUniform1iv", out p_glProgramUniform1iv);
		LoadFunction("glProgramUniform1f", out p_glProgramUniform1f);
		LoadFunction("glProgramUniform1fv", out p_glProgramUniform1fv);
		LoadFunction("glProgramUniform1d", out p_glProgramUniform1d);
		LoadFunction("glProgramUniform1dv", out p_glProgramUniform1dv);
		LoadFunction("glProgramUniform1ui", out p_glProgramUniform1ui);
		LoadFunction("glProgramUniform1uiv", out p_glProgramUniform1uiv);
		LoadFunction("glProgramUniform2i", out p_glProgramUniform2i);
		LoadFunction("glProgramUniform2iv", out p_glProgramUniform2iv);
		LoadFunction("glProgramUniform2f", out p_glProgramUniform2f);
		LoadFunction("glProgramUniform2fv", out p_glProgramUniform2fv);
		LoadFunction("glProgramUniform2d", out p_glProgramUniform2d);
		LoadFunction("glProgramUniform2dv", out p_glProgramUniform2dv);
		LoadFunction("glProgramUniform2ui", out p_glProgramUniform2ui);
		LoadFunction("glProgramUniform2uiv", out p_glProgramUniform2uiv);
		LoadFunction("glProgramUniform3i", out p_glProgramUniform3i);
		LoadFunction("glProgramUniform3iv", out p_glProgramUniform3iv);
		LoadFunction("glProgramUniform3f", out p_glProgramUniform3f);
		LoadFunction("glProgramUniform3fv", out p_glProgramUniform3fv);
		LoadFunction("glProgramUniform3d", out p_glProgramUniform3d);
		LoadFunction("glProgramUniform3dv", out p_glProgramUniform3dv);
		LoadFunction("glProgramUniform3ui", out p_glProgramUniform3ui);
		LoadFunction("glProgramUniform3uiv", out p_glProgramUniform3uiv);
		LoadFunction("glProgramUniform4i", out p_glProgramUniform4i);
		LoadFunction("glProgramUniform4iv", out p_glProgramUniform4iv);
		LoadFunction("glProgramUniform4f", out p_glProgramUniform4f);
		LoadFunction("glProgramUniform4fv", out p_glProgramUniform4fv);
		LoadFunction("glProgramUniform4d", out p_glProgramUniform4d);
		LoadFunction("glProgramUniform4dv", out p_glProgramUniform4dv);
		LoadFunction("glProgramUniform4ui", out p_glProgramUniform4ui);
		LoadFunction("glProgramUniform4uiv", out p_glProgramUniform4uiv);
		LoadFunction("glProgramUniformMatrix2fv", out p_glProgramUniformMatrix2fv);
		LoadFunction("glProgramUniformMatrix3fv", out p_glProgramUniformMatrix3fv);
		LoadFunction("glProgramUniformMatrix4fv", out p_glProgramUniformMatrix4fv);
		LoadFunction("glProgramUniformMatrix2dv", out p_glProgramUniformMatrix2dv);
		LoadFunction("glProgramUniformMatrix3dv", out p_glProgramUniformMatrix3dv);
		LoadFunction("glProgramUniformMatrix4dv", out p_glProgramUniformMatrix4dv);
		LoadFunction("glProgramUniformMatrix2x3fv", out p_glProgramUniformMatrix2x3fv);
		LoadFunction("glProgramUniformMatrix3x2fv", out p_glProgramUniformMatrix3x2fv);
		LoadFunction("glProgramUniformMatrix2x4fv", out p_glProgramUniformMatrix2x4fv);
		LoadFunction("glProgramUniformMatrix4x2fv", out p_glProgramUniformMatrix4x2fv);
		LoadFunction("glProgramUniformMatrix3x4fv", out p_glProgramUniformMatrix3x4fv);
		LoadFunction("glProgramUniformMatrix4x3fv", out p_glProgramUniformMatrix4x3fv);
		LoadFunction("glProgramUniformMatrix2x3dv", out p_glProgramUniformMatrix2x3dv);
		LoadFunction("glProgramUniformMatrix3x2dv", out p_glProgramUniformMatrix3x2dv);
		LoadFunction("glProgramUniformMatrix2x4dv", out p_glProgramUniformMatrix2x4dv);
		LoadFunction("glProgramUniformMatrix4x2dv", out p_glProgramUniformMatrix4x2dv);
		LoadFunction("glProgramUniformMatrix3x4dv", out p_glProgramUniformMatrix3x4dv);
		LoadFunction("glProgramUniformMatrix4x3dv", out p_glProgramUniformMatrix4x3dv);
		LoadFunction("glValidateProgramPipeline", out p_glValidateProgramPipeline);
		LoadFunction("glGetProgramPipelineInfoLog", out p_glGetProgramPipelineInfoLog);
		LoadFunction("glVertexAttribL1d", out p_glVertexAttribL1d);
		LoadFunction("glVertexAttribL2d", out p_glVertexAttribL2d);
		LoadFunction("glVertexAttribL3d", out p_glVertexAttribL3d);
		LoadFunction("glVertexAttribL4d", out p_glVertexAttribL4d);
		LoadFunction("glVertexAttribL1dv", out p_glVertexAttribL1dv);
		LoadFunction("glVertexAttribL2dv", out p_glVertexAttribL2dv);
		LoadFunction("glVertexAttribL3dv", out p_glVertexAttribL3dv);
		LoadFunction("glVertexAttribL4dv", out p_glVertexAttribL4dv);
		LoadFunction("glVertexAttribLPointer", out p_glVertexAttribLPointer);
		LoadFunction("glGetVertexAttribLdv", out p_glGetVertexAttribLdv);
		LoadFunction("glViewportArrayv", out p_glViewportArrayv);
		LoadFunction("glViewportIndexedf", out p_glViewportIndexedf);
		LoadFunction("glViewportIndexedfv", out p_glViewportIndexedfv);
		LoadFunction("glScissorArrayv", out p_glScissorArrayv);
		LoadFunction("glScissorIndexed", out p_glScissorIndexed);
		LoadFunction("glScissorIndexedv", out p_glScissorIndexedv);
		LoadFunction("glDepthRangeArrayv", out p_glDepthRangeArrayv);
		LoadFunction("glDepthRangeIndexed", out p_glDepthRangeIndexed);
		LoadFunction("glGetFloati_v", out p_glGetFloati_v);
		LoadFunction("glGetDoublei_v", out p_glGetDoublei_v);
		LoadFunction("glDrawArraysInstancedBaseInstance", out p_glDrawArraysInstancedBaseInstance);
		LoadFunction("glDrawElementsInstancedBaseInstance", out p_glDrawElementsInstancedBaseInstance);
		LoadFunction("glDrawElementsInstancedBaseVertexBaseInstance", out p_glDrawElementsInstancedBaseVertexBaseInstance);
		LoadFunction("glGetInternalformativ", out p_glGetInternalformativ);
		LoadFunction("glGetActiveAtomicCounterBufferiv", out p_glGetActiveAtomicCounterBufferiv);
		LoadFunction("glBindImageTexture", out p_glBindImageTexture);
		LoadFunction("glMemoryBarrier", out p_glMemoryBarrier);
		LoadFunction("glTexStorage1D", out p_glTexStorage1D);
		LoadFunction("glTexStorage2D", out p_glTexStorage2D);
		LoadFunction("glTexStorage3D", out p_glTexStorage3D);
		LoadFunction("glDrawTransformFeedbackInstanced", out p_glDrawTransformFeedbackInstanced);
		LoadFunction("glDrawTransformFeedbackStreamInstanced", out p_glDrawTransformFeedbackStreamInstanced);
		LoadFunction("glClearBufferData", out p_glClearBufferData);
		LoadFunction("glClearBufferSubData", out p_glClearBufferSubData);
		LoadFunction("glDispatchCompute", out p_glDispatchCompute);
		LoadFunction("glDispatchComputeIndirect", out p_glDispatchComputeIndirect);
		LoadFunction("glCopyImageSubData", out p_glCopyImageSubData);
		LoadFunction("glFramebufferParameteri", out p_glFramebufferParameteri);
		LoadFunction("glGetFramebufferParameteriv", out p_glGetFramebufferParameteriv);
		LoadFunction("glGetInternalformati64v", out p_glGetInternalformati64v);
		LoadFunction("glInvalidateTexSubImage", out p_glInvalidateTexSubImage);
		LoadFunction("glInvalidateTexImage", out p_glInvalidateTexImage);
		LoadFunction("glInvalidateBufferSubData", out p_glInvalidateBufferSubData);
		LoadFunction("glInvalidateBufferData", out p_glInvalidateBufferData);
		LoadFunction("glInvalidateFramebuffer", out p_glInvalidateFramebuffer);
		LoadFunction("glInvalidateSubFramebuffer", out p_glInvalidateSubFramebuffer);
		LoadFunction("glMultiDrawArraysIndirect", out p_glMultiDrawArraysIndirect);
		LoadFunction("glMultiDrawElementsIndirect", out p_glMultiDrawElementsIndirect);
		LoadFunction("glGetProgramInterfaceiv", out p_glGetProgramInterfaceiv);
		LoadFunction("glGetProgramResourceIndex", out p_glGetProgramResourceIndex);
		LoadFunction("glGetProgramResourceName", out p_glGetProgramResourceName);
		LoadFunction("glGetProgramResourceiv", out p_glGetProgramResourceiv);
		LoadFunction("glGetProgramResourceLocation", out p_glGetProgramResourceLocation);
		LoadFunction("glGetProgramResourceLocationIndex", out p_glGetProgramResourceLocationIndex);
		LoadFunction("glShaderStorageBlockBinding", out p_glShaderStorageBlockBinding);
		LoadFunction("glTexBufferRange", out p_glTexBufferRange);
		LoadFunction("glTexStorage2DMultisample", out p_glTexStorage2DMultisample);
		LoadFunction("glTexStorage3DMultisample", out p_glTexStorage3DMultisample);
		LoadFunction("glTextureView", out p_glTextureView);
		LoadFunction("glBindVertexBuffer", out p_glBindVertexBuffer);
		LoadFunction("glVertexAttribFormat", out p_glVertexAttribFormat);
		LoadFunction("glVertexAttribIFormat", out p_glVertexAttribIFormat);
		LoadFunction("glVertexAttribLFormat", out p_glVertexAttribLFormat);
		LoadFunction("glVertexAttribBinding", out p_glVertexAttribBinding);
		LoadFunction("glVertexBindingDivisor", out p_glVertexBindingDivisor);
		LoadFunction("glDebugMessageControl", out p_glDebugMessageControl);
		LoadFunction("glDebugMessageInsert", out p_glDebugMessageInsert);
		LoadFunction("glDebugMessageCallback", out p_glDebugMessageCallback);
		LoadFunction("glGetDebugMessageLog", out p_glGetDebugMessageLog);
		LoadFunction("glPushDebugGroup", out p_glPushDebugGroup);
		LoadFunction("glPopDebugGroup", out p_glPopDebugGroup);
		LoadFunction("glObjectLabel", out p_glObjectLabel);
		LoadFunction("glGetObjectLabel", out p_glGetObjectLabel);
		LoadFunction("glObjectPtrLabel", out p_glObjectPtrLabel);
		LoadFunction("glGetObjectPtrLabel", out p_glGetObjectPtrLabel);
		LoadFunction("glGetPointerv", out p_glGetPointerv);
		LoadFunction("glBufferStorage", out p_glBufferStorage);
		LoadFunction("glClearTexImage", out p_glClearTexImage);
		LoadFunction("glClearTexSubImage", out p_glClearTexSubImage);
		LoadFunction("glBindBuffersBase", out p_glBindBuffersBase);
		LoadFunction("glBindBuffersRange", out p_glBindBuffersRange);
		LoadFunction("glBindTextures", out p_glBindTextures);
		LoadFunction("glBindSamplers", out p_glBindSamplers);
		LoadFunction("glBindImageTextures", out p_glBindImageTextures);
		LoadFunction("glBindVertexBuffers", out p_glBindVertexBuffers);
		LoadFunction("glClipControl", out p_glClipControl);
		LoadFunction("glCreateTransformFeedbacks", out p_glCreateTransformFeedbacks);
		LoadFunction("glTransformFeedbackBufferBase", out p_glTransformFeedbackBufferBase);
		LoadFunction("glTransformFeedbackBufferRange", out p_glTransformFeedbackBufferRange);
		LoadFunction("glGetTransformFeedbackiv", out p_glGetTransformFeedbackiv);
		LoadFunction("glGetTransformFeedbacki_v", out p_glGetTransformFeedbacki_v);
		LoadFunction("glGetTransformFeedbacki64_v", out p_glGetTransformFeedbacki64_v);
		LoadFunction("glCreateBuffers", out p_glCreateBuffers);
		LoadFunction("glNamedBufferStorage", out p_glNamedBufferStorage);
		LoadFunction("glNamedBufferData", out p_glNamedBufferData);
		LoadFunction("glNamedBufferSubData", out p_glNamedBufferSubData);
		LoadFunction("glCopyNamedBufferSubData", out p_glCopyNamedBufferSubData);
		LoadFunction("glClearNamedBufferData", out p_glClearNamedBufferData);
		LoadFunction("glClearNamedBufferSubData", out p_glClearNamedBufferSubData);
		LoadFunction("glMapNamedBuffer", out p_glMapNamedBuffer);
		LoadFunction("glMapNamedBufferRange", out p_glMapNamedBufferRange);
		LoadFunction("glUnmapNamedBuffer", out p_glUnmapNamedBuffer);
		LoadFunction("glFlushMappedNamedBufferRange", out p_glFlushMappedNamedBufferRange);
		LoadFunction("glGetNamedBufferParameteriv", out p_glGetNamedBufferParameteriv);
		LoadFunction("glGetNamedBufferParameteri64v", out p_glGetNamedBufferParameteri64v);
		LoadFunction("glGetNamedBufferPointerv", out p_glGetNamedBufferPointerv);
		LoadFunction("glGetNamedBufferSubData", out p_glGetNamedBufferSubData);
		LoadFunction("glCreateFramebuffers", out p_glCreateFramebuffers);
		LoadFunction("glNamedFramebufferRenderbuffer", out p_glNamedFramebufferRenderbuffer);
		LoadFunction("glNamedFramebufferParameteri", out p_glNamedFramebufferParameteri);
		LoadFunction("glNamedFramebufferTexture", out p_glNamedFramebufferTexture);
		LoadFunction("glNamedFramebufferTextureLayer", out p_glNamedFramebufferTextureLayer);
		LoadFunction("glNamedFramebufferDrawBuffer", out p_glNamedFramebufferDrawBuffer);
		LoadFunction("glNamedFramebufferDrawBuffers", out p_glNamedFramebufferDrawBuffers);
		LoadFunction("glNamedFramebufferReadBuffer", out p_glNamedFramebufferReadBuffer);
		LoadFunction("glInvalidateNamedFramebufferData", out p_glInvalidateNamedFramebufferData);
		LoadFunction("glInvalidateNamedFramebufferSubData", out p_glInvalidateNamedFramebufferSubData);
		LoadFunction("glClearNamedFramebufferiv", out p_glClearNamedFramebufferiv);
		LoadFunction("glClearNamedFramebufferuiv", out p_glClearNamedFramebufferuiv);
		LoadFunction("glClearNamedFramebufferfv", out p_glClearNamedFramebufferfv);
		LoadFunction("glClearNamedFramebufferfi", out p_glClearNamedFramebufferfi);
		LoadFunction("glBlitNamedFramebuffer", out p_glBlitNamedFramebuffer);
		LoadFunction("glCheckNamedFramebufferStatus", out p_glCheckNamedFramebufferStatus);
		LoadFunction("glGetNamedFramebufferParameteriv", out p_glGetNamedFramebufferParameteriv);
		LoadFunction("glGetNamedFramebufferAttachmentParameteriv", out p_glGetNamedFramebufferAttachmentParameteriv);
		LoadFunction("glCreateRenderbuffers", out p_glCreateRenderbuffers);
		LoadFunction("glNamedRenderbufferStorage", out p_glNamedRenderbufferStorage);
		LoadFunction("glNamedRenderbufferStorageMultisample", out p_glNamedRenderbufferStorageMultisample);
		LoadFunction("glGetNamedRenderbufferParameteriv", out p_glGetNamedRenderbufferParameteriv);
		LoadFunction("glCreateTextures", out p_glCreateTextures);
		LoadFunction("glTextureBuffer", out p_glTextureBuffer);
		LoadFunction("glTextureBufferRange", out p_glTextureBufferRange);
		LoadFunction("glTextureStorage1D", out p_glTextureStorage1D);
		LoadFunction("glTextureStorage2D", out p_glTextureStorage2D);
		LoadFunction("glTextureStorage3D", out p_glTextureStorage3D);
		LoadFunction("glTextureStorage2DMultisample", out p_glTextureStorage2DMultisample);
		LoadFunction("glTextureStorage3DMultisample", out p_glTextureStorage3DMultisample);
		LoadFunction("glTextureSubImage1D", out p_glTextureSubImage1D);
		LoadFunction("glTextureSubImage2D", out p_glTextureSubImage2D);
		LoadFunction("glTextureSubImage3D", out p_glTextureSubImage3D);
		LoadFunction("glCompressedTextureSubImage1D", out p_glCompressedTextureSubImage1D);
		LoadFunction("glCompressedTextureSubImage2D", out p_glCompressedTextureSubImage2D);
		LoadFunction("glCompressedTextureSubImage3D", out p_glCompressedTextureSubImage3D);
		LoadFunction("glCopyTextureSubImage1D", out p_glCopyTextureSubImage1D);
		LoadFunction("glCopyTextureSubImage2D", out p_glCopyTextureSubImage2D);
		LoadFunction("glCopyTextureSubImage3D", out p_glCopyTextureSubImage3D);
		LoadFunction("glTextureParameterf", out p_glTextureParameterf);
		LoadFunction("glTextureParameterfv", out p_glTextureParameterfv);
		LoadFunction("glTextureParameteri", out p_glTextureParameteri);
		LoadFunction("glTextureParameterIiv", out p_glTextureParameterIiv);
		LoadFunction("glTextureParameterIuiv", out p_glTextureParameterIuiv);
		LoadFunction("glTextureParameteriv", out p_glTextureParameteriv);
		LoadFunction("glGenerateTextureMipmap", out p_glGenerateTextureMipmap);
		LoadFunction("glBindTextureUnit", out p_glBindTextureUnit);
		LoadFunction("glGetTextureImage", out p_glGetTextureImage);
		LoadFunction("glGetCompressedTextureImage", out p_glGetCompressedTextureImage);
		LoadFunction("glGetTextureLevelParameterfv", out p_glGetTextureLevelParameterfv);
		LoadFunction("glGetTextureLevelParameteriv", out p_glGetTextureLevelParameteriv);
		LoadFunction("glGetTextureParameterfv", out p_glGetTextureParameterfv);
		LoadFunction("glGetTextureParameterIiv", out p_glGetTextureParameterIiv);
		LoadFunction("glGetTextureParameterIuiv", out p_glGetTextureParameterIuiv);
		LoadFunction("glGetTextureParameteriv", out p_glGetTextureParameteriv);
		LoadFunction("glCreateVertexArrays", out p_glCreateVertexArrays);
		LoadFunction("glDisableVertexArrayAttrib", out p_glDisableVertexArrayAttrib);
		LoadFunction("glEnableVertexArrayAttrib", out p_glEnableVertexArrayAttrib);
		LoadFunction("glVertexArrayElementBuffer", out p_glVertexArrayElementBuffer);
		LoadFunction("glVertexArrayVertexBuffer", out p_glVertexArrayVertexBuffer);
		LoadFunction("glVertexArrayVertexBuffers", out p_glVertexArrayVertexBuffers);
		LoadFunction("glVertexArrayAttribBinding", out p_glVertexArrayAttribBinding);
		LoadFunction("glVertexArrayAttribFormat", out p_glVertexArrayAttribFormat);
		LoadFunction("glVertexArrayAttribIFormat", out p_glVertexArrayAttribIFormat);
		LoadFunction("glVertexArrayAttribLFormat", out p_glVertexArrayAttribLFormat);
		LoadFunction("glVertexArrayBindingDivisor", out p_glVertexArrayBindingDivisor);
		LoadFunction("glGetVertexArrayiv", out p_glGetVertexArrayiv);
		LoadFunction("glGetVertexArrayIndexediv", out p_glGetVertexArrayIndexediv);
		LoadFunction("glGetVertexArrayIndexed64iv", out p_glGetVertexArrayIndexed64iv);
		LoadFunction("glCreateSamplers", out p_glCreateSamplers);
		LoadFunction("glCreateProgramPipelines", out p_glCreateProgramPipelines);
		LoadFunction("glCreateQueries", out p_glCreateQueries);
		LoadFunction("glGetQueryBufferObjecti64v", out p_glGetQueryBufferObjecti64v);
		LoadFunction("glGetQueryBufferObjectiv", out p_glGetQueryBufferObjectiv);
		LoadFunction("glGetQueryBufferObjectui64v", out p_glGetQueryBufferObjectui64v);
		LoadFunction("glGetQueryBufferObjectuiv", out p_glGetQueryBufferObjectuiv);
		LoadFunction("glMemoryBarrierByRegion", out p_glMemoryBarrierByRegion);
		LoadFunction("glGetTextureSubImage", out p_glGetTextureSubImage);
		LoadFunction("glGetCompressedTextureSubImage", out p_glGetCompressedTextureSubImage);
		LoadFunction("glGetGraphicsResetStatus", out p_glGetGraphicsResetStatus);
		LoadFunction("glGetnCompressedTexImage", out p_glGetnCompressedTexImage);
		LoadFunction("glGetnTexImage", out p_glGetnTexImage);
		LoadFunction("glGetnUniformdv", out p_glGetnUniformdv);
		LoadFunction("glGetnUniformfv", out p_glGetnUniformfv);
		LoadFunction("glGetnUniformiv", out p_glGetnUniformiv);
		LoadFunction("glGetnUniformuiv", out p_glGetnUniformuiv);
		LoadFunction("glReadnPixels", out p_glReadnPixels);
		LoadFunction("glGetnMapdv", out p_glGetnMapdv);
		LoadFunction("glGetnMapfv", out p_glGetnMapfv);
		LoadFunction("glGetnMapiv", out p_glGetnMapiv);
		LoadFunction("glGetnPixelMapfv", out p_glGetnPixelMapfv);
		LoadFunction("glGetnPixelMapuiv", out p_glGetnPixelMapuiv);
		LoadFunction("glGetnPixelMapusv", out p_glGetnPixelMapusv);
		LoadFunction("glGetnPolygonStipple", out p_glGetnPolygonStipple);
		LoadFunction("glGetnColorTable", out p_glGetnColorTable);
		LoadFunction("glGetnConvolutionFilter", out p_glGetnConvolutionFilter);
		LoadFunction("glGetnSeparableFilter", out p_glGetnSeparableFilter);
		LoadFunction("glGetnHistogram", out p_glGetnHistogram);
		LoadFunction("glGetnMinmax", out p_glGetnMinmax);
		LoadFunction("glTextureBarrier", out p_glTextureBarrier);
		LoadFunction("glSpecializeShader", out p_glSpecializeShader);
		LoadFunction("glMultiDrawArraysIndirectCount", out p_glMultiDrawArraysIndirectCount);
		LoadFunction("glMultiDrawElementsIndirectCount", out p_glMultiDrawElementsIndirectCount);
		LoadFunction("glPolygonOffsetClamp", out p_glPolygonOffsetClamp);
		LoadFunction("glTbufferMask3DFX", out p_glTbufferMask3DFX);
		LoadFunction("glDebugMessageEnableAMD", out p_glDebugMessageEnableAMD);
		LoadFunction("glDebugMessageInsertAMD", out p_glDebugMessageInsertAMD);
		LoadFunction("glDebugMessageCallbackAMD", out p_glDebugMessageCallbackAMD);
		LoadFunction("glGetDebugMessageLogAMD", out p_glGetDebugMessageLogAMD);
		LoadFunction("glBlendFuncIndexedAMD", out p_glBlendFuncIndexedAMD);
		LoadFunction("glBlendFuncSeparateIndexedAMD", out p_glBlendFuncSeparateIndexedAMD);
		LoadFunction("glBlendEquationIndexedAMD", out p_glBlendEquationIndexedAMD);
		LoadFunction("glBlendEquationSeparateIndexedAMD", out p_glBlendEquationSeparateIndexedAMD);
		LoadFunction("glRenderbufferStorageMultisampleAdvancedAMD", out p_glRenderbufferStorageMultisampleAdvancedAMD);
		LoadFunction("glNamedRenderbufferStorageMultisampleAdvancedAMD", out p_glNamedRenderbufferStorageMultisampleAdvancedAMD);
		LoadFunction("glFramebufferSamplePositionsfvAMD", out p_glFramebufferSamplePositionsfvAMD);
		LoadFunction("glNamedFramebufferSamplePositionsfvAMD", out p_glNamedFramebufferSamplePositionsfvAMD);
		LoadFunction("glGetFramebufferParameterfvAMD", out p_glGetFramebufferParameterfvAMD);
		LoadFunction("glGetNamedFramebufferParameterfvAMD", out p_glGetNamedFramebufferParameterfvAMD);
		LoadFunction("glUniform1i64NV", out p_glUniform1i64NV);
		LoadFunction("glUniform2i64NV", out p_glUniform2i64NV);
		LoadFunction("glUniform3i64NV", out p_glUniform3i64NV);
		LoadFunction("glUniform4i64NV", out p_glUniform4i64NV);
		LoadFunction("glUniform1i64vNV", out p_glUniform1i64vNV);
		LoadFunction("glUniform2i64vNV", out p_glUniform2i64vNV);
		LoadFunction("glUniform3i64vNV", out p_glUniform3i64vNV);
		LoadFunction("glUniform4i64vNV", out p_glUniform4i64vNV);
		LoadFunction("glUniform1ui64NV", out p_glUniform1ui64NV);
		LoadFunction("glUniform2ui64NV", out p_glUniform2ui64NV);
		LoadFunction("glUniform3ui64NV", out p_glUniform3ui64NV);
		LoadFunction("glUniform4ui64NV", out p_glUniform4ui64NV);
		LoadFunction("glUniform1ui64vNV", out p_glUniform1ui64vNV);
		LoadFunction("glUniform2ui64vNV", out p_glUniform2ui64vNV);
		LoadFunction("glUniform3ui64vNV", out p_glUniform3ui64vNV);
		LoadFunction("glUniform4ui64vNV", out p_glUniform4ui64vNV);
		LoadFunction("glGetUniformi64vNV", out p_glGetUniformi64vNV);
		LoadFunction("glGetUniformui64vNV", out p_glGetUniformui64vNV);
		LoadFunction("glProgramUniform1i64NV", out p_glProgramUniform1i64NV);
		LoadFunction("glProgramUniform2i64NV", out p_glProgramUniform2i64NV);
		LoadFunction("glProgramUniform3i64NV", out p_glProgramUniform3i64NV);
		LoadFunction("glProgramUniform4i64NV", out p_glProgramUniform4i64NV);
		LoadFunction("glProgramUniform1i64vNV", out p_glProgramUniform1i64vNV);
		LoadFunction("glProgramUniform2i64vNV", out p_glProgramUniform2i64vNV);
		LoadFunction("glProgramUniform3i64vNV", out p_glProgramUniform3i64vNV);
		LoadFunction("glProgramUniform4i64vNV", out p_glProgramUniform4i64vNV);
		LoadFunction("glProgramUniform1ui64NV", out p_glProgramUniform1ui64NV);
		LoadFunction("glProgramUniform2ui64NV", out p_glProgramUniform2ui64NV);
		LoadFunction("glProgramUniform3ui64NV", out p_glProgramUniform3ui64NV);
		LoadFunction("glProgramUniform4ui64NV", out p_glProgramUniform4ui64NV);
		LoadFunction("glProgramUniform1ui64vNV", out p_glProgramUniform1ui64vNV);
		LoadFunction("glProgramUniform2ui64vNV", out p_glProgramUniform2ui64vNV);
		LoadFunction("glProgramUniform3ui64vNV", out p_glProgramUniform3ui64vNV);
		LoadFunction("glProgramUniform4ui64vNV", out p_glProgramUniform4ui64vNV);
		LoadFunction("glVertexAttribParameteriAMD", out p_glVertexAttribParameteriAMD);
		LoadFunction("glMultiDrawArraysIndirectAMD", out p_glMultiDrawArraysIndirectAMD);
		LoadFunction("glMultiDrawElementsIndirectAMD", out p_glMultiDrawElementsIndirectAMD);
		LoadFunction("glGenNamesAMD", out p_glGenNamesAMD);
		LoadFunction("glDeleteNamesAMD", out p_glDeleteNamesAMD);
		LoadFunction("glIsNameAMD", out p_glIsNameAMD);
		LoadFunction("glQueryObjectParameteruiAMD", out p_glQueryObjectParameteruiAMD);
		LoadFunction("glGetPerfMonitorGroupsAMD", out p_glGetPerfMonitorGroupsAMD);
		LoadFunction("glGetPerfMonitorCountersAMD", out p_glGetPerfMonitorCountersAMD);
		LoadFunction("glGetPerfMonitorGroupStringAMD", out p_glGetPerfMonitorGroupStringAMD);
		LoadFunction("glGetPerfMonitorCounterStringAMD", out p_glGetPerfMonitorCounterStringAMD);
		LoadFunction("glGetPerfMonitorCounterInfoAMD", out p_glGetPerfMonitorCounterInfoAMD);
		LoadFunction("glGenPerfMonitorsAMD", out p_glGenPerfMonitorsAMD);
		LoadFunction("glDeletePerfMonitorsAMD", out p_glDeletePerfMonitorsAMD);
		LoadFunction("glSelectPerfMonitorCountersAMD", out p_glSelectPerfMonitorCountersAMD);
		LoadFunction("glBeginPerfMonitorAMD", out p_glBeginPerfMonitorAMD);
		LoadFunction("glEndPerfMonitorAMD", out p_glEndPerfMonitorAMD);
		LoadFunction("glGetPerfMonitorCounterDataAMD", out p_glGetPerfMonitorCounterDataAMD);
		LoadFunction("glSetMultisamplefvAMD", out p_glSetMultisamplefvAMD);
		LoadFunction("glTexStorageSparseAMD", out p_glTexStorageSparseAMD);
		LoadFunction("glTextureStorageSparseAMD", out p_glTextureStorageSparseAMD);
		LoadFunction("glStencilOpValueAMD", out p_glStencilOpValueAMD);
		LoadFunction("glTessellationFactorAMD", out p_glTessellationFactorAMD);
		LoadFunction("glTessellationModeAMD", out p_glTessellationModeAMD);
		LoadFunction("glBlitFramebufferANGLE", out p_glBlitFramebufferANGLE);
		LoadFunction("glRenderbufferStorageMultisampleANGLE", out p_glRenderbufferStorageMultisampleANGLE);
		LoadFunction("glDrawArraysInstancedANGLE", out p_glDrawArraysInstancedANGLE);
		LoadFunction("glDrawElementsInstancedANGLE", out p_glDrawElementsInstancedANGLE);
		LoadFunction("glVertexAttribDivisorANGLE", out p_glVertexAttribDivisorANGLE);
		LoadFunction("glGetTranslatedShaderSourceANGLE", out p_glGetTranslatedShaderSourceANGLE);
		LoadFunction("glCopyTextureLevelsAPPLE", out p_glCopyTextureLevelsAPPLE);
		LoadFunction("glElementPointerAPPLE", out p_glElementPointerAPPLE);
		LoadFunction("glDrawElementArrayAPPLE", out p_glDrawElementArrayAPPLE);
		LoadFunction("glDrawRangeElementArrayAPPLE", out p_glDrawRangeElementArrayAPPLE);
		LoadFunction("glMultiDrawElementArrayAPPLE", out p_glMultiDrawElementArrayAPPLE);
		LoadFunction("glMultiDrawRangeElementArrayAPPLE", out p_glMultiDrawRangeElementArrayAPPLE);
		LoadFunction("glGenFencesAPPLE", out p_glGenFencesAPPLE);
		LoadFunction("glDeleteFencesAPPLE", out p_glDeleteFencesAPPLE);
		LoadFunction("glSetFenceAPPLE", out p_glSetFenceAPPLE);
		LoadFunction("glIsFenceAPPLE", out p_glIsFenceAPPLE);
		LoadFunction("glTestFenceAPPLE", out p_glTestFenceAPPLE);
		LoadFunction("glFinishFenceAPPLE", out p_glFinishFenceAPPLE);
		LoadFunction("glTestObjectAPPLE", out p_glTestObjectAPPLE);
		LoadFunction("glFinishObjectAPPLE", out p_glFinishObjectAPPLE);
		LoadFunction("glBufferParameteriAPPLE", out p_glBufferParameteriAPPLE);
		LoadFunction("glFlushMappedBufferRangeAPPLE", out p_glFlushMappedBufferRangeAPPLE);
		LoadFunction("glRenderbufferStorageMultisampleAPPLE", out p_glRenderbufferStorageMultisampleAPPLE);
		LoadFunction("glResolveMultisampleFramebufferAPPLE", out p_glResolveMultisampleFramebufferAPPLE);
		LoadFunction("glObjectPurgeableAPPLE", out p_glObjectPurgeableAPPLE);
		LoadFunction("glObjectUnpurgeableAPPLE", out p_glObjectUnpurgeableAPPLE);
		LoadFunction("glGetObjectParameterivAPPLE", out p_glGetObjectParameterivAPPLE);
		LoadFunction("glFenceSyncAPPLE", out p_glFenceSyncAPPLE);
		LoadFunction("glIsSyncAPPLE", out p_glIsSyncAPPLE);
		LoadFunction("glDeleteSyncAPPLE", out p_glDeleteSyncAPPLE);
		LoadFunction("glClientWaitSyncAPPLE", out p_glClientWaitSyncAPPLE);
		LoadFunction("glWaitSyncAPPLE", out p_glWaitSyncAPPLE);
		LoadFunction("glGetInteger64vAPPLE", out p_glGetInteger64vAPPLE);
		LoadFunction("glGetSyncivAPPLE", out p_glGetSyncivAPPLE);
		LoadFunction("glTextureRangeAPPLE", out p_glTextureRangeAPPLE);
		LoadFunction("glGetTexParameterPointervAPPLE", out p_glGetTexParameterPointervAPPLE);
		LoadFunction("glBindVertexArrayAPPLE", out p_glBindVertexArrayAPPLE);
		LoadFunction("glDeleteVertexArraysAPPLE", out p_glDeleteVertexArraysAPPLE);
		LoadFunction("glGenVertexArraysAPPLE", out p_glGenVertexArraysAPPLE);
		LoadFunction("glIsVertexArrayAPPLE", out p_glIsVertexArrayAPPLE);
		LoadFunction("glVertexArrayRangeAPPLE", out p_glVertexArrayRangeAPPLE);
		LoadFunction("glFlushVertexArrayRangeAPPLE", out p_glFlushVertexArrayRangeAPPLE);
		LoadFunction("glVertexArrayParameteriAPPLE", out p_glVertexArrayParameteriAPPLE);
		LoadFunction("glEnableVertexAttribAPPLE", out p_glEnableVertexAttribAPPLE);
		LoadFunction("glDisableVertexAttribAPPLE", out p_glDisableVertexAttribAPPLE);
		LoadFunction("glIsVertexAttribEnabledAPPLE", out p_glIsVertexAttribEnabledAPPLE);
		LoadFunction("glMapVertexAttrib1dAPPLE", out p_glMapVertexAttrib1dAPPLE);
		LoadFunction("glMapVertexAttrib1fAPPLE", out p_glMapVertexAttrib1fAPPLE);
		LoadFunction("glMapVertexAttrib2dAPPLE", out p_glMapVertexAttrib2dAPPLE);
		LoadFunction("glMapVertexAttrib2fAPPLE", out p_glMapVertexAttrib2fAPPLE);
		LoadFunction("glPrimitiveBoundingBoxARB", out p_glPrimitiveBoundingBoxARB);
		LoadFunction("glGetTextureHandleARB", out p_glGetTextureHandleARB);
		LoadFunction("glGetTextureSamplerHandleARB", out p_glGetTextureSamplerHandleARB);
		LoadFunction("glMakeTextureHandleResidentARB", out p_glMakeTextureHandleResidentARB);
		LoadFunction("glMakeTextureHandleNonResidentARB", out p_glMakeTextureHandleNonResidentARB);
		LoadFunction("glGetImageHandleARB", out p_glGetImageHandleARB);
		LoadFunction("glMakeImageHandleResidentARB", out p_glMakeImageHandleResidentARB);
		LoadFunction("glMakeImageHandleNonResidentARB", out p_glMakeImageHandleNonResidentARB);
		LoadFunction("glUniformHandleui64ARB", out p_glUniformHandleui64ARB);
		LoadFunction("glUniformHandleui64vARB", out p_glUniformHandleui64vARB);
		LoadFunction("glProgramUniformHandleui64ARB", out p_glProgramUniformHandleui64ARB);
		LoadFunction("glProgramUniformHandleui64vARB", out p_glProgramUniformHandleui64vARB);
		LoadFunction("glIsTextureHandleResidentARB", out p_glIsTextureHandleResidentARB);
		LoadFunction("glIsImageHandleResidentARB", out p_glIsImageHandleResidentARB);
		LoadFunction("glVertexAttribL1ui64ARB", out p_glVertexAttribL1ui64ARB);
		LoadFunction("glVertexAttribL1ui64vARB", out p_glVertexAttribL1ui64vARB);
		LoadFunction("glGetVertexAttribLui64vARB", out p_glGetVertexAttribLui64vARB);
		LoadFunction("glCreateSyncFromCLeventARB", out p_glCreateSyncFromCLeventARB);
		LoadFunction("glClampColorARB", out p_glClampColorARB);
		LoadFunction("glDispatchComputeGroupSizeARB", out p_glDispatchComputeGroupSizeARB);
		LoadFunction("glDebugMessageControlARB", out p_glDebugMessageControlARB);
		LoadFunction("glDebugMessageInsertARB", out p_glDebugMessageInsertARB);
		LoadFunction("glDebugMessageCallbackARB", out p_glDebugMessageCallbackARB);
		LoadFunction("glGetDebugMessageLogARB", out p_glGetDebugMessageLogARB);
		LoadFunction("glDrawBuffersARB", out p_glDrawBuffersARB);
		LoadFunction("glBlendEquationiARB", out p_glBlendEquationiARB);
		LoadFunction("glBlendEquationSeparateiARB", out p_glBlendEquationSeparateiARB);
		LoadFunction("glBlendFunciARB", out p_glBlendFunciARB);
		LoadFunction("glBlendFuncSeparateiARB", out p_glBlendFuncSeparateiARB);
		LoadFunction("glDrawArraysInstancedARB", out p_glDrawArraysInstancedARB);
		LoadFunction("glDrawElementsInstancedARB", out p_glDrawElementsInstancedARB);
		LoadFunction("glProgramStringARB", out p_glProgramStringARB);
		LoadFunction("glBindProgramARB", out p_glBindProgramARB);
		LoadFunction("glDeleteProgramsARB", out p_glDeleteProgramsARB);
		LoadFunction("glGenProgramsARB", out p_glGenProgramsARB);
		LoadFunction("glProgramEnvParameter4dARB", out p_glProgramEnvParameter4dARB);
		LoadFunction("glProgramEnvParameter4dvARB", out p_glProgramEnvParameter4dvARB);
		LoadFunction("glProgramEnvParameter4fARB", out p_glProgramEnvParameter4fARB);
		LoadFunction("glProgramEnvParameter4fvARB", out p_glProgramEnvParameter4fvARB);
		LoadFunction("glProgramLocalParameter4dARB", out p_glProgramLocalParameter4dARB);
		LoadFunction("glProgramLocalParameter4dvARB", out p_glProgramLocalParameter4dvARB);
		LoadFunction("glProgramLocalParameter4fARB", out p_glProgramLocalParameter4fARB);
		LoadFunction("glProgramLocalParameter4fvARB", out p_glProgramLocalParameter4fvARB);
		LoadFunction("glGetProgramEnvParameterdvARB", out p_glGetProgramEnvParameterdvARB);
		LoadFunction("glGetProgramEnvParameterfvARB", out p_glGetProgramEnvParameterfvARB);
		LoadFunction("glGetProgramLocalParameterdvARB", out p_glGetProgramLocalParameterdvARB);
		LoadFunction("glGetProgramLocalParameterfvARB", out p_glGetProgramLocalParameterfvARB);
		LoadFunction("glGetProgramivARB", out p_glGetProgramivARB);
		LoadFunction("glGetProgramStringARB", out p_glGetProgramStringARB);
		LoadFunction("glIsProgramARB", out p_glIsProgramARB);
		LoadFunction("glProgramParameteriARB", out p_glProgramParameteriARB);
		LoadFunction("glFramebufferTextureARB", out p_glFramebufferTextureARB);
		LoadFunction("glFramebufferTextureLayerARB", out p_glFramebufferTextureLayerARB);
		LoadFunction("glFramebufferTextureFaceARB", out p_glFramebufferTextureFaceARB);
		LoadFunction("glSpecializeShaderARB", out p_glSpecializeShaderARB);
		LoadFunction("glUniform1i64ARB", out p_glUniform1i64ARB);
		LoadFunction("glUniform2i64ARB", out p_glUniform2i64ARB);
		LoadFunction("glUniform3i64ARB", out p_glUniform3i64ARB);
		LoadFunction("glUniform4i64ARB", out p_glUniform4i64ARB);
		LoadFunction("glUniform1i64vARB", out p_glUniform1i64vARB);
		LoadFunction("glUniform2i64vARB", out p_glUniform2i64vARB);
		LoadFunction("glUniform3i64vARB", out p_glUniform3i64vARB);
		LoadFunction("glUniform4i64vARB", out p_glUniform4i64vARB);
		LoadFunction("glUniform1ui64ARB", out p_glUniform1ui64ARB);
		LoadFunction("glUniform2ui64ARB", out p_glUniform2ui64ARB);
		LoadFunction("glUniform3ui64ARB", out p_glUniform3ui64ARB);
		LoadFunction("glUniform4ui64ARB", out p_glUniform4ui64ARB);
		LoadFunction("glUniform1ui64vARB", out p_glUniform1ui64vARB);
		LoadFunction("glUniform2ui64vARB", out p_glUniform2ui64vARB);
		LoadFunction("glUniform3ui64vARB", out p_glUniform3ui64vARB);
		LoadFunction("glUniform4ui64vARB", out p_glUniform4ui64vARB);
		LoadFunction("glGetUniformi64vARB", out p_glGetUniformi64vARB);
		LoadFunction("glGetUniformui64vARB", out p_glGetUniformui64vARB);
		LoadFunction("glGetnUniformi64vARB", out p_glGetnUniformi64vARB);
		LoadFunction("glGetnUniformui64vARB", out p_glGetnUniformui64vARB);
		LoadFunction("glProgramUniform1i64ARB", out p_glProgramUniform1i64ARB);
		LoadFunction("glProgramUniform2i64ARB", out p_glProgramUniform2i64ARB);
		LoadFunction("glProgramUniform3i64ARB", out p_glProgramUniform3i64ARB);
		LoadFunction("glProgramUniform4i64ARB", out p_glProgramUniform4i64ARB);
		LoadFunction("glProgramUniform1i64vARB", out p_glProgramUniform1i64vARB);
		LoadFunction("glProgramUniform2i64vARB", out p_glProgramUniform2i64vARB);
		LoadFunction("glProgramUniform3i64vARB", out p_glProgramUniform3i64vARB);
		LoadFunction("glProgramUniform4i64vARB", out p_glProgramUniform4i64vARB);
		LoadFunction("glProgramUniform1ui64ARB", out p_glProgramUniform1ui64ARB);
		LoadFunction("glProgramUniform2ui64ARB", out p_glProgramUniform2ui64ARB);
		LoadFunction("glProgramUniform3ui64ARB", out p_glProgramUniform3ui64ARB);
		LoadFunction("glProgramUniform4ui64ARB", out p_glProgramUniform4ui64ARB);
		LoadFunction("glProgramUniform1ui64vARB", out p_glProgramUniform1ui64vARB);
		LoadFunction("glProgramUniform2ui64vARB", out p_glProgramUniform2ui64vARB);
		LoadFunction("glProgramUniform3ui64vARB", out p_glProgramUniform3ui64vARB);
		LoadFunction("glProgramUniform4ui64vARB", out p_glProgramUniform4ui64vARB);
		LoadFunction("glColorTable", out p_glColorTable);
		LoadFunction("glColorTableParameterfv", out p_glColorTableParameterfv);
		LoadFunction("glColorTableParameteriv", out p_glColorTableParameteriv);
		LoadFunction("glCopyColorTable", out p_glCopyColorTable);
		LoadFunction("glGetColorTable", out p_glGetColorTable);
		LoadFunction("glGetColorTableParameterfv", out p_glGetColorTableParameterfv);
		LoadFunction("glGetColorTableParameteriv", out p_glGetColorTableParameteriv);
		LoadFunction("glColorSubTable", out p_glColorSubTable);
		LoadFunction("glCopyColorSubTable", out p_glCopyColorSubTable);
		LoadFunction("glConvolutionFilter1D", out p_glConvolutionFilter1D);
		LoadFunction("glConvolutionFilter2D", out p_glConvolutionFilter2D);
		LoadFunction("glConvolutionParameterf", out p_glConvolutionParameterf);
		LoadFunction("glConvolutionParameterfv", out p_glConvolutionParameterfv);
		LoadFunction("glConvolutionParameteri", out p_glConvolutionParameteri);
		LoadFunction("glConvolutionParameteriv", out p_glConvolutionParameteriv);
		LoadFunction("glCopyConvolutionFilter1D", out p_glCopyConvolutionFilter1D);
		LoadFunction("glCopyConvolutionFilter2D", out p_glCopyConvolutionFilter2D);
		LoadFunction("glGetConvolutionFilter", out p_glGetConvolutionFilter);
		LoadFunction("glGetConvolutionParameterfv", out p_glGetConvolutionParameterfv);
		LoadFunction("glGetConvolutionParameteriv", out p_glGetConvolutionParameteriv);
		LoadFunction("glGetSeparableFilter", out p_glGetSeparableFilter);
		LoadFunction("glSeparableFilter2D", out p_glSeparableFilter2D);
		LoadFunction("glGetHistogram", out p_glGetHistogram);
		LoadFunction("glGetHistogramParameterfv", out p_glGetHistogramParameterfv);
		LoadFunction("glGetHistogramParameteriv", out p_glGetHistogramParameteriv);
		LoadFunction("glGetMinmax", out p_glGetMinmax);
		LoadFunction("glGetMinmaxParameterfv", out p_glGetMinmaxParameterfv);
		LoadFunction("glGetMinmaxParameteriv", out p_glGetMinmaxParameteriv);
		LoadFunction("glHistogram", out p_glHistogram);
		LoadFunction("glMinmax", out p_glMinmax);
		LoadFunction("glResetHistogram", out p_glResetHistogram);
		LoadFunction("glResetMinmax", out p_glResetMinmax);
		LoadFunction("glMultiDrawArraysIndirectCountARB", out p_glMultiDrawArraysIndirectCountARB);
		LoadFunction("glMultiDrawElementsIndirectCountARB", out p_glMultiDrawElementsIndirectCountARB);
		LoadFunction("glVertexAttribDivisorARB", out p_glVertexAttribDivisorARB);
		LoadFunction("glCurrentPaletteMatrixARB", out p_glCurrentPaletteMatrixARB);
		LoadFunction("glMatrixIndexubvARB", out p_glMatrixIndexubvARB);
		LoadFunction("glMatrixIndexusvARB", out p_glMatrixIndexusvARB);
		LoadFunction("glMatrixIndexuivARB", out p_glMatrixIndexuivARB);
		LoadFunction("glMatrixIndexPointerARB", out p_glMatrixIndexPointerARB);
		LoadFunction("glSampleCoverageARB", out p_glSampleCoverageARB);
		LoadFunction("glActiveTextureARB", out p_glActiveTextureARB);
		LoadFunction("glClientActiveTextureARB", out p_glClientActiveTextureARB);
		LoadFunction("glMultiTexCoord1dARB", out p_glMultiTexCoord1dARB);
		LoadFunction("glMultiTexCoord1dvARB", out p_glMultiTexCoord1dvARB);
		LoadFunction("glMultiTexCoord1fARB", out p_glMultiTexCoord1fARB);
		LoadFunction("glMultiTexCoord1fvARB", out p_glMultiTexCoord1fvARB);
		LoadFunction("glMultiTexCoord1iARB", out p_glMultiTexCoord1iARB);
		LoadFunction("glMultiTexCoord1ivARB", out p_glMultiTexCoord1ivARB);
		LoadFunction("glMultiTexCoord1sARB", out p_glMultiTexCoord1sARB);
		LoadFunction("glMultiTexCoord1svARB", out p_glMultiTexCoord1svARB);
		LoadFunction("glMultiTexCoord2dARB", out p_glMultiTexCoord2dARB);
		LoadFunction("glMultiTexCoord2dvARB", out p_glMultiTexCoord2dvARB);
		LoadFunction("glMultiTexCoord2fARB", out p_glMultiTexCoord2fARB);
		LoadFunction("glMultiTexCoord2fvARB", out p_glMultiTexCoord2fvARB);
		LoadFunction("glMultiTexCoord2iARB", out p_glMultiTexCoord2iARB);
		LoadFunction("glMultiTexCoord2ivARB", out p_glMultiTexCoord2ivARB);
		LoadFunction("glMultiTexCoord2sARB", out p_glMultiTexCoord2sARB);
		LoadFunction("glMultiTexCoord2svARB", out p_glMultiTexCoord2svARB);
		LoadFunction("glMultiTexCoord3dARB", out p_glMultiTexCoord3dARB);
		LoadFunction("glMultiTexCoord3dvARB", out p_glMultiTexCoord3dvARB);
		LoadFunction("glMultiTexCoord3fARB", out p_glMultiTexCoord3fARB);
		LoadFunction("glMultiTexCoord3fvARB", out p_glMultiTexCoord3fvARB);
		LoadFunction("glMultiTexCoord3iARB", out p_glMultiTexCoord3iARB);
		LoadFunction("glMultiTexCoord3ivARB", out p_glMultiTexCoord3ivARB);
		LoadFunction("glMultiTexCoord3sARB", out p_glMultiTexCoord3sARB);
		LoadFunction("glMultiTexCoord3svARB", out p_glMultiTexCoord3svARB);
		LoadFunction("glMultiTexCoord4dARB", out p_glMultiTexCoord4dARB);
		LoadFunction("glMultiTexCoord4dvARB", out p_glMultiTexCoord4dvARB);
		LoadFunction("glMultiTexCoord4fARB", out p_glMultiTexCoord4fARB);
		LoadFunction("glMultiTexCoord4fvARB", out p_glMultiTexCoord4fvARB);
		LoadFunction("glMultiTexCoord4iARB", out p_glMultiTexCoord4iARB);
		LoadFunction("glMultiTexCoord4ivARB", out p_glMultiTexCoord4ivARB);
		LoadFunction("glMultiTexCoord4sARB", out p_glMultiTexCoord4sARB);
		LoadFunction("glMultiTexCoord4svARB", out p_glMultiTexCoord4svARB);
		LoadFunction("glGenQueriesARB", out p_glGenQueriesARB);
		LoadFunction("glDeleteQueriesARB", out p_glDeleteQueriesARB);
		LoadFunction("glIsQueryARB", out p_glIsQueryARB);
		LoadFunction("glBeginQueryARB", out p_glBeginQueryARB);
		LoadFunction("glEndQueryARB", out p_glEndQueryARB);
		LoadFunction("glGetQueryivARB", out p_glGetQueryivARB);
		LoadFunction("glGetQueryObjectivARB", out p_glGetQueryObjectivARB);
		LoadFunction("glGetQueryObjectuivARB", out p_glGetQueryObjectuivARB);
		LoadFunction("glMaxShaderCompilerThreadsARB", out p_glMaxShaderCompilerThreadsARB);
		LoadFunction("glPointParameterfARB", out p_glPointParameterfARB);
		LoadFunction("glPointParameterfvARB", out p_glPointParameterfvARB);
		LoadFunction("glGetGraphicsResetStatusARB", out p_glGetGraphicsResetStatusARB);
		LoadFunction("glGetnTexImageARB", out p_glGetnTexImageARB);
		LoadFunction("glReadnPixelsARB", out p_glReadnPixelsARB);
		LoadFunction("glGetnCompressedTexImageARB", out p_glGetnCompressedTexImageARB);
		LoadFunction("glGetnUniformfvARB", out p_glGetnUniformfvARB);
		LoadFunction("glGetnUniformivARB", out p_glGetnUniformivARB);
		LoadFunction("glGetnUniformuivARB", out p_glGetnUniformuivARB);
		LoadFunction("glGetnUniformdvARB", out p_glGetnUniformdvARB);
		LoadFunction("glGetnMapdvARB", out p_glGetnMapdvARB);
		LoadFunction("glGetnMapfvARB", out p_glGetnMapfvARB);
		LoadFunction("glGetnMapivARB", out p_glGetnMapivARB);
		LoadFunction("glGetnPixelMapfvARB", out p_glGetnPixelMapfvARB);
		LoadFunction("glGetnPixelMapuivARB", out p_glGetnPixelMapuivARB);
		LoadFunction("glGetnPixelMapusvARB", out p_glGetnPixelMapusvARB);
		LoadFunction("glGetnPolygonStippleARB", out p_glGetnPolygonStippleARB);
		LoadFunction("glGetnColorTableARB", out p_glGetnColorTableARB);
		LoadFunction("glGetnConvolutionFilterARB", out p_glGetnConvolutionFilterARB);
		LoadFunction("glGetnSeparableFilterARB", out p_glGetnSeparableFilterARB);
		LoadFunction("glGetnHistogramARB", out p_glGetnHistogramARB);
		LoadFunction("glGetnMinmaxARB", out p_glGetnMinmaxARB);
		LoadFunction("glFramebufferSampleLocationsfvARB", out p_glFramebufferSampleLocationsfvARB);
		LoadFunction("glNamedFramebufferSampleLocationsfvARB", out p_glNamedFramebufferSampleLocationsfvARB);
		LoadFunction("glEvaluateDepthValuesARB", out p_glEvaluateDepthValuesARB);
		LoadFunction("glMinSampleShadingARB", out p_glMinSampleShadingARB);
		LoadFunction("glDeleteObjectARB", out p_glDeleteObjectARB);
		LoadFunction("glGetHandleARB", out p_glGetHandleARB);
		LoadFunction("glDetachObjectARB", out p_glDetachObjectARB);
		LoadFunction("glCreateShaderObjectARB", out p_glCreateShaderObjectARB);
		LoadFunction("glShaderSourceARB", out p_glShaderSourceARB);
		LoadFunction("glCompileShaderARB", out p_glCompileShaderARB);
		LoadFunction("glCreateProgramObjectARB", out p_glCreateProgramObjectARB);
		LoadFunction("glAttachObjectARB", out p_glAttachObjectARB);
		LoadFunction("glLinkProgramARB", out p_glLinkProgramARB);
		LoadFunction("glUseProgramObjectARB", out p_glUseProgramObjectARB);
		LoadFunction("glValidateProgramARB", out p_glValidateProgramARB);
		LoadFunction("glUniform1fARB", out p_glUniform1fARB);
		LoadFunction("glUniform2fARB", out p_glUniform2fARB);
		LoadFunction("glUniform3fARB", out p_glUniform3fARB);
		LoadFunction("glUniform4fARB", out p_glUniform4fARB);
		LoadFunction("glUniform1iARB", out p_glUniform1iARB);
		LoadFunction("glUniform2iARB", out p_glUniform2iARB);
		LoadFunction("glUniform3iARB", out p_glUniform3iARB);
		LoadFunction("glUniform4iARB", out p_glUniform4iARB);
		LoadFunction("glUniform1fvARB", out p_glUniform1fvARB);
		LoadFunction("glUniform2fvARB", out p_glUniform2fvARB);
		LoadFunction("glUniform3fvARB", out p_glUniform3fvARB);
		LoadFunction("glUniform4fvARB", out p_glUniform4fvARB);
		LoadFunction("glUniform1ivARB", out p_glUniform1ivARB);
		LoadFunction("glUniform2ivARB", out p_glUniform2ivARB);
		LoadFunction("glUniform3ivARB", out p_glUniform3ivARB);
		LoadFunction("glUniform4ivARB", out p_glUniform4ivARB);
		LoadFunction("glUniformMatrix2fvARB", out p_glUniformMatrix2fvARB);
		LoadFunction("glUniformMatrix3fvARB", out p_glUniformMatrix3fvARB);
		LoadFunction("glUniformMatrix4fvARB", out p_glUniformMatrix4fvARB);
		LoadFunction("glGetObjectParameterfvARB", out p_glGetObjectParameterfvARB);
		LoadFunction("glGetObjectParameterivARB", out p_glGetObjectParameterivARB);
		LoadFunction("glGetInfoLogARB", out p_glGetInfoLogARB);
		LoadFunction("glGetAttachedObjectsARB", out p_glGetAttachedObjectsARB);
		LoadFunction("glGetUniformLocationARB", out p_glGetUniformLocationARB);
		LoadFunction("glGetActiveUniformARB", out p_glGetActiveUniformARB);
		LoadFunction("glGetUniformfvARB", out p_glGetUniformfvARB);
		LoadFunction("glGetUniformivARB", out p_glGetUniformivARB);
		LoadFunction("glGetShaderSourceARB", out p_glGetShaderSourceARB);
		LoadFunction("glNamedStringARB", out p_glNamedStringARB);
		LoadFunction("glDeleteNamedStringARB", out p_glDeleteNamedStringARB);
		LoadFunction("glCompileShaderIncludeARB", out p_glCompileShaderIncludeARB);
		LoadFunction("glIsNamedStringARB", out p_glIsNamedStringARB);
		LoadFunction("glGetNamedStringARB", out p_glGetNamedStringARB);
		LoadFunction("glGetNamedStringivARB", out p_glGetNamedStringivARB);
		LoadFunction("glBufferPageCommitmentARB", out p_glBufferPageCommitmentARB);
		LoadFunction("glNamedBufferPageCommitmentEXT", out p_glNamedBufferPageCommitmentEXT);
		LoadFunction("glNamedBufferPageCommitmentARB", out p_glNamedBufferPageCommitmentARB);
		LoadFunction("glTexPageCommitmentARB", out p_glTexPageCommitmentARB);
		LoadFunction("glTexBufferARB", out p_glTexBufferARB);
		LoadFunction("glCompressedTexImage3DARB", out p_glCompressedTexImage3DARB);
		LoadFunction("glCompressedTexImage2DARB", out p_glCompressedTexImage2DARB);
		LoadFunction("glCompressedTexImage1DARB", out p_glCompressedTexImage1DARB);
		LoadFunction("glCompressedTexSubImage3DARB", out p_glCompressedTexSubImage3DARB);
		LoadFunction("glCompressedTexSubImage2DARB", out p_glCompressedTexSubImage2DARB);
		LoadFunction("glCompressedTexSubImage1DARB", out p_glCompressedTexSubImage1DARB);
		LoadFunction("glGetCompressedTexImageARB", out p_glGetCompressedTexImageARB);
		LoadFunction("glLoadTransposeMatrixfARB", out p_glLoadTransposeMatrixfARB);
		LoadFunction("glLoadTransposeMatrixdARB", out p_glLoadTransposeMatrixdARB);
		LoadFunction("glMultTransposeMatrixfARB", out p_glMultTransposeMatrixfARB);
		LoadFunction("glMultTransposeMatrixdARB", out p_glMultTransposeMatrixdARB);
		LoadFunction("glWeightbvARB", out p_glWeightbvARB);
		LoadFunction("glWeightsvARB", out p_glWeightsvARB);
		LoadFunction("glWeightivARB", out p_glWeightivARB);
		LoadFunction("glWeightfvARB", out p_glWeightfvARB);
		LoadFunction("glWeightdvARB", out p_glWeightdvARB);
		LoadFunction("glWeightubvARB", out p_glWeightubvARB);
		LoadFunction("glWeightusvARB", out p_glWeightusvARB);
		LoadFunction("glWeightuivARB", out p_glWeightuivARB);
		LoadFunction("glWeightPointerARB", out p_glWeightPointerARB);
		LoadFunction("glVertexBlendARB", out p_glVertexBlendARB);
		LoadFunction("glBindBufferARB", out p_glBindBufferARB);
		LoadFunction("glDeleteBuffersARB", out p_glDeleteBuffersARB);
		LoadFunction("glGenBuffersARB", out p_glGenBuffersARB);
		LoadFunction("glIsBufferARB", out p_glIsBufferARB);
		LoadFunction("glBufferDataARB", out p_glBufferDataARB);
		LoadFunction("glBufferSubDataARB", out p_glBufferSubDataARB);
		LoadFunction("glGetBufferSubDataARB", out p_glGetBufferSubDataARB);
		LoadFunction("glMapBufferARB", out p_glMapBufferARB);
		LoadFunction("glUnmapBufferARB", out p_glUnmapBufferARB);
		LoadFunction("glGetBufferParameterivARB", out p_glGetBufferParameterivARB);
		LoadFunction("glGetBufferPointervARB", out p_glGetBufferPointervARB);
		LoadFunction("glVertexAttrib1dARB", out p_glVertexAttrib1dARB);
		LoadFunction("glVertexAttrib1dvARB", out p_glVertexAttrib1dvARB);
		LoadFunction("glVertexAttrib1fARB", out p_glVertexAttrib1fARB);
		LoadFunction("glVertexAttrib1fvARB", out p_glVertexAttrib1fvARB);
		LoadFunction("glVertexAttrib1sARB", out p_glVertexAttrib1sARB);
		LoadFunction("glVertexAttrib1svARB", out p_glVertexAttrib1svARB);
		LoadFunction("glVertexAttrib2dARB", out p_glVertexAttrib2dARB);
		LoadFunction("glVertexAttrib2dvARB", out p_glVertexAttrib2dvARB);
		LoadFunction("glVertexAttrib2fARB", out p_glVertexAttrib2fARB);
		LoadFunction("glVertexAttrib2fvARB", out p_glVertexAttrib2fvARB);
		LoadFunction("glVertexAttrib2sARB", out p_glVertexAttrib2sARB);
		LoadFunction("glVertexAttrib2svARB", out p_glVertexAttrib2svARB);
		LoadFunction("glVertexAttrib3dARB", out p_glVertexAttrib3dARB);
		LoadFunction("glVertexAttrib3dvARB", out p_glVertexAttrib3dvARB);
		LoadFunction("glVertexAttrib3fARB", out p_glVertexAttrib3fARB);
		LoadFunction("glVertexAttrib3fvARB", out p_glVertexAttrib3fvARB);
		LoadFunction("glVertexAttrib3sARB", out p_glVertexAttrib3sARB);
		LoadFunction("glVertexAttrib3svARB", out p_glVertexAttrib3svARB);
		LoadFunction("glVertexAttrib4NbvARB", out p_glVertexAttrib4NbvARB);
		LoadFunction("glVertexAttrib4NivARB", out p_glVertexAttrib4NivARB);
		LoadFunction("glVertexAttrib4NsvARB", out p_glVertexAttrib4NsvARB);
		LoadFunction("glVertexAttrib4NubARB", out p_glVertexAttrib4NubARB);
		LoadFunction("glVertexAttrib4NubvARB", out p_glVertexAttrib4NubvARB);
		LoadFunction("glVertexAttrib4NuivARB", out p_glVertexAttrib4NuivARB);
		LoadFunction("glVertexAttrib4NusvARB", out p_glVertexAttrib4NusvARB);
		LoadFunction("glVertexAttrib4bvARB", out p_glVertexAttrib4bvARB);
		LoadFunction("glVertexAttrib4dARB", out p_glVertexAttrib4dARB);
		LoadFunction("glVertexAttrib4dvARB", out p_glVertexAttrib4dvARB);
		LoadFunction("glVertexAttrib4fARB", out p_glVertexAttrib4fARB);
		LoadFunction("glVertexAttrib4fvARB", out p_glVertexAttrib4fvARB);
		LoadFunction("glVertexAttrib4ivARB", out p_glVertexAttrib4ivARB);
		LoadFunction("glVertexAttrib4sARB", out p_glVertexAttrib4sARB);
		LoadFunction("glVertexAttrib4svARB", out p_glVertexAttrib4svARB);
		LoadFunction("glVertexAttrib4ubvARB", out p_glVertexAttrib4ubvARB);
		LoadFunction("glVertexAttrib4uivARB", out p_glVertexAttrib4uivARB);
		LoadFunction("glVertexAttrib4usvARB", out p_glVertexAttrib4usvARB);
		LoadFunction("glVertexAttribPointerARB", out p_glVertexAttribPointerARB);
		LoadFunction("glEnableVertexAttribArrayARB", out p_glEnableVertexAttribArrayARB);
		LoadFunction("glDisableVertexAttribArrayARB", out p_glDisableVertexAttribArrayARB);
		LoadFunction("glGetVertexAttribdvARB", out p_glGetVertexAttribdvARB);
		LoadFunction("glGetVertexAttribfvARB", out p_glGetVertexAttribfvARB);
		LoadFunction("glGetVertexAttribivARB", out p_glGetVertexAttribivARB);
		LoadFunction("glGetVertexAttribPointervARB", out p_glGetVertexAttribPointervARB);
		LoadFunction("glBindAttribLocationARB", out p_glBindAttribLocationARB);
		LoadFunction("glGetActiveAttribARB", out p_glGetActiveAttribARB);
		LoadFunction("glGetAttribLocationARB", out p_glGetAttribLocationARB);
		LoadFunction("glWindowPos2dARB", out p_glWindowPos2dARB);
		LoadFunction("glWindowPos2dvARB", out p_glWindowPos2dvARB);
		LoadFunction("glWindowPos2fARB", out p_glWindowPos2fARB);
		LoadFunction("glWindowPos2fvARB", out p_glWindowPos2fvARB);
		LoadFunction("glWindowPos2iARB", out p_glWindowPos2iARB);
		LoadFunction("glWindowPos2ivARB", out p_glWindowPos2ivARB);
		LoadFunction("glWindowPos2sARB", out p_glWindowPos2sARB);
		LoadFunction("glWindowPos2svARB", out p_glWindowPos2svARB);
		LoadFunction("glWindowPos3dARB", out p_glWindowPos3dARB);
		LoadFunction("glWindowPos3dvARB", out p_glWindowPos3dvARB);
		LoadFunction("glWindowPos3fARB", out p_glWindowPos3fARB);
		LoadFunction("glWindowPos3fvARB", out p_glWindowPos3fvARB);
		LoadFunction("glWindowPos3iARB", out p_glWindowPos3iARB);
		LoadFunction("glWindowPos3ivARB", out p_glWindowPos3ivARB);
		LoadFunction("glWindowPos3sARB", out p_glWindowPos3sARB);
		LoadFunction("glWindowPos3svARB", out p_glWindowPos3svARB);
		LoadFunction("glDrawBuffersATI", out p_glDrawBuffersATI);
		LoadFunction("glElementPointerATI", out p_glElementPointerATI);
		LoadFunction("glDrawElementArrayATI", out p_glDrawElementArrayATI);
		LoadFunction("glDrawRangeElementArrayATI", out p_glDrawRangeElementArrayATI);
		LoadFunction("glTexBumpParameterivATI", out p_glTexBumpParameterivATI);
		LoadFunction("glTexBumpParameterfvATI", out p_glTexBumpParameterfvATI);
		LoadFunction("glGetTexBumpParameterivATI", out p_glGetTexBumpParameterivATI);
		LoadFunction("glGetTexBumpParameterfvATI", out p_glGetTexBumpParameterfvATI);
		LoadFunction("glGenFragmentShadersATI", out p_glGenFragmentShadersATI);
		LoadFunction("glBindFragmentShaderATI", out p_glBindFragmentShaderATI);
		LoadFunction("glDeleteFragmentShaderATI", out p_glDeleteFragmentShaderATI);
		LoadFunction("glBeginFragmentShaderATI", out p_glBeginFragmentShaderATI);
		LoadFunction("glEndFragmentShaderATI", out p_glEndFragmentShaderATI);
		LoadFunction("glPassTexCoordATI", out p_glPassTexCoordATI);
		LoadFunction("glSampleMapATI", out p_glSampleMapATI);
		LoadFunction("glColorFragmentOp1ATI", out p_glColorFragmentOp1ATI);
		LoadFunction("glColorFragmentOp2ATI", out p_glColorFragmentOp2ATI);
		LoadFunction("glColorFragmentOp3ATI", out p_glColorFragmentOp3ATI);
		LoadFunction("glAlphaFragmentOp1ATI", out p_glAlphaFragmentOp1ATI);
		LoadFunction("glAlphaFragmentOp2ATI", out p_glAlphaFragmentOp2ATI);
		LoadFunction("glAlphaFragmentOp3ATI", out p_glAlphaFragmentOp3ATI);
		LoadFunction("glSetFragmentShaderConstantATI", out p_glSetFragmentShaderConstantATI);
		LoadFunction("glMapObjectBufferATI", out p_glMapObjectBufferATI);
		LoadFunction("glUnmapObjectBufferATI", out p_glUnmapObjectBufferATI);
		LoadFunction("glPNTrianglesiATI", out p_glPNTrianglesiATI);
		LoadFunction("glPNTrianglesfATI", out p_glPNTrianglesfATI);
		LoadFunction("glStencilOpSeparateATI", out p_glStencilOpSeparateATI);
		LoadFunction("glStencilFuncSeparateATI", out p_glStencilFuncSeparateATI);
		LoadFunction("glNewObjectBufferATI", out p_glNewObjectBufferATI);
		LoadFunction("glIsObjectBufferATI", out p_glIsObjectBufferATI);
		LoadFunction("glUpdateObjectBufferATI", out p_glUpdateObjectBufferATI);
		LoadFunction("glGetObjectBufferfvATI", out p_glGetObjectBufferfvATI);
		LoadFunction("glGetObjectBufferivATI", out p_glGetObjectBufferivATI);
		LoadFunction("glFreeObjectBufferATI", out p_glFreeObjectBufferATI);
		LoadFunction("glArrayObjectATI", out p_glArrayObjectATI);
		LoadFunction("glGetArrayObjectfvATI", out p_glGetArrayObjectfvATI);
		LoadFunction("glGetArrayObjectivATI", out p_glGetArrayObjectivATI);
		LoadFunction("glVariantArrayObjectATI", out p_glVariantArrayObjectATI);
		LoadFunction("glGetVariantArrayObjectfvATI", out p_glGetVariantArrayObjectfvATI);
		LoadFunction("glGetVariantArrayObjectivATI", out p_glGetVariantArrayObjectivATI);
		LoadFunction("glVertexAttribArrayObjectATI", out p_glVertexAttribArrayObjectATI);
		LoadFunction("glGetVertexAttribArrayObjectfvATI", out p_glGetVertexAttribArrayObjectfvATI);
		LoadFunction("glGetVertexAttribArrayObjectivATI", out p_glGetVertexAttribArrayObjectivATI);
		LoadFunction("glVertexStream1sATI", out p_glVertexStream1sATI);
		LoadFunction("glVertexStream1svATI", out p_glVertexStream1svATI);
		LoadFunction("glVertexStream1iATI", out p_glVertexStream1iATI);
		LoadFunction("glVertexStream1ivATI", out p_glVertexStream1ivATI);
		LoadFunction("glVertexStream1fATI", out p_glVertexStream1fATI);
		LoadFunction("glVertexStream1fvATI", out p_glVertexStream1fvATI);
		LoadFunction("glVertexStream1dATI", out p_glVertexStream1dATI);
		LoadFunction("glVertexStream1dvATI", out p_glVertexStream1dvATI);
		LoadFunction("glVertexStream2sATI", out p_glVertexStream2sATI);
		LoadFunction("glVertexStream2svATI", out p_glVertexStream2svATI);
		LoadFunction("glVertexStream2iATI", out p_glVertexStream2iATI);
		LoadFunction("glVertexStream2ivATI", out p_glVertexStream2ivATI);
		LoadFunction("glVertexStream2fATI", out p_glVertexStream2fATI);
		LoadFunction("glVertexStream2fvATI", out p_glVertexStream2fvATI);
		LoadFunction("glVertexStream2dATI", out p_glVertexStream2dATI);
		LoadFunction("glVertexStream2dvATI", out p_glVertexStream2dvATI);
		LoadFunction("glVertexStream3sATI", out p_glVertexStream3sATI);
		LoadFunction("glVertexStream3svATI", out p_glVertexStream3svATI);
		LoadFunction("glVertexStream3iATI", out p_glVertexStream3iATI);
		LoadFunction("glVertexStream3ivATI", out p_glVertexStream3ivATI);
		LoadFunction("glVertexStream3fATI", out p_glVertexStream3fATI);
		LoadFunction("glVertexStream3fvATI", out p_glVertexStream3fvATI);
		LoadFunction("glVertexStream3dATI", out p_glVertexStream3dATI);
		LoadFunction("glVertexStream3dvATI", out p_glVertexStream3dvATI);
		LoadFunction("glVertexStream4sATI", out p_glVertexStream4sATI);
		LoadFunction("glVertexStream4svATI", out p_glVertexStream4svATI);
		LoadFunction("glVertexStream4iATI", out p_glVertexStream4iATI);
		LoadFunction("glVertexStream4ivATI", out p_glVertexStream4ivATI);
		LoadFunction("glVertexStream4fATI", out p_glVertexStream4fATI);
		LoadFunction("glVertexStream4fvATI", out p_glVertexStream4fvATI);
		LoadFunction("glVertexStream4dATI", out p_glVertexStream4dATI);
		LoadFunction("glVertexStream4dvATI", out p_glVertexStream4dvATI);
		LoadFunction("glNormalStream3bATI", out p_glNormalStream3bATI);
		LoadFunction("glNormalStream3bvATI", out p_glNormalStream3bvATI);
		LoadFunction("glNormalStream3sATI", out p_glNormalStream3sATI);
		LoadFunction("glNormalStream3svATI", out p_glNormalStream3svATI);
		LoadFunction("glNormalStream3iATI", out p_glNormalStream3iATI);
		LoadFunction("glNormalStream3ivATI", out p_glNormalStream3ivATI);
		LoadFunction("glNormalStream3fATI", out p_glNormalStream3fATI);
		LoadFunction("glNormalStream3fvATI", out p_glNormalStream3fvATI);
		LoadFunction("glNormalStream3dATI", out p_glNormalStream3dATI);
		LoadFunction("glNormalStream3dvATI", out p_glNormalStream3dvATI);
		LoadFunction("glClientActiveVertexStreamATI", out p_glClientActiveVertexStreamATI);
		LoadFunction("glVertexBlendEnviATI", out p_glVertexBlendEnviATI);
		LoadFunction("glVertexBlendEnvfATI", out p_glVertexBlendEnvfATI);
		LoadFunction("glEGLImageTargetTexStorageEXT", out p_glEGLImageTargetTexStorageEXT);
		LoadFunction("glEGLImageTargetTextureStorageEXT", out p_glEGLImageTargetTextureStorageEXT);
		LoadFunction("glDrawArraysInstancedBaseInstanceEXT", out p_glDrawArraysInstancedBaseInstanceEXT);
		LoadFunction("glDrawElementsInstancedBaseInstanceEXT", out p_glDrawElementsInstancedBaseInstanceEXT);
		LoadFunction("glDrawElementsInstancedBaseVertexBaseInstanceEXT", out p_glDrawElementsInstancedBaseVertexBaseInstanceEXT);
		LoadFunction("glUniformBufferEXT", out p_glUniformBufferEXT);
		LoadFunction("glGetUniformBufferSizeEXT", out p_glGetUniformBufferSizeEXT);
		LoadFunction("glGetUniformOffsetEXT", out p_glGetUniformOffsetEXT);
		LoadFunction("glBlendColorEXT", out p_glBlendColorEXT);
		LoadFunction("glBlendEquationSeparateEXT", out p_glBlendEquationSeparateEXT);
		LoadFunction("glBindFragDataLocationIndexedEXT", out p_glBindFragDataLocationIndexedEXT);
		LoadFunction("glBindFragDataLocationEXT", out p_glBindFragDataLocationEXT);
		LoadFunction("glGetProgramResourceLocationIndexEXT", out p_glGetProgramResourceLocationIndexEXT);
		LoadFunction("glGetFragDataIndexEXT", out p_glGetFragDataIndexEXT);
		LoadFunction("glBlendFuncSeparateEXT", out p_glBlendFuncSeparateEXT);
		LoadFunction("glBlendEquationEXT", out p_glBlendEquationEXT);
		LoadFunction("glBufferStorageEXT", out p_glBufferStorageEXT);
		LoadFunction("glClearTexImageEXT", out p_glClearTexImageEXT);
		LoadFunction("glClearTexSubImageEXT", out p_glClearTexSubImageEXT);
		LoadFunction("glClipControlEXT", out p_glClipControlEXT);
		LoadFunction("glColorSubTableEXT", out p_glColorSubTableEXT);
		LoadFunction("glCopyColorSubTableEXT", out p_glCopyColorSubTableEXT);
		LoadFunction("glLockArraysEXT", out p_glLockArraysEXT);
		LoadFunction("glUnlockArraysEXT", out p_glUnlockArraysEXT);
		LoadFunction("glConvolutionFilter1DEXT", out p_glConvolutionFilter1DEXT);
		LoadFunction("glConvolutionFilter2DEXT", out p_glConvolutionFilter2DEXT);
		LoadFunction("glConvolutionParameterfEXT", out p_glConvolutionParameterfEXT);
		LoadFunction("glConvolutionParameterfvEXT", out p_glConvolutionParameterfvEXT);
		LoadFunction("glConvolutionParameteriEXT", out p_glConvolutionParameteriEXT);
		LoadFunction("glConvolutionParameterivEXT", out p_glConvolutionParameterivEXT);
		LoadFunction("glCopyConvolutionFilter1DEXT", out p_glCopyConvolutionFilter1DEXT);
		LoadFunction("glCopyConvolutionFilter2DEXT", out p_glCopyConvolutionFilter2DEXT);
		LoadFunction("glGetConvolutionFilterEXT", out p_glGetConvolutionFilterEXT);
		LoadFunction("glGetConvolutionParameterfvEXT", out p_glGetConvolutionParameterfvEXT);
		LoadFunction("glGetConvolutionParameterivEXT", out p_glGetConvolutionParameterivEXT);
		LoadFunction("glGetSeparableFilterEXT", out p_glGetSeparableFilterEXT);
		LoadFunction("glSeparableFilter2DEXT", out p_glSeparableFilter2DEXT);
		LoadFunction("glTangent3bEXT", out p_glTangent3bEXT);
		LoadFunction("glTangent3bvEXT", out p_glTangent3bvEXT);
		LoadFunction("glTangent3dEXT", out p_glTangent3dEXT);
		LoadFunction("glTangent3dvEXT", out p_glTangent3dvEXT);
		LoadFunction("glTangent3fEXT", out p_glTangent3fEXT);
		LoadFunction("glTangent3fvEXT", out p_glTangent3fvEXT);
		LoadFunction("glTangent3iEXT", out p_glTangent3iEXT);
		LoadFunction("glTangent3ivEXT", out p_glTangent3ivEXT);
		LoadFunction("glTangent3sEXT", out p_glTangent3sEXT);
		LoadFunction("glTangent3svEXT", out p_glTangent3svEXT);
		LoadFunction("glBinormal3bEXT", out p_glBinormal3bEXT);
		LoadFunction("glBinormal3bvEXT", out p_glBinormal3bvEXT);
		LoadFunction("glBinormal3dEXT", out p_glBinormal3dEXT);
		LoadFunction("glBinormal3dvEXT", out p_glBinormal3dvEXT);
		LoadFunction("glBinormal3fEXT", out p_glBinormal3fEXT);
		LoadFunction("glBinormal3fvEXT", out p_glBinormal3fvEXT);
		LoadFunction("glBinormal3iEXT", out p_glBinormal3iEXT);
		LoadFunction("glBinormal3ivEXT", out p_glBinormal3ivEXT);
		LoadFunction("glBinormal3sEXT", out p_glBinormal3sEXT);
		LoadFunction("glBinormal3svEXT", out p_glBinormal3svEXT);
		LoadFunction("glTangentPointerEXT", out p_glTangentPointerEXT);
		LoadFunction("glBinormalPointerEXT", out p_glBinormalPointerEXT);
		LoadFunction("glCopyImageSubDataEXT", out p_glCopyImageSubDataEXT);
		LoadFunction("glCopyTexImage1DEXT", out p_glCopyTexImage1DEXT);
		LoadFunction("glCopyTexImage2DEXT", out p_glCopyTexImage2DEXT);
		LoadFunction("glCopyTexSubImage1DEXT", out p_glCopyTexSubImage1DEXT);
		LoadFunction("glCopyTexSubImage2DEXT", out p_glCopyTexSubImage2DEXT);
		LoadFunction("glCopyTexSubImage3DEXT", out p_glCopyTexSubImage3DEXT);
		LoadFunction("glCullParameterdvEXT", out p_glCullParameterdvEXT);
		LoadFunction("glCullParameterfvEXT", out p_glCullParameterfvEXT);
		LoadFunction("glLabelObjectEXT", out p_glLabelObjectEXT);
		LoadFunction("glGetObjectLabelEXT", out p_glGetObjectLabelEXT);
		LoadFunction("glInsertEventMarkerEXT", out p_glInsertEventMarkerEXT);
		LoadFunction("glPushGroupMarkerEXT", out p_glPushGroupMarkerEXT);
		LoadFunction("glPopGroupMarkerEXT", out p_glPopGroupMarkerEXT);
		LoadFunction("glDepthBoundsEXT", out p_glDepthBoundsEXT);
		LoadFunction("glMatrixLoadfEXT", out p_glMatrixLoadfEXT);
		LoadFunction("glMatrixLoaddEXT", out p_glMatrixLoaddEXT);
		LoadFunction("glMatrixMultfEXT", out p_glMatrixMultfEXT);
		LoadFunction("glMatrixMultdEXT", out p_glMatrixMultdEXT);
		LoadFunction("glMatrixLoadIdentityEXT", out p_glMatrixLoadIdentityEXT);
		LoadFunction("glMatrixRotatefEXT", out p_glMatrixRotatefEXT);
		LoadFunction("glMatrixRotatedEXT", out p_glMatrixRotatedEXT);
		LoadFunction("glMatrixScalefEXT", out p_glMatrixScalefEXT);
		LoadFunction("glMatrixScaledEXT", out p_glMatrixScaledEXT);
		LoadFunction("glMatrixTranslatefEXT", out p_glMatrixTranslatefEXT);
		LoadFunction("glMatrixTranslatedEXT", out p_glMatrixTranslatedEXT);
		LoadFunction("glMatrixFrustumEXT", out p_glMatrixFrustumEXT);
		LoadFunction("glMatrixOrthoEXT", out p_glMatrixOrthoEXT);
		LoadFunction("glMatrixPopEXT", out p_glMatrixPopEXT);
		LoadFunction("glMatrixPushEXT", out p_glMatrixPushEXT);
		LoadFunction("glClientAttribDefaultEXT", out p_glClientAttribDefaultEXT);
		LoadFunction("glPushClientAttribDefaultEXT", out p_glPushClientAttribDefaultEXT);
		LoadFunction("glTextureParameterfEXT", out p_glTextureParameterfEXT);
		LoadFunction("glTextureParameterfvEXT", out p_glTextureParameterfvEXT);
		LoadFunction("glTextureParameteriEXT", out p_glTextureParameteriEXT);
		LoadFunction("glTextureParameterivEXT", out p_glTextureParameterivEXT);
		LoadFunction("glTextureImage1DEXT", out p_glTextureImage1DEXT);
		LoadFunction("glTextureImage2DEXT", out p_glTextureImage2DEXT);
		LoadFunction("glTextureSubImage1DEXT", out p_glTextureSubImage1DEXT);
		LoadFunction("glTextureSubImage2DEXT", out p_glTextureSubImage2DEXT);
		LoadFunction("glCopyTextureImage1DEXT", out p_glCopyTextureImage1DEXT);
		LoadFunction("glCopyTextureImage2DEXT", out p_glCopyTextureImage2DEXT);
		LoadFunction("glCopyTextureSubImage1DEXT", out p_glCopyTextureSubImage1DEXT);
		LoadFunction("glCopyTextureSubImage2DEXT", out p_glCopyTextureSubImage2DEXT);
		LoadFunction("glGetTextureImageEXT", out p_glGetTextureImageEXT);
		LoadFunction("glGetTextureParameterfvEXT", out p_glGetTextureParameterfvEXT);
		LoadFunction("glGetTextureParameterivEXT", out p_glGetTextureParameterivEXT);
		LoadFunction("glGetTextureLevelParameterfvEXT", out p_glGetTextureLevelParameterfvEXT);
		LoadFunction("glGetTextureLevelParameterivEXT", out p_glGetTextureLevelParameterivEXT);
		LoadFunction("glTextureImage3DEXT", out p_glTextureImage3DEXT);
		LoadFunction("glTextureSubImage3DEXT", out p_glTextureSubImage3DEXT);
		LoadFunction("glCopyTextureSubImage3DEXT", out p_glCopyTextureSubImage3DEXT);
		LoadFunction("glBindMultiTextureEXT", out p_glBindMultiTextureEXT);
		LoadFunction("glMultiTexCoordPointerEXT", out p_glMultiTexCoordPointerEXT);
		LoadFunction("glMultiTexEnvfEXT", out p_glMultiTexEnvfEXT);
		LoadFunction("glMultiTexEnvfvEXT", out p_glMultiTexEnvfvEXT);
		LoadFunction("glMultiTexEnviEXT", out p_glMultiTexEnviEXT);
		LoadFunction("glMultiTexEnvivEXT", out p_glMultiTexEnvivEXT);
		LoadFunction("glMultiTexGendEXT", out p_glMultiTexGendEXT);
		LoadFunction("glMultiTexGendvEXT", out p_glMultiTexGendvEXT);
		LoadFunction("glMultiTexGenfEXT", out p_glMultiTexGenfEXT);
		LoadFunction("glMultiTexGenfvEXT", out p_glMultiTexGenfvEXT);
		LoadFunction("glMultiTexGeniEXT", out p_glMultiTexGeniEXT);
		LoadFunction("glMultiTexGenivEXT", out p_glMultiTexGenivEXT);
		LoadFunction("glGetMultiTexEnvfvEXT", out p_glGetMultiTexEnvfvEXT);
		LoadFunction("glGetMultiTexEnvivEXT", out p_glGetMultiTexEnvivEXT);
		LoadFunction("glGetMultiTexGendvEXT", out p_glGetMultiTexGendvEXT);
		LoadFunction("glGetMultiTexGenfvEXT", out p_glGetMultiTexGenfvEXT);
		LoadFunction("glGetMultiTexGenivEXT", out p_glGetMultiTexGenivEXT);
		LoadFunction("glMultiTexParameteriEXT", out p_glMultiTexParameteriEXT);
		LoadFunction("glMultiTexParameterivEXT", out p_glMultiTexParameterivEXT);
		LoadFunction("glMultiTexParameterfEXT", out p_glMultiTexParameterfEXT);
		LoadFunction("glMultiTexParameterfvEXT", out p_glMultiTexParameterfvEXT);
		LoadFunction("glMultiTexImage1DEXT", out p_glMultiTexImage1DEXT);
		LoadFunction("glMultiTexImage2DEXT", out p_glMultiTexImage2DEXT);
		LoadFunction("glMultiTexSubImage1DEXT", out p_glMultiTexSubImage1DEXT);
		LoadFunction("glMultiTexSubImage2DEXT", out p_glMultiTexSubImage2DEXT);
		LoadFunction("glCopyMultiTexImage1DEXT", out p_glCopyMultiTexImage1DEXT);
		LoadFunction("glCopyMultiTexImage2DEXT", out p_glCopyMultiTexImage2DEXT);
		LoadFunction("glCopyMultiTexSubImage1DEXT", out p_glCopyMultiTexSubImage1DEXT);
		LoadFunction("glCopyMultiTexSubImage2DEXT", out p_glCopyMultiTexSubImage2DEXT);
		LoadFunction("glGetMultiTexImageEXT", out p_glGetMultiTexImageEXT);
		LoadFunction("glGetMultiTexParameterfvEXT", out p_glGetMultiTexParameterfvEXT);
		LoadFunction("glGetMultiTexParameterivEXT", out p_glGetMultiTexParameterivEXT);
		LoadFunction("glGetMultiTexLevelParameterfvEXT", out p_glGetMultiTexLevelParameterfvEXT);
		LoadFunction("glGetMultiTexLevelParameterivEXT", out p_glGetMultiTexLevelParameterivEXT);
		LoadFunction("glMultiTexImage3DEXT", out p_glMultiTexImage3DEXT);
		LoadFunction("glMultiTexSubImage3DEXT", out p_glMultiTexSubImage3DEXT);
		LoadFunction("glCopyMultiTexSubImage3DEXT", out p_glCopyMultiTexSubImage3DEXT);
		LoadFunction("glEnableClientStateIndexedEXT", out p_glEnableClientStateIndexedEXT);
		LoadFunction("glDisableClientStateIndexedEXT", out p_glDisableClientStateIndexedEXT);
		LoadFunction("glGetFloatIndexedvEXT", out p_glGetFloatIndexedvEXT);
		LoadFunction("glGetDoubleIndexedvEXT", out p_glGetDoubleIndexedvEXT);
		LoadFunction("glGetPointerIndexedvEXT", out p_glGetPointerIndexedvEXT);
		LoadFunction("glEnableIndexedEXT", out p_glEnableIndexedEXT);
		LoadFunction("glDisableIndexedEXT", out p_glDisableIndexedEXT);
		LoadFunction("glIsEnabledIndexedEXT", out p_glIsEnabledIndexedEXT);
		LoadFunction("glGetIntegerIndexedvEXT", out p_glGetIntegerIndexedvEXT);
		LoadFunction("glGetBooleanIndexedvEXT", out p_glGetBooleanIndexedvEXT);
		LoadFunction("glCompressedTextureImage3DEXT", out p_glCompressedTextureImage3DEXT);
		LoadFunction("glCompressedTextureImage2DEXT", out p_glCompressedTextureImage2DEXT);
		LoadFunction("glCompressedTextureImage1DEXT", out p_glCompressedTextureImage1DEXT);
		LoadFunction("glCompressedTextureSubImage3DEXT", out p_glCompressedTextureSubImage3DEXT);
		LoadFunction("glCompressedTextureSubImage2DEXT", out p_glCompressedTextureSubImage2DEXT);
		LoadFunction("glCompressedTextureSubImage1DEXT", out p_glCompressedTextureSubImage1DEXT);
		LoadFunction("glGetCompressedTextureImageEXT", out p_glGetCompressedTextureImageEXT);
		LoadFunction("glCompressedMultiTexImage3DEXT", out p_glCompressedMultiTexImage3DEXT);
		LoadFunction("glCompressedMultiTexImage2DEXT", out p_glCompressedMultiTexImage2DEXT);
		LoadFunction("glCompressedMultiTexImage1DEXT", out p_glCompressedMultiTexImage1DEXT);
		LoadFunction("glCompressedMultiTexSubImage3DEXT", out p_glCompressedMultiTexSubImage3DEXT);
		LoadFunction("glCompressedMultiTexSubImage2DEXT", out p_glCompressedMultiTexSubImage2DEXT);
		LoadFunction("glCompressedMultiTexSubImage1DEXT", out p_glCompressedMultiTexSubImage1DEXT);
		LoadFunction("glGetCompressedMultiTexImageEXT", out p_glGetCompressedMultiTexImageEXT);
		LoadFunction("glMatrixLoadTransposefEXT", out p_glMatrixLoadTransposefEXT);
		LoadFunction("glMatrixLoadTransposedEXT", out p_glMatrixLoadTransposedEXT);
		LoadFunction("glMatrixMultTransposefEXT", out p_glMatrixMultTransposefEXT);
		LoadFunction("glMatrixMultTransposedEXT", out p_glMatrixMultTransposedEXT);
		LoadFunction("glNamedBufferDataEXT", out p_glNamedBufferDataEXT);
		LoadFunction("glNamedBufferSubDataEXT", out p_glNamedBufferSubDataEXT);
		LoadFunction("glMapNamedBufferEXT", out p_glMapNamedBufferEXT);
		LoadFunction("glUnmapNamedBufferEXT", out p_glUnmapNamedBufferEXT);
		LoadFunction("glGetNamedBufferParameterivEXT", out p_glGetNamedBufferParameterivEXT);
		LoadFunction("glGetNamedBufferPointervEXT", out p_glGetNamedBufferPointervEXT);
		LoadFunction("glGetNamedBufferSubDataEXT", out p_glGetNamedBufferSubDataEXT);
		LoadFunction("glProgramUniform1fEXT", out p_glProgramUniform1fEXT);
		LoadFunction("glProgramUniform2fEXT", out p_glProgramUniform2fEXT);
		LoadFunction("glProgramUniform3fEXT", out p_glProgramUniform3fEXT);
		LoadFunction("glProgramUniform4fEXT", out p_glProgramUniform4fEXT);
		LoadFunction("glProgramUniform1iEXT", out p_glProgramUniform1iEXT);
		LoadFunction("glProgramUniform2iEXT", out p_glProgramUniform2iEXT);
		LoadFunction("glProgramUniform3iEXT", out p_glProgramUniform3iEXT);
		LoadFunction("glProgramUniform4iEXT", out p_glProgramUniform4iEXT);
		LoadFunction("glProgramUniform1fvEXT", out p_glProgramUniform1fvEXT);
		LoadFunction("glProgramUniform2fvEXT", out p_glProgramUniform2fvEXT);
		LoadFunction("glProgramUniform3fvEXT", out p_glProgramUniform3fvEXT);
		LoadFunction("glProgramUniform4fvEXT", out p_glProgramUniform4fvEXT);
		LoadFunction("glProgramUniform1ivEXT", out p_glProgramUniform1ivEXT);
		LoadFunction("glProgramUniform2ivEXT", out p_glProgramUniform2ivEXT);
		LoadFunction("glProgramUniform3ivEXT", out p_glProgramUniform3ivEXT);
		LoadFunction("glProgramUniform4ivEXT", out p_glProgramUniform4ivEXT);
		LoadFunction("glProgramUniformMatrix2fvEXT", out p_glProgramUniformMatrix2fvEXT);
		LoadFunction("glProgramUniformMatrix3fvEXT", out p_glProgramUniformMatrix3fvEXT);
		LoadFunction("glProgramUniformMatrix4fvEXT", out p_glProgramUniformMatrix4fvEXT);
		LoadFunction("glProgramUniformMatrix2x3fvEXT", out p_glProgramUniformMatrix2x3fvEXT);
		LoadFunction("glProgramUniformMatrix3x2fvEXT", out p_glProgramUniformMatrix3x2fvEXT);
		LoadFunction("glProgramUniformMatrix2x4fvEXT", out p_glProgramUniformMatrix2x4fvEXT);
		LoadFunction("glProgramUniformMatrix4x2fvEXT", out p_glProgramUniformMatrix4x2fvEXT);
		LoadFunction("glProgramUniformMatrix3x4fvEXT", out p_glProgramUniformMatrix3x4fvEXT);
		LoadFunction("glProgramUniformMatrix4x3fvEXT", out p_glProgramUniformMatrix4x3fvEXT);
		LoadFunction("glTextureBufferEXT", out p_glTextureBufferEXT);
		LoadFunction("glMultiTexBufferEXT", out p_glMultiTexBufferEXT);
		LoadFunction("glTextureParameterIivEXT", out p_glTextureParameterIivEXT);
		LoadFunction("glTextureParameterIuivEXT", out p_glTextureParameterIuivEXT);
		LoadFunction("glGetTextureParameterIivEXT", out p_glGetTextureParameterIivEXT);
		LoadFunction("glGetTextureParameterIuivEXT", out p_glGetTextureParameterIuivEXT);
		LoadFunction("glMultiTexParameterIivEXT", out p_glMultiTexParameterIivEXT);
		LoadFunction("glMultiTexParameterIuivEXT", out p_glMultiTexParameterIuivEXT);
		LoadFunction("glGetMultiTexParameterIivEXT", out p_glGetMultiTexParameterIivEXT);
		LoadFunction("glGetMultiTexParameterIuivEXT", out p_glGetMultiTexParameterIuivEXT);
		LoadFunction("glProgramUniform1uiEXT", out p_glProgramUniform1uiEXT);
		LoadFunction("glProgramUniform2uiEXT", out p_glProgramUniform2uiEXT);
		LoadFunction("glProgramUniform3uiEXT", out p_glProgramUniform3uiEXT);
		LoadFunction("glProgramUniform4uiEXT", out p_glProgramUniform4uiEXT);
		LoadFunction("glProgramUniform1uivEXT", out p_glProgramUniform1uivEXT);
		LoadFunction("glProgramUniform2uivEXT", out p_glProgramUniform2uivEXT);
		LoadFunction("glProgramUniform3uivEXT", out p_glProgramUniform3uivEXT);
		LoadFunction("glProgramUniform4uivEXT", out p_glProgramUniform4uivEXT);
		LoadFunction("glNamedProgramLocalParameters4fvEXT", out p_glNamedProgramLocalParameters4fvEXT);
		LoadFunction("glNamedProgramLocalParameterI4iEXT", out p_glNamedProgramLocalParameterI4iEXT);
		LoadFunction("glNamedProgramLocalParameterI4ivEXT", out p_glNamedProgramLocalParameterI4ivEXT);
		LoadFunction("glNamedProgramLocalParametersI4ivEXT", out p_glNamedProgramLocalParametersI4ivEXT);
		LoadFunction("glNamedProgramLocalParameterI4uiEXT", out p_glNamedProgramLocalParameterI4uiEXT);
		LoadFunction("glNamedProgramLocalParameterI4uivEXT", out p_glNamedProgramLocalParameterI4uivEXT);
		LoadFunction("glNamedProgramLocalParametersI4uivEXT", out p_glNamedProgramLocalParametersI4uivEXT);
		LoadFunction("glGetNamedProgramLocalParameterIivEXT", out p_glGetNamedProgramLocalParameterIivEXT);
		LoadFunction("glGetNamedProgramLocalParameterIuivEXT", out p_glGetNamedProgramLocalParameterIuivEXT);
		LoadFunction("glEnableClientStateiEXT", out p_glEnableClientStateiEXT);
		LoadFunction("glDisableClientStateiEXT", out p_glDisableClientStateiEXT);
		LoadFunction("glGetFloati_vEXT", out p_glGetFloati_vEXT);
		LoadFunction("glGetDoublei_vEXT", out p_glGetDoublei_vEXT);
		LoadFunction("glGetPointeri_vEXT", out p_glGetPointeri_vEXT);
		LoadFunction("glNamedProgramStringEXT", out p_glNamedProgramStringEXT);
		LoadFunction("glNamedProgramLocalParameter4dEXT", out p_glNamedProgramLocalParameter4dEXT);
		LoadFunction("glNamedProgramLocalParameter4dvEXT", out p_glNamedProgramLocalParameter4dvEXT);
		LoadFunction("glNamedProgramLocalParameter4fEXT", out p_glNamedProgramLocalParameter4fEXT);
		LoadFunction("glNamedProgramLocalParameter4fvEXT", out p_glNamedProgramLocalParameter4fvEXT);
		LoadFunction("glGetNamedProgramLocalParameterdvEXT", out p_glGetNamedProgramLocalParameterdvEXT);
		LoadFunction("glGetNamedProgramLocalParameterfvEXT", out p_glGetNamedProgramLocalParameterfvEXT);
		LoadFunction("glGetNamedProgramivEXT", out p_glGetNamedProgramivEXT);
		LoadFunction("glGetNamedProgramStringEXT", out p_glGetNamedProgramStringEXT);
		LoadFunction("glNamedRenderbufferStorageEXT", out p_glNamedRenderbufferStorageEXT);
		LoadFunction("glGetNamedRenderbufferParameterivEXT", out p_glGetNamedRenderbufferParameterivEXT);
		LoadFunction("glNamedRenderbufferStorageMultisampleEXT", out p_glNamedRenderbufferStorageMultisampleEXT);
		LoadFunction("glNamedRenderbufferStorageMultisampleCoverageEXT", out p_glNamedRenderbufferStorageMultisampleCoverageEXT);
		LoadFunction("glCheckNamedFramebufferStatusEXT", out p_glCheckNamedFramebufferStatusEXT);
		LoadFunction("glNamedFramebufferTexture1DEXT", out p_glNamedFramebufferTexture1DEXT);
		LoadFunction("glNamedFramebufferTexture2DEXT", out p_glNamedFramebufferTexture2DEXT);
		LoadFunction("glNamedFramebufferTexture3DEXT", out p_glNamedFramebufferTexture3DEXT);
		LoadFunction("glNamedFramebufferRenderbufferEXT", out p_glNamedFramebufferRenderbufferEXT);
		LoadFunction("glGetNamedFramebufferAttachmentParameterivEXT", out p_glGetNamedFramebufferAttachmentParameterivEXT);
		LoadFunction("glGenerateTextureMipmapEXT", out p_glGenerateTextureMipmapEXT);
		LoadFunction("glGenerateMultiTexMipmapEXT", out p_glGenerateMultiTexMipmapEXT);
		LoadFunction("glFramebufferDrawBufferEXT", out p_glFramebufferDrawBufferEXT);
		LoadFunction("glFramebufferDrawBuffersEXT", out p_glFramebufferDrawBuffersEXT);
		LoadFunction("glFramebufferReadBufferEXT", out p_glFramebufferReadBufferEXT);
		LoadFunction("glGetFramebufferParameterivEXT", out p_glGetFramebufferParameterivEXT);
		LoadFunction("glNamedCopyBufferSubDataEXT", out p_glNamedCopyBufferSubDataEXT);
		LoadFunction("glNamedFramebufferTextureEXT", out p_glNamedFramebufferTextureEXT);
		LoadFunction("glNamedFramebufferTextureLayerEXT", out p_glNamedFramebufferTextureLayerEXT);
		LoadFunction("glNamedFramebufferTextureFaceEXT", out p_glNamedFramebufferTextureFaceEXT);
		LoadFunction("glTextureRenderbufferEXT", out p_glTextureRenderbufferEXT);
		LoadFunction("glMultiTexRenderbufferEXT", out p_glMultiTexRenderbufferEXT);
		LoadFunction("glVertexArrayVertexOffsetEXT", out p_glVertexArrayVertexOffsetEXT);
		LoadFunction("glVertexArrayColorOffsetEXT", out p_glVertexArrayColorOffsetEXT);
		LoadFunction("glVertexArrayEdgeFlagOffsetEXT", out p_glVertexArrayEdgeFlagOffsetEXT);
		LoadFunction("glVertexArrayIndexOffsetEXT", out p_glVertexArrayIndexOffsetEXT);
		LoadFunction("glVertexArrayNormalOffsetEXT", out p_glVertexArrayNormalOffsetEXT);
		LoadFunction("glVertexArrayTexCoordOffsetEXT", out p_glVertexArrayTexCoordOffsetEXT);
		LoadFunction("glVertexArrayMultiTexCoordOffsetEXT", out p_glVertexArrayMultiTexCoordOffsetEXT);
		LoadFunction("glVertexArrayFogCoordOffsetEXT", out p_glVertexArrayFogCoordOffsetEXT);
		LoadFunction("glVertexArraySecondaryColorOffsetEXT", out p_glVertexArraySecondaryColorOffsetEXT);
		LoadFunction("glVertexArrayVertexAttribOffsetEXT", out p_glVertexArrayVertexAttribOffsetEXT);
		LoadFunction("glVertexArrayVertexAttribIOffsetEXT", out p_glVertexArrayVertexAttribIOffsetEXT);
		LoadFunction("glEnableVertexArrayEXT", out p_glEnableVertexArrayEXT);
		LoadFunction("glDisableVertexArrayEXT", out p_glDisableVertexArrayEXT);
		LoadFunction("glEnableVertexArrayAttribEXT", out p_glEnableVertexArrayAttribEXT);
		LoadFunction("glDisableVertexArrayAttribEXT", out p_glDisableVertexArrayAttribEXT);
		LoadFunction("glGetVertexArrayIntegervEXT", out p_glGetVertexArrayIntegervEXT);
		LoadFunction("glGetVertexArrayPointervEXT", out p_glGetVertexArrayPointervEXT);
		LoadFunction("glGetVertexArrayIntegeri_vEXT", out p_glGetVertexArrayIntegeri_vEXT);
		LoadFunction("glGetVertexArrayPointeri_vEXT", out p_glGetVertexArrayPointeri_vEXT);
		LoadFunction("glMapNamedBufferRangeEXT", out p_glMapNamedBufferRangeEXT);
		LoadFunction("glFlushMappedNamedBufferRangeEXT", out p_glFlushMappedNamedBufferRangeEXT);
		LoadFunction("glNamedBufferStorageEXT", out p_glNamedBufferStorageEXT);
		LoadFunction("glClearNamedBufferDataEXT", out p_glClearNamedBufferDataEXT);
		LoadFunction("glClearNamedBufferSubDataEXT", out p_glClearNamedBufferSubDataEXT);
		LoadFunction("glNamedFramebufferParameteriEXT", out p_glNamedFramebufferParameteriEXT);
		LoadFunction("glGetNamedFramebufferParameterivEXT", out p_glGetNamedFramebufferParameterivEXT);
		LoadFunction("glProgramUniform1dEXT", out p_glProgramUniform1dEXT);
		LoadFunction("glProgramUniform2dEXT", out p_glProgramUniform2dEXT);
		LoadFunction("glProgramUniform3dEXT", out p_glProgramUniform3dEXT);
		LoadFunction("glProgramUniform4dEXT", out p_glProgramUniform4dEXT);
		LoadFunction("glProgramUniform1dvEXT", out p_glProgramUniform1dvEXT);
		LoadFunction("glProgramUniform2dvEXT", out p_glProgramUniform2dvEXT);
		LoadFunction("glProgramUniform3dvEXT", out p_glProgramUniform3dvEXT);
		LoadFunction("glProgramUniform4dvEXT", out p_glProgramUniform4dvEXT);
		LoadFunction("glProgramUniformMatrix2dvEXT", out p_glProgramUniformMatrix2dvEXT);
		LoadFunction("glProgramUniformMatrix3dvEXT", out p_glProgramUniformMatrix3dvEXT);
		LoadFunction("glProgramUniformMatrix4dvEXT", out p_glProgramUniformMatrix4dvEXT);
		LoadFunction("glProgramUniformMatrix2x3dvEXT", out p_glProgramUniformMatrix2x3dvEXT);
		LoadFunction("glProgramUniformMatrix2x4dvEXT", out p_glProgramUniformMatrix2x4dvEXT);
		LoadFunction("glProgramUniformMatrix3x2dvEXT", out p_glProgramUniformMatrix3x2dvEXT);
		LoadFunction("glProgramUniformMatrix3x4dvEXT", out p_glProgramUniformMatrix3x4dvEXT);
		LoadFunction("glProgramUniformMatrix4x2dvEXT", out p_glProgramUniformMatrix4x2dvEXT);
		LoadFunction("glProgramUniformMatrix4x3dvEXT", out p_glProgramUniformMatrix4x3dvEXT);
		LoadFunction("glTextureBufferRangeEXT", out p_glTextureBufferRangeEXT);
		LoadFunction("glTextureStorage1DEXT", out p_glTextureStorage1DEXT);
		LoadFunction("glTextureStorage2DEXT", out p_glTextureStorage2DEXT);
		LoadFunction("glTextureStorage3DEXT", out p_glTextureStorage3DEXT);
		LoadFunction("glTextureStorage2DMultisampleEXT", out p_glTextureStorage2DMultisampleEXT);
		LoadFunction("glTextureStorage3DMultisampleEXT", out p_glTextureStorage3DMultisampleEXT);
		LoadFunction("glVertexArrayBindVertexBufferEXT", out p_glVertexArrayBindVertexBufferEXT);
		LoadFunction("glVertexArrayVertexAttribFormatEXT", out p_glVertexArrayVertexAttribFormatEXT);
		LoadFunction("glVertexArrayVertexAttribIFormatEXT", out p_glVertexArrayVertexAttribIFormatEXT);
		LoadFunction("glVertexArrayVertexAttribLFormatEXT", out p_glVertexArrayVertexAttribLFormatEXT);
		LoadFunction("glVertexArrayVertexAttribBindingEXT", out p_glVertexArrayVertexAttribBindingEXT);
		LoadFunction("glVertexArrayVertexBindingDivisorEXT", out p_glVertexArrayVertexBindingDivisorEXT);
		LoadFunction("glVertexArrayVertexAttribLOffsetEXT", out p_glVertexArrayVertexAttribLOffsetEXT);
		LoadFunction("glTexturePageCommitmentEXT", out p_glTexturePageCommitmentEXT);
		LoadFunction("glVertexArrayVertexAttribDivisorEXT", out p_glVertexArrayVertexAttribDivisorEXT);
		LoadFunction("glDiscardFramebufferEXT", out p_glDiscardFramebufferEXT);
		LoadFunction("glGenQueriesEXT", out p_glGenQueriesEXT);
		LoadFunction("glDeleteQueriesEXT", out p_glDeleteQueriesEXT);
		LoadFunction("glIsQueryEXT", out p_glIsQueryEXT);
		LoadFunction("glBeginQueryEXT", out p_glBeginQueryEXT);
		LoadFunction("glEndQueryEXT", out p_glEndQueryEXT);
		LoadFunction("glQueryCounterEXT", out p_glQueryCounterEXT);
		LoadFunction("glGetQueryivEXT", out p_glGetQueryivEXT);
		LoadFunction("glGetQueryObjectivEXT", out p_glGetQueryObjectivEXT);
		LoadFunction("glGetQueryObjectuivEXT", out p_glGetQueryObjectuivEXT);
		LoadFunction("glGetQueryObjecti64vEXT", out p_glGetQueryObjecti64vEXT);
		LoadFunction("glGetQueryObjectui64vEXT", out p_glGetQueryObjectui64vEXT);
		LoadFunction("glDrawBuffersEXT", out p_glDrawBuffersEXT);
		LoadFunction("glColorMaskIndexedEXT", out p_glColorMaskIndexedEXT);
		LoadFunction("glEnableiEXT", out p_glEnableiEXT);
		LoadFunction("glDisableiEXT", out p_glDisableiEXT);
		LoadFunction("glBlendEquationiEXT", out p_glBlendEquationiEXT);
		LoadFunction("glBlendEquationSeparateiEXT", out p_glBlendEquationSeparateiEXT);
		LoadFunction("glBlendFunciEXT", out p_glBlendFunciEXT);
		LoadFunction("glBlendFuncSeparateiEXT", out p_glBlendFuncSeparateiEXT);
		LoadFunction("glColorMaskiEXT", out p_glColorMaskiEXT);
		LoadFunction("glIsEnablediEXT", out p_glIsEnablediEXT);
		LoadFunction("glDrawElementsBaseVertexEXT", out p_glDrawElementsBaseVertexEXT);
		LoadFunction("glDrawRangeElementsBaseVertexEXT", out p_glDrawRangeElementsBaseVertexEXT);
		LoadFunction("glDrawElementsInstancedBaseVertexEXT", out p_glDrawElementsInstancedBaseVertexEXT);
		LoadFunction("glMultiDrawElementsBaseVertexEXT", out p_glMultiDrawElementsBaseVertexEXT);
		LoadFunction("glDrawArraysInstancedEXT", out p_glDrawArraysInstancedEXT);
		LoadFunction("glDrawElementsInstancedEXT", out p_glDrawElementsInstancedEXT);
		LoadFunction("glDrawRangeElementsEXT", out p_glDrawRangeElementsEXT);
		LoadFunction("glDrawTransformFeedbackEXT", out p_glDrawTransformFeedbackEXT);
		LoadFunction("glDrawTransformFeedbackInstancedEXT", out p_glDrawTransformFeedbackInstancedEXT);
		LoadFunction("glBufferStorageExternalEXT", out p_glBufferStorageExternalEXT);
		LoadFunction("glNamedBufferStorageExternalEXT", out p_glNamedBufferStorageExternalEXT);
		LoadFunction("glFogCoordfEXT", out p_glFogCoordfEXT);
		LoadFunction("glFogCoordfvEXT", out p_glFogCoordfvEXT);
		LoadFunction("glFogCoorddEXT", out p_glFogCoorddEXT);
		LoadFunction("glFogCoorddvEXT", out p_glFogCoorddvEXT);
		LoadFunction("glFogCoordPointerEXT", out p_glFogCoordPointerEXT);
		LoadFunction("glBlitFramebufferEXT", out p_glBlitFramebufferEXT);
		LoadFunction("glRenderbufferStorageMultisampleEXT", out p_glRenderbufferStorageMultisampleEXT);
		LoadFunction("glIsRenderbufferEXT", out p_glIsRenderbufferEXT);
		LoadFunction("glBindRenderbufferEXT", out p_glBindRenderbufferEXT);
		LoadFunction("glDeleteRenderbuffersEXT", out p_glDeleteRenderbuffersEXT);
		LoadFunction("glGenRenderbuffersEXT", out p_glGenRenderbuffersEXT);
		LoadFunction("glRenderbufferStorageEXT", out p_glRenderbufferStorageEXT);
		LoadFunction("glGetRenderbufferParameterivEXT", out p_glGetRenderbufferParameterivEXT);
		LoadFunction("glIsFramebufferEXT", out p_glIsFramebufferEXT);
		LoadFunction("glBindFramebufferEXT", out p_glBindFramebufferEXT);
		LoadFunction("glDeleteFramebuffersEXT", out p_glDeleteFramebuffersEXT);
		LoadFunction("glGenFramebuffersEXT", out p_glGenFramebuffersEXT);
		LoadFunction("glCheckFramebufferStatusEXT", out p_glCheckFramebufferStatusEXT);
		LoadFunction("glFramebufferTexture1DEXT", out p_glFramebufferTexture1DEXT);
		LoadFunction("glFramebufferTexture2DEXT", out p_glFramebufferTexture2DEXT);
		LoadFunction("glFramebufferTexture3DEXT", out p_glFramebufferTexture3DEXT);
		LoadFunction("glFramebufferRenderbufferEXT", out p_glFramebufferRenderbufferEXT);
		LoadFunction("glGetFramebufferAttachmentParameterivEXT", out p_glGetFramebufferAttachmentParameterivEXT);
		LoadFunction("glGenerateMipmapEXT", out p_glGenerateMipmapEXT);
		LoadFunction("glFramebufferTextureEXT", out p_glFramebufferTextureEXT);
		LoadFunction("glProgramParameteriEXT", out p_glProgramParameteriEXT);
		LoadFunction("glProgramEnvParameters4fvEXT", out p_glProgramEnvParameters4fvEXT);
		LoadFunction("glProgramLocalParameters4fvEXT", out p_glProgramLocalParameters4fvEXT);
		LoadFunction("glGetUniformuivEXT", out p_glGetUniformuivEXT);
		LoadFunction("glGetFragDataLocationEXT", out p_glGetFragDataLocationEXT);
		LoadFunction("glUniform1uiEXT", out p_glUniform1uiEXT);
		LoadFunction("glUniform2uiEXT", out p_glUniform2uiEXT);
		LoadFunction("glUniform3uiEXT", out p_glUniform3uiEXT);
		LoadFunction("glUniform4uiEXT", out p_glUniform4uiEXT);
		LoadFunction("glUniform1uivEXT", out p_glUniform1uivEXT);
		LoadFunction("glUniform2uivEXT", out p_glUniform2uivEXT);
		LoadFunction("glUniform3uivEXT", out p_glUniform3uivEXT);
		LoadFunction("glUniform4uivEXT", out p_glUniform4uivEXT);
		LoadFunction("glGetHistogramEXT", out p_glGetHistogramEXT);
		LoadFunction("glGetHistogramParameterfvEXT", out p_glGetHistogramParameterfvEXT);
		LoadFunction("glGetHistogramParameterivEXT", out p_glGetHistogramParameterivEXT);
		LoadFunction("glGetMinmaxEXT", out p_glGetMinmaxEXT);
		LoadFunction("glGetMinmaxParameterfvEXT", out p_glGetMinmaxParameterfvEXT);
		LoadFunction("glGetMinmaxParameterivEXT", out p_glGetMinmaxParameterivEXT);
		LoadFunction("glHistogramEXT", out p_glHistogramEXT);
		LoadFunction("glMinmaxEXT", out p_glMinmaxEXT);
		LoadFunction("glResetHistogramEXT", out p_glResetHistogramEXT);
		LoadFunction("glResetMinmaxEXT", out p_glResetMinmaxEXT);
		LoadFunction("glIndexFuncEXT", out p_glIndexFuncEXT);
		LoadFunction("glIndexMaterialEXT", out p_glIndexMaterialEXT);
		LoadFunction("glVertexAttribDivisorEXT", out p_glVertexAttribDivisorEXT);
		LoadFunction("glApplyTextureEXT", out p_glApplyTextureEXT);
		LoadFunction("glTextureLightEXT", out p_glTextureLightEXT);
		LoadFunction("glTextureMaterialEXT", out p_glTextureMaterialEXT);
		LoadFunction("glMapBufferRangeEXT", out p_glMapBufferRangeEXT);
		LoadFunction("glFlushMappedBufferRangeEXT", out p_glFlushMappedBufferRangeEXT);
		LoadFunction("glGetUnsignedBytevEXT", out p_glGetUnsignedBytevEXT);
		LoadFunction("glGetUnsignedBytei_vEXT", out p_glGetUnsignedBytei_vEXT);
		LoadFunction("glDeleteMemoryObjectsEXT", out p_glDeleteMemoryObjectsEXT);
		LoadFunction("glIsMemoryObjectEXT", out p_glIsMemoryObjectEXT);
		LoadFunction("glCreateMemoryObjectsEXT", out p_glCreateMemoryObjectsEXT);
		LoadFunction("glMemoryObjectParameterivEXT", out p_glMemoryObjectParameterivEXT);
		LoadFunction("glGetMemoryObjectParameterivEXT", out p_glGetMemoryObjectParameterivEXT);
		LoadFunction("glTexStorageMem2DEXT", out p_glTexStorageMem2DEXT);
		LoadFunction("glTexStorageMem2DMultisampleEXT", out p_glTexStorageMem2DMultisampleEXT);
		LoadFunction("glTexStorageMem3DEXT", out p_glTexStorageMem3DEXT);
		LoadFunction("glTexStorageMem3DMultisampleEXT", out p_glTexStorageMem3DMultisampleEXT);
		LoadFunction("glBufferStorageMemEXT", out p_glBufferStorageMemEXT);
		LoadFunction("glTextureStorageMem2DEXT", out p_glTextureStorageMem2DEXT);
		LoadFunction("glTextureStorageMem2DMultisampleEXT", out p_glTextureStorageMem2DMultisampleEXT);
		LoadFunction("glTextureStorageMem3DEXT", out p_glTextureStorageMem3DEXT);
		LoadFunction("glTextureStorageMem3DMultisampleEXT", out p_glTextureStorageMem3DMultisampleEXT);
		LoadFunction("glNamedBufferStorageMemEXT", out p_glNamedBufferStorageMemEXT);
		LoadFunction("glTexStorageMem1DEXT", out p_glTexStorageMem1DEXT);
		LoadFunction("glTextureStorageMem1DEXT", out p_glTextureStorageMem1DEXT);
		LoadFunction("glImportMemoryFdEXT", out p_glImportMemoryFdEXT);
		LoadFunction("glImportMemoryWin32HandleEXT", out p_glImportMemoryWin32HandleEXT);
		LoadFunction("glImportMemoryWin32NameEXT", out p_glImportMemoryWin32NameEXT);
		LoadFunction("glMultiDrawArraysEXT", out p_glMultiDrawArraysEXT);
		LoadFunction("glMultiDrawElementsEXT", out p_glMultiDrawElementsEXT);
		LoadFunction("glMultiDrawArraysIndirectEXT", out p_glMultiDrawArraysIndirectEXT);
		LoadFunction("glMultiDrawElementsIndirectEXT", out p_glMultiDrawElementsIndirectEXT);
		LoadFunction("glSampleMaskEXT", out p_glSampleMaskEXT);
		LoadFunction("glSamplePatternEXT", out p_glSamplePatternEXT);
		LoadFunction("glFramebufferTexture2DMultisampleEXT", out p_glFramebufferTexture2DMultisampleEXT);
		LoadFunction("glReadBufferIndexedEXT", out p_glReadBufferIndexedEXT);
		LoadFunction("glDrawBuffersIndexedEXT", out p_glDrawBuffersIndexedEXT);
		LoadFunction("glGetIntegeri_vEXT", out p_glGetIntegeri_vEXT);
		LoadFunction("glColorTableEXT", out p_glColorTableEXT);
		LoadFunction("glGetColorTableEXT", out p_glGetColorTableEXT);
		LoadFunction("glGetColorTableParameterivEXT", out p_glGetColorTableParameterivEXT);
		LoadFunction("glGetColorTableParameterfvEXT", out p_glGetColorTableParameterfvEXT);
		LoadFunction("glPixelTransformParameteriEXT", out p_glPixelTransformParameteriEXT);
		LoadFunction("glPixelTransformParameterfEXT", out p_glPixelTransformParameterfEXT);
		LoadFunction("glPixelTransformParameterivEXT", out p_glPixelTransformParameterivEXT);
		LoadFunction("glPixelTransformParameterfvEXT", out p_glPixelTransformParameterfvEXT);
		LoadFunction("glGetPixelTransformParameterivEXT", out p_glGetPixelTransformParameterivEXT);
		LoadFunction("glGetPixelTransformParameterfvEXT", out p_glGetPixelTransformParameterfvEXT);
		LoadFunction("glPointParameterfEXT", out p_glPointParameterfEXT);
		LoadFunction("glPointParameterfvEXT", out p_glPointParameterfvEXT);
		LoadFunction("glPolygonOffsetEXT", out p_glPolygonOffsetEXT);
		LoadFunction("glPolygonOffsetClampEXT", out p_glPolygonOffsetClampEXT);
		LoadFunction("glPrimitiveBoundingBoxEXT", out p_glPrimitiveBoundingBoxEXT);
		LoadFunction("glProvokingVertexEXT", out p_glProvokingVertexEXT);
		LoadFunction("glRasterSamplesEXT", out p_glRasterSamplesEXT);
		LoadFunction("glGetGraphicsResetStatusEXT", out p_glGetGraphicsResetStatusEXT);
		LoadFunction("glReadnPixelsEXT", out p_glReadnPixelsEXT);
		LoadFunction("glGetnUniformfvEXT", out p_glGetnUniformfvEXT);
		LoadFunction("glGetnUniformivEXT", out p_glGetnUniformivEXT);
		LoadFunction("glGenSemaphoresEXT", out p_glGenSemaphoresEXT);
		LoadFunction("glDeleteSemaphoresEXT", out p_glDeleteSemaphoresEXT);
		LoadFunction("glIsSemaphoreEXT", out p_glIsSemaphoreEXT);
		LoadFunction("glSemaphoreParameterui64vEXT", out p_glSemaphoreParameterui64vEXT);
		LoadFunction("glGetSemaphoreParameterui64vEXT", out p_glGetSemaphoreParameterui64vEXT);
		LoadFunction("glWaitSemaphoreEXT", out p_glWaitSemaphoreEXT);
		LoadFunction("glSignalSemaphoreEXT", out p_glSignalSemaphoreEXT);
		LoadFunction("glImportSemaphoreFdEXT", out p_glImportSemaphoreFdEXT);
		LoadFunction("glImportSemaphoreWin32HandleEXT", out p_glImportSemaphoreWin32HandleEXT);
		LoadFunction("glImportSemaphoreWin32NameEXT", out p_glImportSemaphoreWin32NameEXT);
		LoadFunction("glSecondaryColor3bEXT", out p_glSecondaryColor3bEXT);
		LoadFunction("glSecondaryColor3bvEXT", out p_glSecondaryColor3bvEXT);
		LoadFunction("glSecondaryColor3dEXT", out p_glSecondaryColor3dEXT);
		LoadFunction("glSecondaryColor3dvEXT", out p_glSecondaryColor3dvEXT);
		LoadFunction("glSecondaryColor3fEXT", out p_glSecondaryColor3fEXT);
		LoadFunction("glSecondaryColor3fvEXT", out p_glSecondaryColor3fvEXT);
		LoadFunction("glSecondaryColor3iEXT", out p_glSecondaryColor3iEXT);
		LoadFunction("glSecondaryColor3ivEXT", out p_glSecondaryColor3ivEXT);
		LoadFunction("glSecondaryColor3sEXT", out p_glSecondaryColor3sEXT);
		LoadFunction("glSecondaryColor3svEXT", out p_glSecondaryColor3svEXT);
		LoadFunction("glSecondaryColor3ubEXT", out p_glSecondaryColor3ubEXT);
		LoadFunction("glSecondaryColor3ubvEXT", out p_glSecondaryColor3ubvEXT);
		LoadFunction("glSecondaryColor3uiEXT", out p_glSecondaryColor3uiEXT);
		LoadFunction("glSecondaryColor3uivEXT", out p_glSecondaryColor3uivEXT);
		LoadFunction("glSecondaryColor3usEXT", out p_glSecondaryColor3usEXT);
		LoadFunction("glSecondaryColor3usvEXT", out p_glSecondaryColor3usvEXT);
		LoadFunction("glSecondaryColorPointerEXT", out p_glSecondaryColorPointerEXT);
		LoadFunction("glUseShaderProgramEXT", out p_glUseShaderProgramEXT);
		LoadFunction("glActiveProgramEXT", out p_glActiveProgramEXT);
		LoadFunction("glCreateShaderProgramEXT", out p_glCreateShaderProgramEXT);
		LoadFunction("glActiveShaderProgramEXT", out p_glActiveShaderProgramEXT);
		LoadFunction("glBindProgramPipelineEXT", out p_glBindProgramPipelineEXT);
		LoadFunction("glCreateShaderProgramvEXT", out p_glCreateShaderProgramvEXT);
		LoadFunction("glDeleteProgramPipelinesEXT", out p_glDeleteProgramPipelinesEXT);
		LoadFunction("glGenProgramPipelinesEXT", out p_glGenProgramPipelinesEXT);
		LoadFunction("glGetProgramPipelineInfoLogEXT", out p_glGetProgramPipelineInfoLogEXT);
		LoadFunction("glGetProgramPipelineivEXT", out p_glGetProgramPipelineivEXT);
		LoadFunction("glIsProgramPipelineEXT", out p_glIsProgramPipelineEXT);
		LoadFunction("glUseProgramStagesEXT", out p_glUseProgramStagesEXT);
		LoadFunction("glValidateProgramPipelineEXT", out p_glValidateProgramPipelineEXT);
		LoadFunction("glFramebufferFetchBarrierEXT", out p_glFramebufferFetchBarrierEXT);
		LoadFunction("glBindImageTextureEXT", out p_glBindImageTextureEXT);
		LoadFunction("glMemoryBarrierEXT", out p_glMemoryBarrierEXT);
		LoadFunction("glFramebufferPixelLocalStorageSizeEXT", out p_glFramebufferPixelLocalStorageSizeEXT);
		LoadFunction("glGetFramebufferPixelLocalStorageSizeEXT", out p_glGetFramebufferPixelLocalStorageSizeEXT);
		LoadFunction("glClearPixelLocalStorageuiEXT", out p_glClearPixelLocalStorageuiEXT);
		LoadFunction("glTexPageCommitmentEXT", out p_glTexPageCommitmentEXT);
		LoadFunction("glStencilClearTagEXT", out p_glStencilClearTagEXT);
		LoadFunction("glActiveStencilFaceEXT", out p_glActiveStencilFaceEXT);
		LoadFunction("glTexSubImage1DEXT", out p_glTexSubImage1DEXT);
		LoadFunction("glTexSubImage2DEXT", out p_glTexSubImage2DEXT);
		LoadFunction("glPatchParameteriEXT", out p_glPatchParameteriEXT);
		LoadFunction("glTexImage3DEXT", out p_glTexImage3DEXT);
		LoadFunction("glTexSubImage3DEXT", out p_glTexSubImage3DEXT);
		LoadFunction("glFramebufferTextureLayerEXT", out p_glFramebufferTextureLayerEXT);
		LoadFunction("glTexParameterIivEXT", out p_glTexParameterIivEXT);
		LoadFunction("glTexParameterIuivEXT", out p_glTexParameterIuivEXT);
		LoadFunction("glGetTexParameterIivEXT", out p_glGetTexParameterIivEXT);
		LoadFunction("glGetTexParameterIuivEXT", out p_glGetTexParameterIuivEXT);
		LoadFunction("glSamplerParameterIivEXT", out p_glSamplerParameterIivEXT);
		LoadFunction("glSamplerParameterIuivEXT", out p_glSamplerParameterIuivEXT);
		LoadFunction("glGetSamplerParameterIivEXT", out p_glGetSamplerParameterIivEXT);
		LoadFunction("glGetSamplerParameterIuivEXT", out p_glGetSamplerParameterIuivEXT);
		LoadFunction("glTexBufferEXT", out p_glTexBufferEXT);
		LoadFunction("glTexBufferRangeEXT", out p_glTexBufferRangeEXT);
		LoadFunction("glClearColorIiEXT", out p_glClearColorIiEXT);
		LoadFunction("glClearColorIuiEXT", out p_glClearColorIuiEXT);
		LoadFunction("glAreTexturesResidentEXT", out p_glAreTexturesResidentEXT);
		LoadFunction("glBindTextureEXT", out p_glBindTextureEXT);
		LoadFunction("glDeleteTexturesEXT", out p_glDeleteTexturesEXT);
		LoadFunction("glGenTexturesEXT", out p_glGenTexturesEXT);
		LoadFunction("glIsTextureEXT", out p_glIsTextureEXT);
		LoadFunction("glPrioritizeTexturesEXT", out p_glPrioritizeTexturesEXT);
		LoadFunction("glTextureNormalEXT", out p_glTextureNormalEXT);
		LoadFunction("glTexStorage1DEXT", out p_glTexStorage1DEXT);
		LoadFunction("glTexStorage2DEXT", out p_glTexStorage2DEXT);
		LoadFunction("glTexStorage3DEXT", out p_glTexStorage3DEXT);
		LoadFunction("glTextureViewEXT", out p_glTextureViewEXT);
		LoadFunction("glBeginTransformFeedbackEXT", out p_glBeginTransformFeedbackEXT);
		LoadFunction("glEndTransformFeedbackEXT", out p_glEndTransformFeedbackEXT);
		LoadFunction("glBindBufferRangeEXT", out p_glBindBufferRangeEXT);
		LoadFunction("glBindBufferOffsetEXT", out p_glBindBufferOffsetEXT);
		LoadFunction("glBindBufferBaseEXT", out p_glBindBufferBaseEXT);
		LoadFunction("glTransformFeedbackVaryingsEXT", out p_glTransformFeedbackVaryingsEXT);
		LoadFunction("glGetTransformFeedbackVaryingEXT", out p_glGetTransformFeedbackVaryingEXT);
		LoadFunction("glArrayElementEXT", out p_glArrayElementEXT);
		LoadFunction("glColorPointerEXT", out p_glColorPointerEXT);
		LoadFunction("glDrawArraysEXT", out p_glDrawArraysEXT);
		LoadFunction("glEdgeFlagPointerEXT", out p_glEdgeFlagPointerEXT);
		LoadFunction("glGetPointervEXT", out p_glGetPointervEXT);
		LoadFunction("glIndexPointerEXT", out p_glIndexPointerEXT);
		LoadFunction("glNormalPointerEXT", out p_glNormalPointerEXT);
		LoadFunction("glTexCoordPointerEXT", out p_glTexCoordPointerEXT);
		LoadFunction("glVertexPointerEXT", out p_glVertexPointerEXT);
		LoadFunction("glVertexAttribL1dEXT", out p_glVertexAttribL1dEXT);
		LoadFunction("glVertexAttribL2dEXT", out p_glVertexAttribL2dEXT);
		LoadFunction("glVertexAttribL3dEXT", out p_glVertexAttribL3dEXT);
		LoadFunction("glVertexAttribL4dEXT", out p_glVertexAttribL4dEXT);
		LoadFunction("glVertexAttribL1dvEXT", out p_glVertexAttribL1dvEXT);
		LoadFunction("glVertexAttribL2dvEXT", out p_glVertexAttribL2dvEXT);
		LoadFunction("glVertexAttribL3dvEXT", out p_glVertexAttribL3dvEXT);
		LoadFunction("glVertexAttribL4dvEXT", out p_glVertexAttribL4dvEXT);
		LoadFunction("glVertexAttribLPointerEXT", out p_glVertexAttribLPointerEXT);
		LoadFunction("glGetVertexAttribLdvEXT", out p_glGetVertexAttribLdvEXT);
		LoadFunction("glBeginVertexShaderEXT", out p_glBeginVertexShaderEXT);
		LoadFunction("glEndVertexShaderEXT", out p_glEndVertexShaderEXT);
		LoadFunction("glBindVertexShaderEXT", out p_glBindVertexShaderEXT);
		LoadFunction("glGenVertexShadersEXT", out p_glGenVertexShadersEXT);
		LoadFunction("glDeleteVertexShaderEXT", out p_glDeleteVertexShaderEXT);
		LoadFunction("glShaderOp1EXT", out p_glShaderOp1EXT);
		LoadFunction("glShaderOp2EXT", out p_glShaderOp2EXT);
		LoadFunction("glShaderOp3EXT", out p_glShaderOp3EXT);
		LoadFunction("glSwizzleEXT", out p_glSwizzleEXT);
		LoadFunction("glWriteMaskEXT", out p_glWriteMaskEXT);
		LoadFunction("glInsertComponentEXT", out p_glInsertComponentEXT);
		LoadFunction("glExtractComponentEXT", out p_glExtractComponentEXT);
		LoadFunction("glGenSymbolsEXT", out p_glGenSymbolsEXT);
		LoadFunction("glSetInvariantEXT", out p_glSetInvariantEXT);
		LoadFunction("glSetLocalConstantEXT", out p_glSetLocalConstantEXT);
		LoadFunction("glVariantbvEXT", out p_glVariantbvEXT);
		LoadFunction("glVariantsvEXT", out p_glVariantsvEXT);
		LoadFunction("glVariantivEXT", out p_glVariantivEXT);
		LoadFunction("glVariantfvEXT", out p_glVariantfvEXT);
		LoadFunction("glVariantdvEXT", out p_glVariantdvEXT);
		LoadFunction("glVariantubvEXT", out p_glVariantubvEXT);
		LoadFunction("glVariantusvEXT", out p_glVariantusvEXT);
		LoadFunction("glVariantuivEXT", out p_glVariantuivEXT);
		LoadFunction("glVariantPointerEXT", out p_glVariantPointerEXT);
		LoadFunction("glEnableVariantClientStateEXT", out p_glEnableVariantClientStateEXT);
		LoadFunction("glDisableVariantClientStateEXT", out p_glDisableVariantClientStateEXT);
		LoadFunction("glBindLightParameterEXT", out p_glBindLightParameterEXT);
		LoadFunction("glBindMaterialParameterEXT", out p_glBindMaterialParameterEXT);
		LoadFunction("glBindTexGenParameterEXT", out p_glBindTexGenParameterEXT);
		LoadFunction("glBindTextureUnitParameterEXT", out p_glBindTextureUnitParameterEXT);
		LoadFunction("glBindParameterEXT", out p_glBindParameterEXT);
		LoadFunction("glIsVariantEnabledEXT", out p_glIsVariantEnabledEXT);
		LoadFunction("glGetVariantBooleanvEXT", out p_glGetVariantBooleanvEXT);
		LoadFunction("glGetVariantIntegervEXT", out p_glGetVariantIntegervEXT);
		LoadFunction("glGetVariantFloatvEXT", out p_glGetVariantFloatvEXT);
		LoadFunction("glGetVariantPointervEXT", out p_glGetVariantPointervEXT);
		LoadFunction("glGetInvariantBooleanvEXT", out p_glGetInvariantBooleanvEXT);
		LoadFunction("glGetInvariantIntegervEXT", out p_glGetInvariantIntegervEXT);
		LoadFunction("glGetInvariantFloatvEXT", out p_glGetInvariantFloatvEXT);
		LoadFunction("glGetLocalConstantBooleanvEXT", out p_glGetLocalConstantBooleanvEXT);
		LoadFunction("glGetLocalConstantIntegervEXT", out p_glGetLocalConstantIntegervEXT);
		LoadFunction("glGetLocalConstantFloatvEXT", out p_glGetLocalConstantFloatvEXT);
		LoadFunction("glVertexWeightfEXT", out p_glVertexWeightfEXT);
		LoadFunction("glVertexWeightfvEXT", out p_glVertexWeightfvEXT);
		LoadFunction("glVertexWeightPointerEXT", out p_glVertexWeightPointerEXT);
		LoadFunction("glAcquireKeyedMutexWin32EXT", out p_glAcquireKeyedMutexWin32EXT);
		LoadFunction("glReleaseKeyedMutexWin32EXT", out p_glReleaseKeyedMutexWin32EXT);
		LoadFunction("glWindowRectanglesEXT", out p_glWindowRectanglesEXT);
		LoadFunction("glImportSyncEXT", out p_glImportSyncEXT);
		LoadFunction("glFrameTerminatorGREMEDY", out p_glFrameTerminatorGREMEDY);
		LoadFunction("glStringMarkerGREMEDY", out p_glStringMarkerGREMEDY);
		LoadFunction("glImageTransformParameteriHP", out p_glImageTransformParameteriHP);
		LoadFunction("glImageTransformParameterfHP", out p_glImageTransformParameterfHP);
		LoadFunction("glImageTransformParameterivHP", out p_glImageTransformParameterivHP);
		LoadFunction("glImageTransformParameterfvHP", out p_glImageTransformParameterfvHP);
		LoadFunction("glGetImageTransformParameterivHP", out p_glGetImageTransformParameterivHP);
		LoadFunction("glGetImageTransformParameterfvHP", out p_glGetImageTransformParameterfvHP);
		LoadFunction("glMultiModeDrawArraysIBM", out p_glMultiModeDrawArraysIBM);
		LoadFunction("glMultiModeDrawElementsIBM", out p_glMultiModeDrawElementsIBM);
		LoadFunction("glFlushStaticDataIBM", out p_glFlushStaticDataIBM);
		LoadFunction("glColorPointerListIBM", out p_glColorPointerListIBM);
		LoadFunction("glSecondaryColorPointerListIBM", out p_glSecondaryColorPointerListIBM);
		LoadFunction("glEdgeFlagPointerListIBM", out p_glEdgeFlagPointerListIBM);
		LoadFunction("glFogCoordPointerListIBM", out p_glFogCoordPointerListIBM);
		LoadFunction("glIndexPointerListIBM", out p_glIndexPointerListIBM);
		LoadFunction("glNormalPointerListIBM", out p_glNormalPointerListIBM);
		LoadFunction("glTexCoordPointerListIBM", out p_glTexCoordPointerListIBM);
		LoadFunction("glVertexPointerListIBM", out p_glVertexPointerListIBM);
		LoadFunction("glGetTextureHandleIMG", out p_glGetTextureHandleIMG);
		LoadFunction("glGetTextureSamplerHandleIMG", out p_glGetTextureSamplerHandleIMG);
		LoadFunction("glUniformHandleui64IMG", out p_glUniformHandleui64IMG);
		LoadFunction("glUniformHandleui64vIMG", out p_glUniformHandleui64vIMG);
		LoadFunction("glProgramUniformHandleui64IMG", out p_glProgramUniformHandleui64IMG);
		LoadFunction("glProgramUniformHandleui64vIMG", out p_glProgramUniformHandleui64vIMG);
		LoadFunction("glFramebufferTexture2DDownsampleIMG", out p_glFramebufferTexture2DDownsampleIMG);
		LoadFunction("glFramebufferTextureLayerDownsampleIMG", out p_glFramebufferTextureLayerDownsampleIMG);
		LoadFunction("glRenderbufferStorageMultisampleIMG", out p_glRenderbufferStorageMultisampleIMG);
		LoadFunction("glFramebufferTexture2DMultisampleIMG", out p_glFramebufferTexture2DMultisampleIMG);
		LoadFunction("glClipPlanefIMG", out p_glClipPlanefIMG);
		LoadFunction("glClipPlanexIMG", out p_glClipPlanexIMG);
		LoadFunction("glBlendFuncSeparateINGR", out p_glBlendFuncSeparateINGR);
		LoadFunction("glApplyFramebufferAttachmentCMAAINTEL", out p_glApplyFramebufferAttachmentCMAAINTEL);
		LoadFunction("glSyncTextureINTEL", out p_glSyncTextureINTEL);
		LoadFunction("glUnmapTexture2DINTEL", out p_glUnmapTexture2DINTEL);
		LoadFunction("glMapTexture2DINTEL", out p_glMapTexture2DINTEL);
		LoadFunction("glVertexPointervINTEL", out p_glVertexPointervINTEL);
		LoadFunction("glNormalPointervINTEL", out p_glNormalPointervINTEL);
		LoadFunction("glColorPointervINTEL", out p_glColorPointervINTEL);
		LoadFunction("glTexCoordPointervINTEL", out p_glTexCoordPointervINTEL);
		LoadFunction("glBeginPerfQueryINTEL", out p_glBeginPerfQueryINTEL);
		LoadFunction("glCreatePerfQueryINTEL", out p_glCreatePerfQueryINTEL);
		LoadFunction("glDeletePerfQueryINTEL", out p_glDeletePerfQueryINTEL);
		LoadFunction("glEndPerfQueryINTEL", out p_glEndPerfQueryINTEL);
		LoadFunction("glGetFirstPerfQueryIdINTEL", out p_glGetFirstPerfQueryIdINTEL);
		LoadFunction("glGetNextPerfQueryIdINTEL", out p_glGetNextPerfQueryIdINTEL);
		LoadFunction("glGetPerfCounterInfoINTEL", out p_glGetPerfCounterInfoINTEL);
		LoadFunction("glGetPerfQueryDataINTEL", out p_glGetPerfQueryDataINTEL);
		LoadFunction("glGetPerfQueryIdByNameINTEL", out p_glGetPerfQueryIdByNameINTEL);
		LoadFunction("glGetPerfQueryInfoINTEL", out p_glGetPerfQueryInfoINTEL);
		LoadFunction("glBlendBarrierKHR", out p_glBlendBarrierKHR);
		LoadFunction("glDebugMessageControlKHR", out p_glDebugMessageControlKHR);
		LoadFunction("glDebugMessageInsertKHR", out p_glDebugMessageInsertKHR);
		LoadFunction("glDebugMessageCallbackKHR", out p_glDebugMessageCallbackKHR);
		LoadFunction("glGetDebugMessageLogKHR", out p_glGetDebugMessageLogKHR);
		LoadFunction("glPushDebugGroupKHR", out p_glPushDebugGroupKHR);
		LoadFunction("glPopDebugGroupKHR", out p_glPopDebugGroupKHR);
		LoadFunction("glObjectLabelKHR", out p_glObjectLabelKHR);
		LoadFunction("glGetObjectLabelKHR", out p_glGetObjectLabelKHR);
		LoadFunction("glObjectPtrLabelKHR", out p_glObjectPtrLabelKHR);
		LoadFunction("glGetObjectPtrLabelKHR", out p_glGetObjectPtrLabelKHR);
		LoadFunction("glGetPointervKHR", out p_glGetPointervKHR);
		LoadFunction("glGetGraphicsResetStatusKHR", out p_glGetGraphicsResetStatusKHR);
		LoadFunction("glReadnPixelsKHR", out p_glReadnPixelsKHR);
		LoadFunction("glGetnUniformfvKHR", out p_glGetnUniformfvKHR);
		LoadFunction("glGetnUniformivKHR", out p_glGetnUniformivKHR);
		LoadFunction("glGetnUniformuivKHR", out p_glGetnUniformuivKHR);
		LoadFunction("glMaxShaderCompilerThreadsKHR", out p_glMaxShaderCompilerThreadsKHR);
		LoadFunction("glResizeBuffersMESA", out p_glResizeBuffersMESA);
		LoadFunction("glWindowPos2dMESA", out p_glWindowPos2dMESA);
		LoadFunction("glWindowPos2dvMESA", out p_glWindowPos2dvMESA);
		LoadFunction("glWindowPos2fMESA", out p_glWindowPos2fMESA);
		LoadFunction("glWindowPos2fvMESA", out p_glWindowPos2fvMESA);
		LoadFunction("glWindowPos2iMESA", out p_glWindowPos2iMESA);
		LoadFunction("glWindowPos2ivMESA", out p_glWindowPos2ivMESA);
		LoadFunction("glWindowPos2sMESA", out p_glWindowPos2sMESA);
		LoadFunction("glWindowPos2svMESA", out p_glWindowPos2svMESA);
		LoadFunction("glWindowPos3dMESA", out p_glWindowPos3dMESA);
		LoadFunction("glWindowPos3dvMESA", out p_glWindowPos3dvMESA);
		LoadFunction("glWindowPos3fMESA", out p_glWindowPos3fMESA);
		LoadFunction("glWindowPos3fvMESA", out p_glWindowPos3fvMESA);
		LoadFunction("glWindowPos3iMESA", out p_glWindowPos3iMESA);
		LoadFunction("glWindowPos3ivMESA", out p_glWindowPos3ivMESA);
		LoadFunction("glWindowPos3sMESA", out p_glWindowPos3sMESA);
		LoadFunction("glWindowPos3svMESA", out p_glWindowPos3svMESA);
		LoadFunction("glWindowPos4dMESA", out p_glWindowPos4dMESA);
		LoadFunction("glWindowPos4dvMESA", out p_glWindowPos4dvMESA);
		LoadFunction("glWindowPos4fMESA", out p_glWindowPos4fMESA);
		LoadFunction("glWindowPos4fvMESA", out p_glWindowPos4fvMESA);
		LoadFunction("glWindowPos4iMESA", out p_glWindowPos4iMESA);
		LoadFunction("glWindowPos4ivMESA", out p_glWindowPos4ivMESA);
		LoadFunction("glWindowPos4sMESA", out p_glWindowPos4sMESA);
		LoadFunction("glWindowPos4svMESA", out p_glWindowPos4svMESA);
		LoadFunction("glBeginConditionalRenderNVX", out p_glBeginConditionalRenderNVX);
		LoadFunction("glEndConditionalRenderNVX", out p_glEndConditionalRenderNVX);
		LoadFunction("glLGPUNamedBufferSubDataNVX", out p_glLGPUNamedBufferSubDataNVX);
		LoadFunction("glLGPUCopyImageSubDataNVX", out p_glLGPUCopyImageSubDataNVX);
		LoadFunction("glLGPUInterlockNVX", out p_glLGPUInterlockNVX);
		LoadFunction("glAlphaToCoverageDitherControlNV", out p_glAlphaToCoverageDitherControlNV);
		LoadFunction("glMultiDrawArraysIndirectBindlessNV", out p_glMultiDrawArraysIndirectBindlessNV);
		LoadFunction("glMultiDrawElementsIndirectBindlessNV", out p_glMultiDrawElementsIndirectBindlessNV);
		LoadFunction("glMultiDrawArraysIndirectBindlessCountNV", out p_glMultiDrawArraysIndirectBindlessCountNV);
		LoadFunction("glMultiDrawElementsIndirectBindlessCountNV", out p_glMultiDrawElementsIndirectBindlessCountNV);
		LoadFunction("glGetTextureHandleNV", out p_glGetTextureHandleNV);
		LoadFunction("glGetTextureSamplerHandleNV", out p_glGetTextureSamplerHandleNV);
		LoadFunction("glMakeTextureHandleResidentNV", out p_glMakeTextureHandleResidentNV);
		LoadFunction("glMakeTextureHandleNonResidentNV", out p_glMakeTextureHandleNonResidentNV);
		LoadFunction("glGetImageHandleNV", out p_glGetImageHandleNV);
		LoadFunction("glMakeImageHandleResidentNV", out p_glMakeImageHandleResidentNV);
		LoadFunction("glMakeImageHandleNonResidentNV", out p_glMakeImageHandleNonResidentNV);
		LoadFunction("glUniformHandleui64NV", out p_glUniformHandleui64NV);
		LoadFunction("glUniformHandleui64vNV", out p_glUniformHandleui64vNV);
		LoadFunction("glProgramUniformHandleui64NV", out p_glProgramUniformHandleui64NV);
		LoadFunction("glProgramUniformHandleui64vNV", out p_glProgramUniformHandleui64vNV);
		LoadFunction("glIsTextureHandleResidentNV", out p_glIsTextureHandleResidentNV);
		LoadFunction("glIsImageHandleResidentNV", out p_glIsImageHandleResidentNV);
		LoadFunction("glBlendParameteriNV", out p_glBlendParameteriNV);
		LoadFunction("glBlendBarrierNV", out p_glBlendBarrierNV);
		LoadFunction("glViewportPositionWScaleNV", out p_glViewportPositionWScaleNV);
		LoadFunction("glCreateStatesNV", out p_glCreateStatesNV);
		LoadFunction("glDeleteStatesNV", out p_glDeleteStatesNV);
		LoadFunction("glIsStateNV", out p_glIsStateNV);
		LoadFunction("glStateCaptureNV", out p_glStateCaptureNV);
		LoadFunction("glGetCommandHeaderNV", out p_glGetCommandHeaderNV);
		LoadFunction("glGetStageIndexNV", out p_glGetStageIndexNV);
		LoadFunction("glDrawCommandsNV", out p_glDrawCommandsNV);
		LoadFunction("glDrawCommandsAddressNV", out p_glDrawCommandsAddressNV);
		LoadFunction("glDrawCommandsStatesNV", out p_glDrawCommandsStatesNV);
		LoadFunction("glDrawCommandsStatesAddressNV", out p_glDrawCommandsStatesAddressNV);
		LoadFunction("glCreateCommandListsNV", out p_glCreateCommandListsNV);
		LoadFunction("glDeleteCommandListsNV", out p_glDeleteCommandListsNV);
		LoadFunction("glIsCommandListNV", out p_glIsCommandListNV);
		LoadFunction("glListDrawCommandsStatesClientNV", out p_glListDrawCommandsStatesClientNV);
		LoadFunction("glCommandListSegmentsNV", out p_glCommandListSegmentsNV);
		LoadFunction("glCompileCommandListNV", out p_glCompileCommandListNV);
		LoadFunction("glCallCommandListNV", out p_glCallCommandListNV);
		LoadFunction("glBeginConditionalRenderNV", out p_glBeginConditionalRenderNV);
		LoadFunction("glEndConditionalRenderNV", out p_glEndConditionalRenderNV);
		LoadFunction("glSubpixelPrecisionBiasNV", out p_glSubpixelPrecisionBiasNV);
		LoadFunction("glConservativeRasterParameterfNV", out p_glConservativeRasterParameterfNV);
		LoadFunction("glConservativeRasterParameteriNV", out p_glConservativeRasterParameteriNV);
		LoadFunction("glCopyBufferSubDataNV", out p_glCopyBufferSubDataNV);
		LoadFunction("glCopyImageSubDataNV", out p_glCopyImageSubDataNV);
		LoadFunction("glCoverageMaskNV", out p_glCoverageMaskNV);
		LoadFunction("glCoverageOperationNV", out p_glCoverageOperationNV);
		LoadFunction("glDepthRangedNV", out p_glDepthRangedNV);
		LoadFunction("glClearDepthdNV", out p_glClearDepthdNV);
		LoadFunction("glDepthBoundsdNV", out p_glDepthBoundsdNV);
		LoadFunction("glDrawBuffersNV", out p_glDrawBuffersNV);
		LoadFunction("glDrawArraysInstancedNV", out p_glDrawArraysInstancedNV);
		LoadFunction("glDrawElementsInstancedNV", out p_glDrawElementsInstancedNV);
		LoadFunction("glDrawTextureNV", out p_glDrawTextureNV);
		LoadFunction("glDrawVkImageNV", out p_glDrawVkImageNV);
		LoadFunction("glGetVkProcAddrNV", out p_glGetVkProcAddrNV);
		LoadFunction("glWaitVkSemaphoreNV", out p_glWaitVkSemaphoreNV);
		LoadFunction("glSignalVkSemaphoreNV", out p_glSignalVkSemaphoreNV);
		LoadFunction("glSignalVkFenceNV", out p_glSignalVkFenceNV);
		LoadFunction("glMapControlPointsNV", out p_glMapControlPointsNV);
		LoadFunction("glMapParameterivNV", out p_glMapParameterivNV);
		LoadFunction("glMapParameterfvNV", out p_glMapParameterfvNV);
		LoadFunction("glGetMapControlPointsNV", out p_glGetMapControlPointsNV);
		LoadFunction("glGetMapParameterivNV", out p_glGetMapParameterivNV);
		LoadFunction("glGetMapParameterfvNV", out p_glGetMapParameterfvNV);
		LoadFunction("glGetMapAttribParameterivNV", out p_glGetMapAttribParameterivNV);
		LoadFunction("glGetMapAttribParameterfvNV", out p_glGetMapAttribParameterfvNV);
		LoadFunction("glEvalMapsNV", out p_glEvalMapsNV);
		LoadFunction("glGetMultisamplefvNV", out p_glGetMultisamplefvNV);
		LoadFunction("glSampleMaskIndexedNV", out p_glSampleMaskIndexedNV);
		LoadFunction("glTexRenderbufferNV", out p_glTexRenderbufferNV);
		LoadFunction("glDeleteFencesNV", out p_glDeleteFencesNV);
		LoadFunction("glGenFencesNV", out p_glGenFencesNV);
		LoadFunction("glIsFenceNV", out p_glIsFenceNV);
		LoadFunction("glTestFenceNV", out p_glTestFenceNV);
		LoadFunction("glGetFenceivNV", out p_glGetFenceivNV);
		LoadFunction("glFinishFenceNV", out p_glFinishFenceNV);
		LoadFunction("glSetFenceNV", out p_glSetFenceNV);
		LoadFunction("glFragmentCoverageColorNV", out p_glFragmentCoverageColorNV);
		LoadFunction("glProgramNamedParameter4fNV", out p_glProgramNamedParameter4fNV);
		LoadFunction("glProgramNamedParameter4fvNV", out p_glProgramNamedParameter4fvNV);
		LoadFunction("glProgramNamedParameter4dNV", out p_glProgramNamedParameter4dNV);
		LoadFunction("glProgramNamedParameter4dvNV", out p_glProgramNamedParameter4dvNV);
		LoadFunction("glGetProgramNamedParameterfvNV", out p_glGetProgramNamedParameterfvNV);
		LoadFunction("glGetProgramNamedParameterdvNV", out p_glGetProgramNamedParameterdvNV);
		LoadFunction("glBlitFramebufferNV", out p_glBlitFramebufferNV);
		LoadFunction("glCoverageModulationTableNV", out p_glCoverageModulationTableNV);
		LoadFunction("glGetCoverageModulationTableNV", out p_glGetCoverageModulationTableNV);
		LoadFunction("glCoverageModulationNV", out p_glCoverageModulationNV);
		LoadFunction("glRenderbufferStorageMultisampleNV", out p_glRenderbufferStorageMultisampleNV);
		LoadFunction("glRenderbufferStorageMultisampleCoverageNV", out p_glRenderbufferStorageMultisampleCoverageNV);
		LoadFunction("glProgramVertexLimitNV", out p_glProgramVertexLimitNV);
		LoadFunction("glFramebufferTextureFaceEXT", out p_glFramebufferTextureFaceEXT);
		LoadFunction("glProgramLocalParameterI4iNV", out p_glProgramLocalParameterI4iNV);
		LoadFunction("glProgramLocalParameterI4ivNV", out p_glProgramLocalParameterI4ivNV);
		LoadFunction("glProgramLocalParametersI4ivNV", out p_glProgramLocalParametersI4ivNV);
		LoadFunction("glProgramLocalParameterI4uiNV", out p_glProgramLocalParameterI4uiNV);
		LoadFunction("glProgramLocalParameterI4uivNV", out p_glProgramLocalParameterI4uivNV);
		LoadFunction("glProgramLocalParametersI4uivNV", out p_glProgramLocalParametersI4uivNV);
		LoadFunction("glProgramEnvParameterI4iNV", out p_glProgramEnvParameterI4iNV);
		LoadFunction("glProgramEnvParameterI4ivNV", out p_glProgramEnvParameterI4ivNV);
		LoadFunction("glProgramEnvParametersI4ivNV", out p_glProgramEnvParametersI4ivNV);
		LoadFunction("glProgramEnvParameterI4uiNV", out p_glProgramEnvParameterI4uiNV);
		LoadFunction("glProgramEnvParameterI4uivNV", out p_glProgramEnvParameterI4uivNV);
		LoadFunction("glProgramEnvParametersI4uivNV", out p_glProgramEnvParametersI4uivNV);
		LoadFunction("glGetProgramLocalParameterIivNV", out p_glGetProgramLocalParameterIivNV);
		LoadFunction("glGetProgramLocalParameterIuivNV", out p_glGetProgramLocalParameterIuivNV);
		LoadFunction("glGetProgramEnvParameterIivNV", out p_glGetProgramEnvParameterIivNV);
		LoadFunction("glGetProgramEnvParameterIuivNV", out p_glGetProgramEnvParameterIuivNV);
		LoadFunction("glProgramSubroutineParametersuivNV", out p_glProgramSubroutineParametersuivNV);
		LoadFunction("glGetProgramSubroutineParameteruivNV", out p_glGetProgramSubroutineParameteruivNV);
		LoadFunction("glVertex2hNV", out p_glVertex2hNV);
		LoadFunction("glVertex2hvNV", out p_glVertex2hvNV);
		LoadFunction("glVertex3hNV", out p_glVertex3hNV);
		LoadFunction("glVertex3hvNV", out p_glVertex3hvNV);
		LoadFunction("glVertex4hNV", out p_glVertex4hNV);
		LoadFunction("glVertex4hvNV", out p_glVertex4hvNV);
		LoadFunction("glNormal3hNV", out p_glNormal3hNV);
		LoadFunction("glNormal3hvNV", out p_glNormal3hvNV);
		LoadFunction("glColor3hNV", out p_glColor3hNV);
		LoadFunction("glColor3hvNV", out p_glColor3hvNV);
		LoadFunction("glColor4hNV", out p_glColor4hNV);
		LoadFunction("glColor4hvNV", out p_glColor4hvNV);
		LoadFunction("glTexCoord1hNV", out p_glTexCoord1hNV);
		LoadFunction("glTexCoord1hvNV", out p_glTexCoord1hvNV);
		LoadFunction("glTexCoord2hNV", out p_glTexCoord2hNV);
		LoadFunction("glTexCoord2hvNV", out p_glTexCoord2hvNV);
		LoadFunction("glTexCoord3hNV", out p_glTexCoord3hNV);
		LoadFunction("glTexCoord3hvNV", out p_glTexCoord3hvNV);
		LoadFunction("glTexCoord4hNV", out p_glTexCoord4hNV);
		LoadFunction("glTexCoord4hvNV", out p_glTexCoord4hvNV);
		LoadFunction("glMultiTexCoord1hNV", out p_glMultiTexCoord1hNV);
		LoadFunction("glMultiTexCoord1hvNV", out p_glMultiTexCoord1hvNV);
		LoadFunction("glMultiTexCoord2hNV", out p_glMultiTexCoord2hNV);
		LoadFunction("glMultiTexCoord2hvNV", out p_glMultiTexCoord2hvNV);
		LoadFunction("glMultiTexCoord3hNV", out p_glMultiTexCoord3hNV);
		LoadFunction("glMultiTexCoord3hvNV", out p_glMultiTexCoord3hvNV);
		LoadFunction("glMultiTexCoord4hNV", out p_glMultiTexCoord4hNV);
		LoadFunction("glMultiTexCoord4hvNV", out p_glMultiTexCoord4hvNV);
		LoadFunction("glFogCoordhNV", out p_glFogCoordhNV);
		LoadFunction("glFogCoordhvNV", out p_glFogCoordhvNV);
		LoadFunction("glSecondaryColor3hNV", out p_glSecondaryColor3hNV);
		LoadFunction("glSecondaryColor3hvNV", out p_glSecondaryColor3hvNV);
		LoadFunction("glVertexWeighthNV", out p_glVertexWeighthNV);
		LoadFunction("glVertexWeighthvNV", out p_glVertexWeighthvNV);
		LoadFunction("glVertexAttrib1hNV", out p_glVertexAttrib1hNV);
		LoadFunction("glVertexAttrib1hvNV", out p_glVertexAttrib1hvNV);
		LoadFunction("glVertexAttrib2hNV", out p_glVertexAttrib2hNV);
		LoadFunction("glVertexAttrib2hvNV", out p_glVertexAttrib2hvNV);
		LoadFunction("glVertexAttrib3hNV", out p_glVertexAttrib3hNV);
		LoadFunction("glVertexAttrib3hvNV", out p_glVertexAttrib3hvNV);
		LoadFunction("glVertexAttrib4hNV", out p_glVertexAttrib4hNV);
		LoadFunction("glVertexAttrib4hvNV", out p_glVertexAttrib4hvNV);
		LoadFunction("glVertexAttribs1hvNV", out p_glVertexAttribs1hvNV);
		LoadFunction("glVertexAttribs2hvNV", out p_glVertexAttribs2hvNV);
		LoadFunction("glVertexAttribs3hvNV", out p_glVertexAttribs3hvNV);
		LoadFunction("glVertexAttribs4hvNV", out p_glVertexAttribs4hvNV);
		LoadFunction("glVertexAttribDivisorNV", out p_glVertexAttribDivisorNV);
		LoadFunction("glGetInternalformatSampleivNV", out p_glGetInternalformatSampleivNV);
		LoadFunction("glRenderGpuMaskNV", out p_glRenderGpuMaskNV);
		LoadFunction("glMulticastBufferSubDataNV", out p_glMulticastBufferSubDataNV);
		LoadFunction("glMulticastCopyBufferSubDataNV", out p_glMulticastCopyBufferSubDataNV);
		LoadFunction("glMulticastCopyImageSubDataNV", out p_glMulticastCopyImageSubDataNV);
		LoadFunction("glMulticastBlitFramebufferNV", out p_glMulticastBlitFramebufferNV);
		LoadFunction("glMulticastFramebufferSampleLocationsfvNV", out p_glMulticastFramebufferSampleLocationsfvNV);
		LoadFunction("glMulticastBarrierNV", out p_glMulticastBarrierNV);
		LoadFunction("glMulticastWaitSyncNV", out p_glMulticastWaitSyncNV);
		LoadFunction("glMulticastGetQueryObjectivNV", out p_glMulticastGetQueryObjectivNV);
		LoadFunction("glMulticastGetQueryObjectuivNV", out p_glMulticastGetQueryObjectuivNV);
		LoadFunction("glMulticastGetQueryObjecti64vNV", out p_glMulticastGetQueryObjecti64vNV);
		LoadFunction("glMulticastGetQueryObjectui64vNV", out p_glMulticastGetQueryObjectui64vNV);
		LoadFunction("glGetMemoryObjectDetachedResourcesuivNV", out p_glGetMemoryObjectDetachedResourcesuivNV);
		LoadFunction("glResetMemoryObjectParameterNV", out p_glResetMemoryObjectParameterNV);
		LoadFunction("glTexAttachMemoryNV", out p_glTexAttachMemoryNV);
		LoadFunction("glBufferAttachMemoryNV", out p_glBufferAttachMemoryNV);
		LoadFunction("glTextureAttachMemoryNV", out p_glTextureAttachMemoryNV);
		LoadFunction("glNamedBufferAttachMemoryNV", out p_glNamedBufferAttachMemoryNV);
		LoadFunction("glDrawMeshTasksNV", out p_glDrawMeshTasksNV);
		LoadFunction("glDrawMeshTasksIndirectNV", out p_glDrawMeshTasksIndirectNV);
		LoadFunction("glMultiDrawMeshTasksIndirectNV", out p_glMultiDrawMeshTasksIndirectNV);
		LoadFunction("glMultiDrawMeshTasksIndirectCountNV", out p_glMultiDrawMeshTasksIndirectCountNV);
		LoadFunction("glUniformMatrix2x3fvNV", out p_glUniformMatrix2x3fvNV);
		LoadFunction("glUniformMatrix3x2fvNV", out p_glUniformMatrix3x2fvNV);
		LoadFunction("glUniformMatrix2x4fvNV", out p_glUniformMatrix2x4fvNV);
		LoadFunction("glUniformMatrix4x2fvNV", out p_glUniformMatrix4x2fvNV);
		LoadFunction("glUniformMatrix3x4fvNV", out p_glUniformMatrix3x4fvNV);
		LoadFunction("glUniformMatrix4x3fvNV", out p_glUniformMatrix4x3fvNV);
		LoadFunction("glGenOcclusionQueriesNV", out p_glGenOcclusionQueriesNV);
		LoadFunction("glDeleteOcclusionQueriesNV", out p_glDeleteOcclusionQueriesNV);
		LoadFunction("glIsOcclusionQueryNV", out p_glIsOcclusionQueryNV);
		LoadFunction("glBeginOcclusionQueryNV", out p_glBeginOcclusionQueryNV);
		LoadFunction("glEndOcclusionQueryNV", out p_glEndOcclusionQueryNV);
		LoadFunction("glGetOcclusionQueryivNV", out p_glGetOcclusionQueryivNV);
		LoadFunction("glGetOcclusionQueryuivNV", out p_glGetOcclusionQueryuivNV);
		LoadFunction("glProgramBufferParametersfvNV", out p_glProgramBufferParametersfvNV);
		LoadFunction("glProgramBufferParametersIivNV", out p_glProgramBufferParametersIivNV);
		LoadFunction("glProgramBufferParametersIuivNV", out p_glProgramBufferParametersIuivNV);
		LoadFunction("glGenPathsNV", out p_glGenPathsNV);
		LoadFunction("glDeletePathsNV", out p_glDeletePathsNV);
		LoadFunction("glIsPathNV", out p_glIsPathNV);
		LoadFunction("glPathCommandsNV", out p_glPathCommandsNV);
		LoadFunction("glPathCoordsNV", out p_glPathCoordsNV);
		LoadFunction("glPathSubCommandsNV", out p_glPathSubCommandsNV);
		LoadFunction("glPathSubCoordsNV", out p_glPathSubCoordsNV);
		LoadFunction("glPathStringNV", out p_glPathStringNV);
		LoadFunction("glPathGlyphsNV", out p_glPathGlyphsNV);
		LoadFunction("glPathGlyphRangeNV", out p_glPathGlyphRangeNV);
		LoadFunction("glWeightPathsNV", out p_glWeightPathsNV);
		LoadFunction("glCopyPathNV", out p_glCopyPathNV);
		LoadFunction("glInterpolatePathsNV", out p_glInterpolatePathsNV);
		LoadFunction("glTransformPathNV", out p_glTransformPathNV);
		LoadFunction("glPathParameterivNV", out p_glPathParameterivNV);
		LoadFunction("glPathParameteriNV", out p_glPathParameteriNV);
		LoadFunction("glPathParameterfvNV", out p_glPathParameterfvNV);
		LoadFunction("glPathParameterfNV", out p_glPathParameterfNV);
		LoadFunction("glPathDashArrayNV", out p_glPathDashArrayNV);
		LoadFunction("glPathStencilFuncNV", out p_glPathStencilFuncNV);
		LoadFunction("glPathStencilDepthOffsetNV", out p_glPathStencilDepthOffsetNV);
		LoadFunction("glStencilFillPathNV", out p_glStencilFillPathNV);
		LoadFunction("glStencilStrokePathNV", out p_glStencilStrokePathNV);
		LoadFunction("glStencilFillPathInstancedNV", out p_glStencilFillPathInstancedNV);
		LoadFunction("glStencilStrokePathInstancedNV", out p_glStencilStrokePathInstancedNV);
		LoadFunction("glPathCoverDepthFuncNV", out p_glPathCoverDepthFuncNV);
		LoadFunction("glCoverFillPathNV", out p_glCoverFillPathNV);
		LoadFunction("glCoverStrokePathNV", out p_glCoverStrokePathNV);
		LoadFunction("glCoverFillPathInstancedNV", out p_glCoverFillPathInstancedNV);
		LoadFunction("glCoverStrokePathInstancedNV", out p_glCoverStrokePathInstancedNV);
		LoadFunction("glGetPathParameterivNV", out p_glGetPathParameterivNV);
		LoadFunction("glGetPathParameterfvNV", out p_glGetPathParameterfvNV);
		LoadFunction("glGetPathCommandsNV", out p_glGetPathCommandsNV);
		LoadFunction("glGetPathCoordsNV", out p_glGetPathCoordsNV);
		LoadFunction("glGetPathDashArrayNV", out p_glGetPathDashArrayNV);
		LoadFunction("glGetPathMetricsNV", out p_glGetPathMetricsNV);
		LoadFunction("glGetPathMetricRangeNV", out p_glGetPathMetricRangeNV);
		LoadFunction("glGetPathSpacingNV", out p_glGetPathSpacingNV);
		LoadFunction("glIsPointInFillPathNV", out p_glIsPointInFillPathNV);
		LoadFunction("glIsPointInStrokePathNV", out p_glIsPointInStrokePathNV);
		LoadFunction("glGetPathLengthNV", out p_glGetPathLengthNV);
		LoadFunction("glPointAlongPathNV", out p_glPointAlongPathNV);
		LoadFunction("glMatrixLoad3x2fNV", out p_glMatrixLoad3x2fNV);
		LoadFunction("glMatrixLoad3x3fNV", out p_glMatrixLoad3x3fNV);
		LoadFunction("glMatrixLoadTranspose3x3fNV", out p_glMatrixLoadTranspose3x3fNV);
		LoadFunction("glMatrixMult3x2fNV", out p_glMatrixMult3x2fNV);
		LoadFunction("glMatrixMult3x3fNV", out p_glMatrixMult3x3fNV);
		LoadFunction("glMatrixMultTranspose3x3fNV", out p_glMatrixMultTranspose3x3fNV);
		LoadFunction("glStencilThenCoverFillPathNV", out p_glStencilThenCoverFillPathNV);
		LoadFunction("glStencilThenCoverStrokePathNV", out p_glStencilThenCoverStrokePathNV);
		LoadFunction("glStencilThenCoverFillPathInstancedNV", out p_glStencilThenCoverFillPathInstancedNV);
		LoadFunction("glStencilThenCoverStrokePathInstancedNV", out p_glStencilThenCoverStrokePathInstancedNV);
		LoadFunction("glPathGlyphIndexRangeNV", out p_glPathGlyphIndexRangeNV);
		LoadFunction("glPathGlyphIndexArrayNV", out p_glPathGlyphIndexArrayNV);
		LoadFunction("glPathMemoryGlyphIndexArrayNV", out p_glPathMemoryGlyphIndexArrayNV);
		LoadFunction("glProgramPathFragmentInputGenNV", out p_glProgramPathFragmentInputGenNV);
		LoadFunction("glGetProgramResourcefvNV", out p_glGetProgramResourcefvNV);
		LoadFunction("glPathColorGenNV", out p_glPathColorGenNV);
		LoadFunction("glPathTexGenNV", out p_glPathTexGenNV);
		LoadFunction("glPathFogGenNV", out p_glPathFogGenNV);
		LoadFunction("glGetPathColorGenivNV", out p_glGetPathColorGenivNV);
		LoadFunction("glGetPathColorGenfvNV", out p_glGetPathColorGenfvNV);
		LoadFunction("glGetPathTexGenivNV", out p_glGetPathTexGenivNV);
		LoadFunction("glGetPathTexGenfvNV", out p_glGetPathTexGenfvNV);
		LoadFunction("glPixelDataRangeNV", out p_glPixelDataRangeNV);
		LoadFunction("glFlushPixelDataRangeNV", out p_glFlushPixelDataRangeNV);
		LoadFunction("glPointParameteriNV", out p_glPointParameteriNV);
		LoadFunction("glPointParameterivNV", out p_glPointParameterivNV);
		LoadFunction("glPolygonModeNV", out p_glPolygonModeNV);
		LoadFunction("glPresentFrameKeyedNV", out p_glPresentFrameKeyedNV);
		LoadFunction("glPresentFrameDualFillNV", out p_glPresentFrameDualFillNV);
		LoadFunction("glGetVideoivNV", out p_glGetVideoivNV);
		LoadFunction("glGetVideouivNV", out p_glGetVideouivNV);
		LoadFunction("glGetVideoi64vNV", out p_glGetVideoi64vNV);
		LoadFunction("glGetVideoui64vNV", out p_glGetVideoui64vNV);
		LoadFunction("glPrimitiveRestartNV", out p_glPrimitiveRestartNV);
		LoadFunction("glPrimitiveRestartIndexNV", out p_glPrimitiveRestartIndexNV);
		LoadFunction("glQueryResourceNV", out p_glQueryResourceNV);
		LoadFunction("glGenQueryResourceTagNV", out p_glGenQueryResourceTagNV);
		LoadFunction("glDeleteQueryResourceTagNV", out p_glDeleteQueryResourceTagNV);
		LoadFunction("glQueryResourceTagNV", out p_glQueryResourceTagNV);
		LoadFunction("glReadBufferNV", out p_glReadBufferNV);
		LoadFunction("glCombinerParameterfvNV", out p_glCombinerParameterfvNV);
		LoadFunction("glCombinerParameterfNV", out p_glCombinerParameterfNV);
		LoadFunction("glCombinerParameterivNV", out p_glCombinerParameterivNV);
		LoadFunction("glCombinerParameteriNV", out p_glCombinerParameteriNV);
		LoadFunction("glCombinerInputNV", out p_glCombinerInputNV);
		LoadFunction("glCombinerOutputNV", out p_glCombinerOutputNV);
		LoadFunction("glFinalCombinerInputNV", out p_glFinalCombinerInputNV);
		LoadFunction("glGetCombinerInputParameterfvNV", out p_glGetCombinerInputParameterfvNV);
		LoadFunction("glGetCombinerInputParameterivNV", out p_glGetCombinerInputParameterivNV);
		LoadFunction("glGetCombinerOutputParameterfvNV", out p_glGetCombinerOutputParameterfvNV);
		LoadFunction("glGetCombinerOutputParameterivNV", out p_glGetCombinerOutputParameterivNV);
		LoadFunction("glGetFinalCombinerInputParameterfvNV", out p_glGetFinalCombinerInputParameterfvNV);
		LoadFunction("glGetFinalCombinerInputParameterivNV", out p_glGetFinalCombinerInputParameterivNV);
		LoadFunction("glCombinerStageParameterfvNV", out p_glCombinerStageParameterfvNV);
		LoadFunction("glGetCombinerStageParameterfvNV", out p_glGetCombinerStageParameterfvNV);
		LoadFunction("glFramebufferSampleLocationsfvNV", out p_glFramebufferSampleLocationsfvNV);
		LoadFunction("glNamedFramebufferSampleLocationsfvNV", out p_glNamedFramebufferSampleLocationsfvNV);
		LoadFunction("glResolveDepthValuesNV", out p_glResolveDepthValuesNV);
		LoadFunction("glScissorExclusiveNV", out p_glScissorExclusiveNV);
		LoadFunction("glScissorExclusiveArrayvNV", out p_glScissorExclusiveArrayvNV);
		LoadFunction("glMakeBufferResidentNV", out p_glMakeBufferResidentNV);
		LoadFunction("glMakeBufferNonResidentNV", out p_glMakeBufferNonResidentNV);
		LoadFunction("glIsBufferResidentNV", out p_glIsBufferResidentNV);
		LoadFunction("glMakeNamedBufferResidentNV", out p_glMakeNamedBufferResidentNV);
		LoadFunction("glMakeNamedBufferNonResidentNV", out p_glMakeNamedBufferNonResidentNV);
		LoadFunction("glIsNamedBufferResidentNV", out p_glIsNamedBufferResidentNV);
		LoadFunction("glGetBufferParameterui64vNV", out p_glGetBufferParameterui64vNV);
		LoadFunction("glGetNamedBufferParameterui64vNV", out p_glGetNamedBufferParameterui64vNV);
		LoadFunction("glGetIntegerui64vNV", out p_glGetIntegerui64vNV);
		LoadFunction("glUniformui64NV", out p_glUniformui64NV);
		LoadFunction("glUniformui64vNV", out p_glUniformui64vNV);
		LoadFunction("glProgramUniformui64NV", out p_glProgramUniformui64NV);
		LoadFunction("glProgramUniformui64vNV", out p_glProgramUniformui64vNV);
		LoadFunction("glBindShadingRateImageNV", out p_glBindShadingRateImageNV);
		LoadFunction("glGetShadingRateImagePaletteNV", out p_glGetShadingRateImagePaletteNV);
		LoadFunction("glGetShadingRateSampleLocationivNV", out p_glGetShadingRateSampleLocationivNV);
		LoadFunction("glShadingRateImageBarrierNV", out p_glShadingRateImageBarrierNV);
		LoadFunction("glShadingRateImagePaletteNV", out p_glShadingRateImagePaletteNV);
		LoadFunction("glShadingRateSampleOrderNV", out p_glShadingRateSampleOrderNV);
		LoadFunction("glShadingRateSampleOrderCustomNV", out p_glShadingRateSampleOrderCustomNV);
		LoadFunction("glTextureBarrierNV", out p_glTextureBarrierNV);
		LoadFunction("glTexImage2DMultisampleCoverageNV", out p_glTexImage2DMultisampleCoverageNV);
		LoadFunction("glTexImage3DMultisampleCoverageNV", out p_glTexImage3DMultisampleCoverageNV);
		LoadFunction("glTextureImage2DMultisampleNV", out p_glTextureImage2DMultisampleNV);
		LoadFunction("glTextureImage3DMultisampleNV", out p_glTextureImage3DMultisampleNV);
		LoadFunction("glTextureImage2DMultisampleCoverageNV", out p_glTextureImage2DMultisampleCoverageNV);
		LoadFunction("glTextureImage3DMultisampleCoverageNV", out p_glTextureImage3DMultisampleCoverageNV);
		LoadFunction("glBeginTransformFeedbackNV", out p_glBeginTransformFeedbackNV);
		LoadFunction("glEndTransformFeedbackNV", out p_glEndTransformFeedbackNV);
		LoadFunction("glTransformFeedbackAttribsNV", out p_glTransformFeedbackAttribsNV);
		LoadFunction("glBindBufferRangeNV", out p_glBindBufferRangeNV);
		LoadFunction("glBindBufferOffsetNV", out p_glBindBufferOffsetNV);
		LoadFunction("glBindBufferBaseNV", out p_glBindBufferBaseNV);
		LoadFunction("glTransformFeedbackVaryingsNV", out p_glTransformFeedbackVaryingsNV);
		LoadFunction("glActiveVaryingNV", out p_glActiveVaryingNV);
		LoadFunction("glGetVaryingLocationNV", out p_glGetVaryingLocationNV);
		LoadFunction("glGetActiveVaryingNV", out p_glGetActiveVaryingNV);
		LoadFunction("glGetTransformFeedbackVaryingNV", out p_glGetTransformFeedbackVaryingNV);
		LoadFunction("glTransformFeedbackStreamAttribsNV", out p_glTransformFeedbackStreamAttribsNV);
		LoadFunction("glBindTransformFeedbackNV", out p_glBindTransformFeedbackNV);
		LoadFunction("glDeleteTransformFeedbacksNV", out p_glDeleteTransformFeedbacksNV);
		LoadFunction("glGenTransformFeedbacksNV", out p_glGenTransformFeedbacksNV);
		LoadFunction("glIsTransformFeedbackNV", out p_glIsTransformFeedbackNV);
		LoadFunction("glPauseTransformFeedbackNV", out p_glPauseTransformFeedbackNV);
		LoadFunction("glResumeTransformFeedbackNV", out p_glResumeTransformFeedbackNV);
		LoadFunction("glDrawTransformFeedbackNV", out p_glDrawTransformFeedbackNV);
		LoadFunction("glVDPAUInitNV", out p_glVDPAUInitNV);
		LoadFunction("glVDPAUFiniNV", out p_glVDPAUFiniNV);
		LoadFunction("glVDPAURegisterVideoSurfaceNV", out p_glVDPAURegisterVideoSurfaceNV);
		LoadFunction("glVDPAURegisterOutputSurfaceNV", out p_glVDPAURegisterOutputSurfaceNV);
		LoadFunction("glVDPAUIsSurfaceNV", out p_glVDPAUIsSurfaceNV);
		LoadFunction("glVDPAUUnregisterSurfaceNV", out p_glVDPAUUnregisterSurfaceNV);
		LoadFunction("glVDPAUGetSurfaceivNV", out p_glVDPAUGetSurfaceivNV);
		LoadFunction("glVDPAUSurfaceAccessNV", out p_glVDPAUSurfaceAccessNV);
		LoadFunction("glVDPAUMapSurfacesNV", out p_glVDPAUMapSurfacesNV);
		LoadFunction("glVDPAUUnmapSurfacesNV", out p_glVDPAUUnmapSurfacesNV);
		LoadFunction("glVDPAURegisterVideoSurfaceWithPictureStructureNV", out p_glVDPAURegisterVideoSurfaceWithPictureStructureNV);
		LoadFunction("glFlushVertexArrayRangeNV", out p_glFlushVertexArrayRangeNV);
		LoadFunction("glVertexArrayRangeNV", out p_glVertexArrayRangeNV);
		LoadFunction("glVertexAttribL1i64NV", out p_glVertexAttribL1i64NV);
		LoadFunction("glVertexAttribL2i64NV", out p_glVertexAttribL2i64NV);
		LoadFunction("glVertexAttribL3i64NV", out p_glVertexAttribL3i64NV);
		LoadFunction("glVertexAttribL4i64NV", out p_glVertexAttribL4i64NV);
		LoadFunction("glVertexAttribL1i64vNV", out p_glVertexAttribL1i64vNV);
		LoadFunction("glVertexAttribL2i64vNV", out p_glVertexAttribL2i64vNV);
		LoadFunction("glVertexAttribL3i64vNV", out p_glVertexAttribL3i64vNV);
		LoadFunction("glVertexAttribL4i64vNV", out p_glVertexAttribL4i64vNV);
		LoadFunction("glVertexAttribL1ui64NV", out p_glVertexAttribL1ui64NV);
		LoadFunction("glVertexAttribL2ui64NV", out p_glVertexAttribL2ui64NV);
		LoadFunction("glVertexAttribL3ui64NV", out p_glVertexAttribL3ui64NV);
		LoadFunction("glVertexAttribL4ui64NV", out p_glVertexAttribL4ui64NV);
		LoadFunction("glVertexAttribL1ui64vNV", out p_glVertexAttribL1ui64vNV);
		LoadFunction("glVertexAttribL2ui64vNV", out p_glVertexAttribL2ui64vNV);
		LoadFunction("glVertexAttribL3ui64vNV", out p_glVertexAttribL3ui64vNV);
		LoadFunction("glVertexAttribL4ui64vNV", out p_glVertexAttribL4ui64vNV);
		LoadFunction("glGetVertexAttribLi64vNV", out p_glGetVertexAttribLi64vNV);
		LoadFunction("glGetVertexAttribLui64vNV", out p_glGetVertexAttribLui64vNV);
		LoadFunction("glVertexAttribLFormatNV", out p_glVertexAttribLFormatNV);
		LoadFunction("glBufferAddressRangeNV", out p_glBufferAddressRangeNV);
		LoadFunction("glVertexFormatNV", out p_glVertexFormatNV);
		LoadFunction("glNormalFormatNV", out p_glNormalFormatNV);
		LoadFunction("glColorFormatNV", out p_glColorFormatNV);
		LoadFunction("glIndexFormatNV", out p_glIndexFormatNV);
		LoadFunction("glTexCoordFormatNV", out p_glTexCoordFormatNV);
		LoadFunction("glEdgeFlagFormatNV", out p_glEdgeFlagFormatNV);
		LoadFunction("glSecondaryColorFormatNV", out p_glSecondaryColorFormatNV);
		LoadFunction("glFogCoordFormatNV", out p_glFogCoordFormatNV);
		LoadFunction("glVertexAttribFormatNV", out p_glVertexAttribFormatNV);
		LoadFunction("glVertexAttribIFormatNV", out p_glVertexAttribIFormatNV);
		LoadFunction("glGetIntegerui64i_vNV", out p_glGetIntegerui64i_vNV);
		LoadFunction("glAreProgramsResidentNV", out p_glAreProgramsResidentNV);
		LoadFunction("glBindProgramNV", out p_glBindProgramNV);
		LoadFunction("glDeleteProgramsNV", out p_glDeleteProgramsNV);
		LoadFunction("glExecuteProgramNV", out p_glExecuteProgramNV);
		LoadFunction("glGenProgramsNV", out p_glGenProgramsNV);
		LoadFunction("glGetProgramParameterdvNV", out p_glGetProgramParameterdvNV);
		LoadFunction("glGetProgramParameterfvNV", out p_glGetProgramParameterfvNV);
		LoadFunction("glGetProgramivNV", out p_glGetProgramivNV);
		LoadFunction("glGetProgramStringNV", out p_glGetProgramStringNV);
		LoadFunction("glGetTrackMatrixivNV", out p_glGetTrackMatrixivNV);
		LoadFunction("glGetVertexAttribdvNV", out p_glGetVertexAttribdvNV);
		LoadFunction("glGetVertexAttribfvNV", out p_glGetVertexAttribfvNV);
		LoadFunction("glGetVertexAttribivNV", out p_glGetVertexAttribivNV);
		LoadFunction("glGetVertexAttribPointervNV", out p_glGetVertexAttribPointervNV);
		LoadFunction("glIsProgramNV", out p_glIsProgramNV);
		LoadFunction("glLoadProgramNV", out p_glLoadProgramNV);
		LoadFunction("glProgramParameter4dNV", out p_glProgramParameter4dNV);
		LoadFunction("glProgramParameter4dvNV", out p_glProgramParameter4dvNV);
		LoadFunction("glProgramParameter4fNV", out p_glProgramParameter4fNV);
		LoadFunction("glProgramParameter4fvNV", out p_glProgramParameter4fvNV);
		LoadFunction("glProgramParameters4dvNV", out p_glProgramParameters4dvNV);
		LoadFunction("glProgramParameters4fvNV", out p_glProgramParameters4fvNV);
		LoadFunction("glRequestResidentProgramsNV", out p_glRequestResidentProgramsNV);
		LoadFunction("glTrackMatrixNV", out p_glTrackMatrixNV);
		LoadFunction("glVertexAttribPointerNV", out p_glVertexAttribPointerNV);
		LoadFunction("glVertexAttrib1dNV", out p_glVertexAttrib1dNV);
		LoadFunction("glVertexAttrib1dvNV", out p_glVertexAttrib1dvNV);
		LoadFunction("glVertexAttrib1fNV", out p_glVertexAttrib1fNV);
		LoadFunction("glVertexAttrib1fvNV", out p_glVertexAttrib1fvNV);
		LoadFunction("glVertexAttrib1sNV", out p_glVertexAttrib1sNV);
		LoadFunction("glVertexAttrib1svNV", out p_glVertexAttrib1svNV);
		LoadFunction("glVertexAttrib2dNV", out p_glVertexAttrib2dNV);
		LoadFunction("glVertexAttrib2dvNV", out p_glVertexAttrib2dvNV);
		LoadFunction("glVertexAttrib2fNV", out p_glVertexAttrib2fNV);
		LoadFunction("glVertexAttrib2fvNV", out p_glVertexAttrib2fvNV);
		LoadFunction("glVertexAttrib2sNV", out p_glVertexAttrib2sNV);
		LoadFunction("glVertexAttrib2svNV", out p_glVertexAttrib2svNV);
		LoadFunction("glVertexAttrib3dNV", out p_glVertexAttrib3dNV);
		LoadFunction("glVertexAttrib3dvNV", out p_glVertexAttrib3dvNV);
		LoadFunction("glVertexAttrib3fNV", out p_glVertexAttrib3fNV);
		LoadFunction("glVertexAttrib3fvNV", out p_glVertexAttrib3fvNV);
		LoadFunction("glVertexAttrib3sNV", out p_glVertexAttrib3sNV);
		LoadFunction("glVertexAttrib3svNV", out p_glVertexAttrib3svNV);
		LoadFunction("glVertexAttrib4dNV", out p_glVertexAttrib4dNV);
		LoadFunction("glVertexAttrib4dvNV", out p_glVertexAttrib4dvNV);
		LoadFunction("glVertexAttrib4fNV", out p_glVertexAttrib4fNV);
		LoadFunction("glVertexAttrib4fvNV", out p_glVertexAttrib4fvNV);
		LoadFunction("glVertexAttrib4sNV", out p_glVertexAttrib4sNV);
		LoadFunction("glVertexAttrib4svNV", out p_glVertexAttrib4svNV);
		LoadFunction("glVertexAttrib4ubNV", out p_glVertexAttrib4ubNV);
		LoadFunction("glVertexAttrib4ubvNV", out p_glVertexAttrib4ubvNV);
		LoadFunction("glVertexAttribs1dvNV", out p_glVertexAttribs1dvNV);
		LoadFunction("glVertexAttribs1fvNV", out p_glVertexAttribs1fvNV);
		LoadFunction("glVertexAttribs1svNV", out p_glVertexAttribs1svNV);
		LoadFunction("glVertexAttribs2dvNV", out p_glVertexAttribs2dvNV);
		LoadFunction("glVertexAttribs2fvNV", out p_glVertexAttribs2fvNV);
		LoadFunction("glVertexAttribs2svNV", out p_glVertexAttribs2svNV);
		LoadFunction("glVertexAttribs3dvNV", out p_glVertexAttribs3dvNV);
		LoadFunction("glVertexAttribs3fvNV", out p_glVertexAttribs3fvNV);
		LoadFunction("glVertexAttribs3svNV", out p_glVertexAttribs3svNV);
		LoadFunction("glVertexAttribs4dvNV", out p_glVertexAttribs4dvNV);
		LoadFunction("glVertexAttribs4fvNV", out p_glVertexAttribs4fvNV);
		LoadFunction("glVertexAttribs4svNV", out p_glVertexAttribs4svNV);
		LoadFunction("glVertexAttribs4ubvNV", out p_glVertexAttribs4ubvNV);
		LoadFunction("glVertexAttribI1iEXT", out p_glVertexAttribI1iEXT);
		LoadFunction("glVertexAttribI2iEXT", out p_glVertexAttribI2iEXT);
		LoadFunction("glVertexAttribI3iEXT", out p_glVertexAttribI3iEXT);
		LoadFunction("glVertexAttribI4iEXT", out p_glVertexAttribI4iEXT);
		LoadFunction("glVertexAttribI1uiEXT", out p_glVertexAttribI1uiEXT);
		LoadFunction("glVertexAttribI2uiEXT", out p_glVertexAttribI2uiEXT);
		LoadFunction("glVertexAttribI3uiEXT", out p_glVertexAttribI3uiEXT);
		LoadFunction("glVertexAttribI4uiEXT", out p_glVertexAttribI4uiEXT);
		LoadFunction("glVertexAttribI1ivEXT", out p_glVertexAttribI1ivEXT);
		LoadFunction("glVertexAttribI2ivEXT", out p_glVertexAttribI2ivEXT);
		LoadFunction("glVertexAttribI3ivEXT", out p_glVertexAttribI3ivEXT);
		LoadFunction("glVertexAttribI4ivEXT", out p_glVertexAttribI4ivEXT);
		LoadFunction("glVertexAttribI1uivEXT", out p_glVertexAttribI1uivEXT);
		LoadFunction("glVertexAttribI2uivEXT", out p_glVertexAttribI2uivEXT);
		LoadFunction("glVertexAttribI3uivEXT", out p_glVertexAttribI3uivEXT);
		LoadFunction("glVertexAttribI4uivEXT", out p_glVertexAttribI4uivEXT);
		LoadFunction("glVertexAttribI4bvEXT", out p_glVertexAttribI4bvEXT);
		LoadFunction("glVertexAttribI4svEXT", out p_glVertexAttribI4svEXT);
		LoadFunction("glVertexAttribI4ubvEXT", out p_glVertexAttribI4ubvEXT);
		LoadFunction("glVertexAttribI4usvEXT", out p_glVertexAttribI4usvEXT);
		LoadFunction("glVertexAttribIPointerEXT", out p_glVertexAttribIPointerEXT);
		LoadFunction("glGetVertexAttribIivEXT", out p_glGetVertexAttribIivEXT);
		LoadFunction("glGetVertexAttribIuivEXT", out p_glGetVertexAttribIuivEXT);
		LoadFunction("glBeginVideoCaptureNV", out p_glBeginVideoCaptureNV);
		LoadFunction("glBindVideoCaptureStreamBufferNV", out p_glBindVideoCaptureStreamBufferNV);
		LoadFunction("glBindVideoCaptureStreamTextureNV", out p_glBindVideoCaptureStreamTextureNV);
		LoadFunction("glEndVideoCaptureNV", out p_glEndVideoCaptureNV);
		LoadFunction("glGetVideoCaptureivNV", out p_glGetVideoCaptureivNV);
		LoadFunction("glGetVideoCaptureStreamivNV", out p_glGetVideoCaptureStreamivNV);
		LoadFunction("glGetVideoCaptureStreamfvNV", out p_glGetVideoCaptureStreamfvNV);
		LoadFunction("glGetVideoCaptureStreamdvNV", out p_glGetVideoCaptureStreamdvNV);
		LoadFunction("glVideoCaptureNV", out p_glVideoCaptureNV);
		LoadFunction("glVideoCaptureStreamParameterivNV", out p_glVideoCaptureStreamParameterivNV);
		LoadFunction("glVideoCaptureStreamParameterfvNV", out p_glVideoCaptureStreamParameterfvNV);
		LoadFunction("glVideoCaptureStreamParameterdvNV", out p_glVideoCaptureStreamParameterdvNV);
		LoadFunction("glViewportArrayvNV", out p_glViewportArrayvNV);
		LoadFunction("glViewportIndexedfNV", out p_glViewportIndexedfNV);
		LoadFunction("glViewportIndexedfvNV", out p_glViewportIndexedfvNV);
		LoadFunction("glScissorArrayvNV", out p_glScissorArrayvNV);
		LoadFunction("glScissorIndexedNV", out p_glScissorIndexedNV);
		LoadFunction("glScissorIndexedvNV", out p_glScissorIndexedvNV);
		LoadFunction("glDepthRangeArrayfvNV", out p_glDepthRangeArrayfvNV);
		LoadFunction("glDepthRangeIndexedfNV", out p_glDepthRangeIndexedfNV);
		LoadFunction("glGetFloati_vNV", out p_glGetFloati_vNV);
		LoadFunction("glEnableiNV", out p_glEnableiNV);
		LoadFunction("glDisableiNV", out p_glDisableiNV);
		LoadFunction("glIsEnablediNV", out p_glIsEnablediNV);
		LoadFunction("glViewportSwizzleNV", out p_glViewportSwizzleNV);
		LoadFunction("glEGLImageTargetTexture2DOES", out p_glEGLImageTargetTexture2DOES);
		LoadFunction("glEGLImageTargetRenderbufferStorageOES", out p_glEGLImageTargetRenderbufferStorageOES);
		LoadFunction("glBlendEquationSeparateOES", out p_glBlendEquationSeparateOES);
		LoadFunction("glBlendFuncSeparateOES", out p_glBlendFuncSeparateOES);
		LoadFunction("glBlendEquationOES", out p_glBlendEquationOES);
		LoadFunction("glMultiTexCoord1bOES", out p_glMultiTexCoord1bOES);
		LoadFunction("glMultiTexCoord1bvOES", out p_glMultiTexCoord1bvOES);
		LoadFunction("glMultiTexCoord2bOES", out p_glMultiTexCoord2bOES);
		LoadFunction("glMultiTexCoord2bvOES", out p_glMultiTexCoord2bvOES);
		LoadFunction("glMultiTexCoord3bOES", out p_glMultiTexCoord3bOES);
		LoadFunction("glMultiTexCoord3bvOES", out p_glMultiTexCoord3bvOES);
		LoadFunction("glMultiTexCoord4bOES", out p_glMultiTexCoord4bOES);
		LoadFunction("glMultiTexCoord4bvOES", out p_glMultiTexCoord4bvOES);
		LoadFunction("glTexCoord1bOES", out p_glTexCoord1bOES);
		LoadFunction("glTexCoord1bvOES", out p_glTexCoord1bvOES);
		LoadFunction("glTexCoord2bOES", out p_glTexCoord2bOES);
		LoadFunction("glTexCoord2bvOES", out p_glTexCoord2bvOES);
		LoadFunction("glTexCoord3bOES", out p_glTexCoord3bOES);
		LoadFunction("glTexCoord3bvOES", out p_glTexCoord3bvOES);
		LoadFunction("glTexCoord4bOES", out p_glTexCoord4bOES);
		LoadFunction("glTexCoord4bvOES", out p_glTexCoord4bvOES);
		LoadFunction("glVertex2bOES", out p_glVertex2bOES);
		LoadFunction("glVertex2bvOES", out p_glVertex2bvOES);
		LoadFunction("glVertex3bOES", out p_glVertex3bOES);
		LoadFunction("glVertex3bvOES", out p_glVertex3bvOES);
		LoadFunction("glVertex4bOES", out p_glVertex4bOES);
		LoadFunction("glVertex4bvOES", out p_glVertex4bvOES);
		LoadFunction("glCopyImageSubDataOES", out p_glCopyImageSubDataOES);
		LoadFunction("glEnableiOES", out p_glEnableiOES);
		LoadFunction("glDisableiOES", out p_glDisableiOES);
		LoadFunction("glBlendEquationiOES", out p_glBlendEquationiOES);
		LoadFunction("glBlendEquationSeparateiOES", out p_glBlendEquationSeparateiOES);
		LoadFunction("glBlendFunciOES", out p_glBlendFunciOES);
		LoadFunction("glBlendFuncSeparateiOES", out p_glBlendFuncSeparateiOES);
		LoadFunction("glColorMaskiOES", out p_glColorMaskiOES);
		LoadFunction("glIsEnablediOES", out p_glIsEnablediOES);
		LoadFunction("glDrawElementsBaseVertexOES", out p_glDrawElementsBaseVertexOES);
		LoadFunction("glDrawRangeElementsBaseVertexOES", out p_glDrawRangeElementsBaseVertexOES);
		LoadFunction("glDrawElementsInstancedBaseVertexOES", out p_glDrawElementsInstancedBaseVertexOES);
		LoadFunction("glDrawTexsOES", out p_glDrawTexsOES);
		LoadFunction("glDrawTexiOES", out p_glDrawTexiOES);
		LoadFunction("glDrawTexxOES", out p_glDrawTexxOES);
		LoadFunction("glDrawTexsvOES", out p_glDrawTexsvOES);
		LoadFunction("glDrawTexivOES", out p_glDrawTexivOES);
		LoadFunction("glDrawTexxvOES", out p_glDrawTexxvOES);
		LoadFunction("glDrawTexfOES", out p_glDrawTexfOES);
		LoadFunction("glDrawTexfvOES", out p_glDrawTexfvOES);
		LoadFunction("glAlphaFuncxOES", out p_glAlphaFuncxOES);
		LoadFunction("glClearColorxOES", out p_glClearColorxOES);
		LoadFunction("glClearDepthxOES", out p_glClearDepthxOES);
		LoadFunction("glClipPlanexOES", out p_glClipPlanexOES);
		LoadFunction("glColor4xOES", out p_glColor4xOES);
		LoadFunction("glDepthRangexOES", out p_glDepthRangexOES);
		LoadFunction("glFogxOES", out p_glFogxOES);
		LoadFunction("glFogxvOES", out p_glFogxvOES);
		LoadFunction("glFrustumxOES", out p_glFrustumxOES);
		LoadFunction("glGetClipPlanexOES", out p_glGetClipPlanexOES);
		LoadFunction("glGetFixedvOES", out p_glGetFixedvOES);
		LoadFunction("glGetTexEnvxvOES", out p_glGetTexEnvxvOES);
		LoadFunction("glGetTexParameterxvOES", out p_glGetTexParameterxvOES);
		LoadFunction("glLightModelxOES", out p_glLightModelxOES);
		LoadFunction("glLightModelxvOES", out p_glLightModelxvOES);
		LoadFunction("glLightxOES", out p_glLightxOES);
		LoadFunction("glLightxvOES", out p_glLightxvOES);
		LoadFunction("glLineWidthxOES", out p_glLineWidthxOES);
		LoadFunction("glLoadMatrixxOES", out p_glLoadMatrixxOES);
		LoadFunction("glMaterialxOES", out p_glMaterialxOES);
		LoadFunction("glMaterialxvOES", out p_glMaterialxvOES);
		LoadFunction("glMultMatrixxOES", out p_glMultMatrixxOES);
		LoadFunction("glMultiTexCoord4xOES", out p_glMultiTexCoord4xOES);
		LoadFunction("glNormal3xOES", out p_glNormal3xOES);
		LoadFunction("glOrthoxOES", out p_glOrthoxOES);
		LoadFunction("glPointParameterxvOES", out p_glPointParameterxvOES);
		LoadFunction("glPointSizexOES", out p_glPointSizexOES);
		LoadFunction("glPolygonOffsetxOES", out p_glPolygonOffsetxOES);
		LoadFunction("glRotatexOES", out p_glRotatexOES);
		LoadFunction("glScalexOES", out p_glScalexOES);
		LoadFunction("glTexEnvxOES", out p_glTexEnvxOES);
		LoadFunction("glTexEnvxvOES", out p_glTexEnvxvOES);
		LoadFunction("glTexParameterxOES", out p_glTexParameterxOES);
		LoadFunction("glTexParameterxvOES", out p_glTexParameterxvOES);
		LoadFunction("glTranslatexOES", out p_glTranslatexOES);
		LoadFunction("glGetLightxvOES", out p_glGetLightxvOES);
		LoadFunction("glGetMaterialxvOES", out p_glGetMaterialxvOES);
		LoadFunction("glPointParameterxOES", out p_glPointParameterxOES);
		LoadFunction("glSampleCoveragexOES", out p_glSampleCoveragexOES);
		LoadFunction("glAccumxOES", out p_glAccumxOES);
		LoadFunction("glBitmapxOES", out p_glBitmapxOES);
		LoadFunction("glBlendColorxOES", out p_glBlendColorxOES);
		LoadFunction("glClearAccumxOES", out p_glClearAccumxOES);
		LoadFunction("glColor3xOES", out p_glColor3xOES);
		LoadFunction("glColor3xvOES", out p_glColor3xvOES);
		LoadFunction("glColor4xvOES", out p_glColor4xvOES);
		LoadFunction("glConvolutionParameterxOES", out p_glConvolutionParameterxOES);
		LoadFunction("glConvolutionParameterxvOES", out p_glConvolutionParameterxvOES);
		LoadFunction("glEvalCoord1xOES", out p_glEvalCoord1xOES);
		LoadFunction("glEvalCoord1xvOES", out p_glEvalCoord1xvOES);
		LoadFunction("glEvalCoord2xOES", out p_glEvalCoord2xOES);
		LoadFunction("glEvalCoord2xvOES", out p_glEvalCoord2xvOES);
		LoadFunction("glFeedbackBufferxOES", out p_glFeedbackBufferxOES);
		LoadFunction("glGetConvolutionParameterxvOES", out p_glGetConvolutionParameterxvOES);
		LoadFunction("glGetHistogramParameterxvOES", out p_glGetHistogramParameterxvOES);
		LoadFunction("glGetLightxOES", out p_glGetLightxOES);
		LoadFunction("glGetMapxvOES", out p_glGetMapxvOES);
		LoadFunction("glGetMaterialxOES", out p_glGetMaterialxOES);
		LoadFunction("glGetPixelMapxv", out p_glGetPixelMapxv);
		LoadFunction("glGetTexGenxvOES", out p_glGetTexGenxvOES);
		LoadFunction("glGetTexLevelParameterxvOES", out p_glGetTexLevelParameterxvOES);
		LoadFunction("glIndexxOES", out p_glIndexxOES);
		LoadFunction("glIndexxvOES", out p_glIndexxvOES);
		LoadFunction("glLoadTransposeMatrixxOES", out p_glLoadTransposeMatrixxOES);
		LoadFunction("glMap1xOES", out p_glMap1xOES);
		LoadFunction("glMap2xOES", out p_glMap2xOES);
		LoadFunction("glMapGrid1xOES", out p_glMapGrid1xOES);
		LoadFunction("glMapGrid2xOES", out p_glMapGrid2xOES);
		LoadFunction("glMultTransposeMatrixxOES", out p_glMultTransposeMatrixxOES);
		LoadFunction("glMultiTexCoord1xOES", out p_glMultiTexCoord1xOES);
		LoadFunction("glMultiTexCoord1xvOES", out p_glMultiTexCoord1xvOES);
		LoadFunction("glMultiTexCoord2xOES", out p_glMultiTexCoord2xOES);
		LoadFunction("glMultiTexCoord2xvOES", out p_glMultiTexCoord2xvOES);
		LoadFunction("glMultiTexCoord3xOES", out p_glMultiTexCoord3xOES);
		LoadFunction("glMultiTexCoord3xvOES", out p_glMultiTexCoord3xvOES);
		LoadFunction("glMultiTexCoord4xvOES", out p_glMultiTexCoord4xvOES);
		LoadFunction("glNormal3xvOES", out p_glNormal3xvOES);
		LoadFunction("glPassThroughxOES", out p_glPassThroughxOES);
		LoadFunction("glPixelMapx", out p_glPixelMapx);
		LoadFunction("glPixelStorex", out p_glPixelStorex);
		LoadFunction("glPixelTransferxOES", out p_glPixelTransferxOES);
		LoadFunction("glPixelZoomxOES", out p_glPixelZoomxOES);
		LoadFunction("glPrioritizeTexturesxOES", out p_glPrioritizeTexturesxOES);
		LoadFunction("glRasterPos2xOES", out p_glRasterPos2xOES);
		LoadFunction("glRasterPos2xvOES", out p_glRasterPos2xvOES);
		LoadFunction("glRasterPos3xOES", out p_glRasterPos3xOES);
		LoadFunction("glRasterPos3xvOES", out p_glRasterPos3xvOES);
		LoadFunction("glRasterPos4xOES", out p_glRasterPos4xOES);
		LoadFunction("glRasterPos4xvOES", out p_glRasterPos4xvOES);
		LoadFunction("glRectxOES", out p_glRectxOES);
		LoadFunction("glRectxvOES", out p_glRectxvOES);
		LoadFunction("glTexCoord1xOES", out p_glTexCoord1xOES);
		LoadFunction("glTexCoord1xvOES", out p_glTexCoord1xvOES);
		LoadFunction("glTexCoord2xOES", out p_glTexCoord2xOES);
		LoadFunction("glTexCoord2xvOES", out p_glTexCoord2xvOES);
		LoadFunction("glTexCoord3xOES", out p_glTexCoord3xOES);
		LoadFunction("glTexCoord3xvOES", out p_glTexCoord3xvOES);
		LoadFunction("glTexCoord4xOES", out p_glTexCoord4xOES);
		LoadFunction("glTexCoord4xvOES", out p_glTexCoord4xvOES);
		LoadFunction("glTexGenxOES", out p_glTexGenxOES);
		LoadFunction("glTexGenxvOES", out p_glTexGenxvOES);
		LoadFunction("glVertex2xOES", out p_glVertex2xOES);
		LoadFunction("glVertex2xvOES", out p_glVertex2xvOES);
		LoadFunction("glVertex3xOES", out p_glVertex3xOES);
		LoadFunction("glVertex3xvOES", out p_glVertex3xvOES);
		LoadFunction("glVertex4xOES", out p_glVertex4xOES);
		LoadFunction("glVertex4xvOES", out p_glVertex4xvOES);
		LoadFunction("glIsRenderbufferOES", out p_glIsRenderbufferOES);
		LoadFunction("glBindRenderbufferOES", out p_glBindRenderbufferOES);
		LoadFunction("glDeleteRenderbuffersOES", out p_glDeleteRenderbuffersOES);
		LoadFunction("glGenRenderbuffersOES", out p_glGenRenderbuffersOES);
		LoadFunction("glRenderbufferStorageOES", out p_glRenderbufferStorageOES);
		LoadFunction("glGetRenderbufferParameterivOES", out p_glGetRenderbufferParameterivOES);
		LoadFunction("glIsFramebufferOES", out p_glIsFramebufferOES);
		LoadFunction("glBindFramebufferOES", out p_glBindFramebufferOES);
		LoadFunction("glDeleteFramebuffersOES", out p_glDeleteFramebuffersOES);
		LoadFunction("glGenFramebuffersOES", out p_glGenFramebuffersOES);
		LoadFunction("glCheckFramebufferStatusOES", out p_glCheckFramebufferStatusOES);
		LoadFunction("glFramebufferRenderbufferOES", out p_glFramebufferRenderbufferOES);
		LoadFunction("glFramebufferTexture2DOES", out p_glFramebufferTexture2DOES);
		LoadFunction("glGetFramebufferAttachmentParameterivOES", out p_glGetFramebufferAttachmentParameterivOES);
		LoadFunction("glGenerateMipmapOES", out p_glGenerateMipmapOES);
		LoadFunction("glFramebufferTextureOES", out p_glFramebufferTextureOES);
		LoadFunction("glGetProgramBinaryOES", out p_glGetProgramBinaryOES);
		LoadFunction("glProgramBinaryOES", out p_glProgramBinaryOES);
		LoadFunction("glMapBufferOES", out p_glMapBufferOES);
		LoadFunction("glUnmapBufferOES", out p_glUnmapBufferOES);
		LoadFunction("glGetBufferPointervOES", out p_glGetBufferPointervOES);
		LoadFunction("glCurrentPaletteMatrixOES", out p_glCurrentPaletteMatrixOES);
		LoadFunction("glLoadPaletteFromModelViewMatrixOES", out p_glLoadPaletteFromModelViewMatrixOES);
		LoadFunction("glMatrixIndexPointerOES", out p_glMatrixIndexPointerOES);
		LoadFunction("glWeightPointerOES", out p_glWeightPointerOES);
		LoadFunction("glPointSizePointerOES", out p_glPointSizePointerOES);
		LoadFunction("glPrimitiveBoundingBoxOES", out p_glPrimitiveBoundingBoxOES);
		LoadFunction("glQueryMatrixxOES", out p_glQueryMatrixxOES);
		LoadFunction("glMinSampleShadingOES", out p_glMinSampleShadingOES);
		LoadFunction("glClearDepthfOES", out p_glClearDepthfOES);
		LoadFunction("glClipPlanefOES", out p_glClipPlanefOES);
		LoadFunction("glDepthRangefOES", out p_glDepthRangefOES);
		LoadFunction("glFrustumfOES", out p_glFrustumfOES);
		LoadFunction("glGetClipPlanefOES", out p_glGetClipPlanefOES);
		LoadFunction("glOrthofOES", out p_glOrthofOES);
		LoadFunction("glPatchParameteriOES", out p_glPatchParameteriOES);
		LoadFunction("glTexImage3DOES", out p_glTexImage3DOES);
		LoadFunction("glTexSubImage3DOES", out p_glTexSubImage3DOES);
		LoadFunction("glCopyTexSubImage3DOES", out p_glCopyTexSubImage3DOES);
		LoadFunction("glCompressedTexImage3DOES", out p_glCompressedTexImage3DOES);
		LoadFunction("glCompressedTexSubImage3DOES", out p_glCompressedTexSubImage3DOES);
		LoadFunction("glFramebufferTexture3DOES", out p_glFramebufferTexture3DOES);
		LoadFunction("glTexParameterIivOES", out p_glTexParameterIivOES);
		LoadFunction("glTexParameterIuivOES", out p_glTexParameterIuivOES);
		LoadFunction("glGetTexParameterIivOES", out p_glGetTexParameterIivOES);
		LoadFunction("glGetTexParameterIuivOES", out p_glGetTexParameterIuivOES);
		LoadFunction("glSamplerParameterIivOES", out p_glSamplerParameterIivOES);
		LoadFunction("glSamplerParameterIuivOES", out p_glSamplerParameterIuivOES);
		LoadFunction("glGetSamplerParameterIivOES", out p_glGetSamplerParameterIivOES);
		LoadFunction("glGetSamplerParameterIuivOES", out p_glGetSamplerParameterIuivOES);
		LoadFunction("glTexBufferOES", out p_glTexBufferOES);
		LoadFunction("glTexBufferRangeOES", out p_glTexBufferRangeOES);
		LoadFunction("glTexGenfOES", out p_glTexGenfOES);
		LoadFunction("glTexGenfvOES", out p_glTexGenfvOES);
		LoadFunction("glTexGeniOES", out p_glTexGeniOES);
		LoadFunction("glTexGenivOES", out p_glTexGenivOES);
		LoadFunction("glGetTexGenfvOES", out p_glGetTexGenfvOES);
		LoadFunction("glGetTexGenivOES", out p_glGetTexGenivOES);
		LoadFunction("glTexStorage3DMultisampleOES", out p_glTexStorage3DMultisampleOES);
		LoadFunction("glTextureViewOES", out p_glTextureViewOES);
		LoadFunction("glBindVertexArrayOES", out p_glBindVertexArrayOES);
		LoadFunction("glDeleteVertexArraysOES", out p_glDeleteVertexArraysOES);
		LoadFunction("glGenVertexArraysOES", out p_glGenVertexArraysOES);
		LoadFunction("glIsVertexArrayOES", out p_glIsVertexArrayOES);
		LoadFunction("glViewportArrayvOES", out p_glViewportArrayvOES);
		LoadFunction("glViewportIndexedfOES", out p_glViewportIndexedfOES);
		LoadFunction("glViewportIndexedfvOES", out p_glViewportIndexedfvOES);
		LoadFunction("glScissorArrayvOES", out p_glScissorArrayvOES);
		LoadFunction("glScissorIndexedOES", out p_glScissorIndexedOES);
		LoadFunction("glScissorIndexedvOES", out p_glScissorIndexedvOES);
		LoadFunction("glDepthRangeArrayfvOES", out p_glDepthRangeArrayfvOES);
		LoadFunction("glDepthRangeIndexedfOES", out p_glDepthRangeIndexedfOES);
		LoadFunction("glGetFloati_vOES", out p_glGetFloati_vOES);
		LoadFunction("glFramebufferTextureMultiviewOVR", out p_glFramebufferTextureMultiviewOVR);
		LoadFunction("glFramebufferTextureMultisampleMultiviewOVR", out p_glFramebufferTextureMultisampleMultiviewOVR);
		LoadFunction("glHintPGI", out p_glHintPGI);
		LoadFunction("glAlphaFuncQCOM", out p_glAlphaFuncQCOM);
		LoadFunction("glGetDriverControlsQCOM", out p_glGetDriverControlsQCOM);
		LoadFunction("glGetDriverControlStringQCOM", out p_glGetDriverControlStringQCOM);
		LoadFunction("glEnableDriverControlQCOM", out p_glEnableDriverControlQCOM);
		LoadFunction("glDisableDriverControlQCOM", out p_glDisableDriverControlQCOM);
		LoadFunction("glExtGetTexturesQCOM", out p_glExtGetTexturesQCOM);
		LoadFunction("glExtGetBuffersQCOM", out p_glExtGetBuffersQCOM);
		LoadFunction("glExtGetRenderbuffersQCOM", out p_glExtGetRenderbuffersQCOM);
		LoadFunction("glExtGetFramebuffersQCOM", out p_glExtGetFramebuffersQCOM);
		LoadFunction("glExtGetTexLevelParameterivQCOM", out p_glExtGetTexLevelParameterivQCOM);
		LoadFunction("glExtTexObjectStateOverrideiQCOM", out p_glExtTexObjectStateOverrideiQCOM);
		LoadFunction("glExtGetTexSubImageQCOM", out p_glExtGetTexSubImageQCOM);
		LoadFunction("glExtGetBufferPointervQCOM", out p_glExtGetBufferPointervQCOM);
		LoadFunction("glExtGetShadersQCOM", out p_glExtGetShadersQCOM);
		LoadFunction("glExtGetProgramsQCOM", out p_glExtGetProgramsQCOM);
		LoadFunction("glExtIsProgramBinaryQCOM", out p_glExtIsProgramBinaryQCOM);
		LoadFunction("glExtGetProgramBinarySourceQCOM", out p_glExtGetProgramBinarySourceQCOM);
		LoadFunction("glFramebufferFoveationConfigQCOM", out p_glFramebufferFoveationConfigQCOM);
		LoadFunction("glFramebufferFoveationParametersQCOM", out p_glFramebufferFoveationParametersQCOM);
		LoadFunction("glTextureFoveationParametersQCOM", out p_glTextureFoveationParametersQCOM);
		LoadFunction("glFramebufferFetchBarrierQCOM", out p_glFramebufferFetchBarrierQCOM);
		LoadFunction("glStartTilingQCOM", out p_glStartTilingQCOM);
		LoadFunction("glEndTilingQCOM", out p_glEndTilingQCOM);
		LoadFunction("glDetailTexFuncSGIS", out p_glDetailTexFuncSGIS);
		LoadFunction("glGetDetailTexFuncSGIS", out p_glGetDetailTexFuncSGIS);
		LoadFunction("glFogFuncSGIS", out p_glFogFuncSGIS);
		LoadFunction("glGetFogFuncSGIS", out p_glGetFogFuncSGIS);
		LoadFunction("glSampleMaskSGIS", out p_glSampleMaskSGIS);
		LoadFunction("glSamplePatternSGIS", out p_glSamplePatternSGIS);
		LoadFunction("glPixelTexGenParameteriSGIS", out p_glPixelTexGenParameteriSGIS);
		LoadFunction("glPixelTexGenParameterivSGIS", out p_glPixelTexGenParameterivSGIS);
		LoadFunction("glPixelTexGenParameterfSGIS", out p_glPixelTexGenParameterfSGIS);
		LoadFunction("glPixelTexGenParameterfvSGIS", out p_glPixelTexGenParameterfvSGIS);
		LoadFunction("glGetPixelTexGenParameterivSGIS", out p_glGetPixelTexGenParameterivSGIS);
		LoadFunction("glGetPixelTexGenParameterfvSGIS", out p_glGetPixelTexGenParameterfvSGIS);
		LoadFunction("glPointParameterfSGIS", out p_glPointParameterfSGIS);
		LoadFunction("glPointParameterfvSGIS", out p_glPointParameterfvSGIS);
		LoadFunction("glSharpenTexFuncSGIS", out p_glSharpenTexFuncSGIS);
		LoadFunction("glGetSharpenTexFuncSGIS", out p_glGetSharpenTexFuncSGIS);
		LoadFunction("glTexImage4DSGIS", out p_glTexImage4DSGIS);
		LoadFunction("glTexSubImage4DSGIS", out p_glTexSubImage4DSGIS);
		LoadFunction("glTextureColorMaskSGIS", out p_glTextureColorMaskSGIS);
		LoadFunction("glGetTexFilterFuncSGIS", out p_glGetTexFilterFuncSGIS);
		LoadFunction("glTexFilterFuncSGIS", out p_glTexFilterFuncSGIS);
		LoadFunction("glAsyncMarkerSGIX", out p_glAsyncMarkerSGIX);
		LoadFunction("glFinishAsyncSGIX", out p_glFinishAsyncSGIX);
		LoadFunction("glPollAsyncSGIX", out p_glPollAsyncSGIX);
		LoadFunction("glGenAsyncMarkersSGIX", out p_glGenAsyncMarkersSGIX);
		LoadFunction("glDeleteAsyncMarkersSGIX", out p_glDeleteAsyncMarkersSGIX);
		LoadFunction("glIsAsyncMarkerSGIX", out p_glIsAsyncMarkerSGIX);
		LoadFunction("glFlushRasterSGIX", out p_glFlushRasterSGIX);
		LoadFunction("glFragmentColorMaterialSGIX", out p_glFragmentColorMaterialSGIX);
		LoadFunction("glFragmentLightfSGIX", out p_glFragmentLightfSGIX);
		LoadFunction("glFragmentLightfvSGIX", out p_glFragmentLightfvSGIX);
		LoadFunction("glFragmentLightiSGIX", out p_glFragmentLightiSGIX);
		LoadFunction("glFragmentLightivSGIX", out p_glFragmentLightivSGIX);
		LoadFunction("glFragmentLightModelfSGIX", out p_glFragmentLightModelfSGIX);
		LoadFunction("glFragmentLightModelfvSGIX", out p_glFragmentLightModelfvSGIX);
		LoadFunction("glFragmentLightModeliSGIX", out p_glFragmentLightModeliSGIX);
		LoadFunction("glFragmentLightModelivSGIX", out p_glFragmentLightModelivSGIX);
		LoadFunction("glFragmentMaterialfSGIX", out p_glFragmentMaterialfSGIX);
		LoadFunction("glFragmentMaterialfvSGIX", out p_glFragmentMaterialfvSGIX);
		LoadFunction("glFragmentMaterialiSGIX", out p_glFragmentMaterialiSGIX);
		LoadFunction("glFragmentMaterialivSGIX", out p_glFragmentMaterialivSGIX);
		LoadFunction("glGetFragmentLightfvSGIX", out p_glGetFragmentLightfvSGIX);
		LoadFunction("glGetFragmentLightivSGIX", out p_glGetFragmentLightivSGIX);
		LoadFunction("glGetFragmentMaterialfvSGIX", out p_glGetFragmentMaterialfvSGIX);
		LoadFunction("glGetFragmentMaterialivSGIX", out p_glGetFragmentMaterialivSGIX);
		LoadFunction("glLightEnviSGIX", out p_glLightEnviSGIX);
		LoadFunction("glFrameZoomSGIX", out p_glFrameZoomSGIX);
		LoadFunction("glIglooInterfaceSGIX", out p_glIglooInterfaceSGIX);
		LoadFunction("glGetInstrumentsSGIX", out p_glGetInstrumentsSGIX);
		LoadFunction("glInstrumentsBufferSGIX", out p_glInstrumentsBufferSGIX);
		LoadFunction("glPollInstrumentsSGIX", out p_glPollInstrumentsSGIX);
		LoadFunction("glReadInstrumentsSGIX", out p_glReadInstrumentsSGIX);
		LoadFunction("glStartInstrumentsSGIX", out p_glStartInstrumentsSGIX);
		LoadFunction("glStopInstrumentsSGIX", out p_glStopInstrumentsSGIX);
		LoadFunction("glGetListParameterfvSGIX", out p_glGetListParameterfvSGIX);
		LoadFunction("glGetListParameterivSGIX", out p_glGetListParameterivSGIX);
		LoadFunction("glListParameterfSGIX", out p_glListParameterfSGIX);
		LoadFunction("glListParameterfvSGIX", out p_glListParameterfvSGIX);
		LoadFunction("glListParameteriSGIX", out p_glListParameteriSGIX);
		LoadFunction("glListParameterivSGIX", out p_glListParameterivSGIX);
		LoadFunction("glPixelTexGenSGIX", out p_glPixelTexGenSGIX);
		LoadFunction("glDeformationMap3dSGIX", out p_glDeformationMap3dSGIX);
		LoadFunction("glDeformationMap3fSGIX", out p_glDeformationMap3fSGIX);
		LoadFunction("glDeformSGIX", out p_glDeformSGIX);
		LoadFunction("glLoadIdentityDeformationMapSGIX", out p_glLoadIdentityDeformationMapSGIX);
		LoadFunction("glReferencePlaneSGIX", out p_glReferencePlaneSGIX);
		LoadFunction("glSpriteParameterfSGIX", out p_glSpriteParameterfSGIX);
		LoadFunction("glSpriteParameterfvSGIX", out p_glSpriteParameterfvSGIX);
		LoadFunction("glSpriteParameteriSGIX", out p_glSpriteParameteriSGIX);
		LoadFunction("glSpriteParameterivSGIX", out p_glSpriteParameterivSGIX);
		LoadFunction("glTagSampleBufferSGIX", out p_glTagSampleBufferSGIX);
		LoadFunction("glColorTableSGI", out p_glColorTableSGI);
		LoadFunction("glColorTableParameterfvSGI", out p_glColorTableParameterfvSGI);
		LoadFunction("glColorTableParameterivSGI", out p_glColorTableParameterivSGI);
		LoadFunction("glCopyColorTableSGI", out p_glCopyColorTableSGI);
		LoadFunction("glGetColorTableSGI", out p_glGetColorTableSGI);
		LoadFunction("glGetColorTableParameterfvSGI", out p_glGetColorTableParameterfvSGI);
		LoadFunction("glGetColorTableParameterivSGI", out p_glGetColorTableParameterivSGI);
		LoadFunction("glFinishTextureSUNX", out p_glFinishTextureSUNX);
		LoadFunction("glGlobalAlphaFactorbSUN", out p_glGlobalAlphaFactorbSUN);
		LoadFunction("glGlobalAlphaFactorsSUN", out p_glGlobalAlphaFactorsSUN);
		LoadFunction("glGlobalAlphaFactoriSUN", out p_glGlobalAlphaFactoriSUN);
		LoadFunction("glGlobalAlphaFactorfSUN", out p_glGlobalAlphaFactorfSUN);
		LoadFunction("glGlobalAlphaFactordSUN", out p_glGlobalAlphaFactordSUN);
		LoadFunction("glGlobalAlphaFactorubSUN", out p_glGlobalAlphaFactorubSUN);
		LoadFunction("glGlobalAlphaFactorusSUN", out p_glGlobalAlphaFactorusSUN);
		LoadFunction("glGlobalAlphaFactoruiSUN", out p_glGlobalAlphaFactoruiSUN);
		LoadFunction("glDrawMeshArraysSUN", out p_glDrawMeshArraysSUN);
		LoadFunction("glReplacementCodeuiSUN", out p_glReplacementCodeuiSUN);
		LoadFunction("glReplacementCodeusSUN", out p_glReplacementCodeusSUN);
		LoadFunction("glReplacementCodeubSUN", out p_glReplacementCodeubSUN);
		LoadFunction("glReplacementCodeuivSUN", out p_glReplacementCodeuivSUN);
		LoadFunction("glReplacementCodeusvSUN", out p_glReplacementCodeusvSUN);
		LoadFunction("glReplacementCodeubvSUN", out p_glReplacementCodeubvSUN);
		LoadFunction("glReplacementCodePointerSUN", out p_glReplacementCodePointerSUN);
		LoadFunction("glColor4ubVertex2fSUN", out p_glColor4ubVertex2fSUN);
		LoadFunction("glColor4ubVertex2fvSUN", out p_glColor4ubVertex2fvSUN);
		LoadFunction("glColor4ubVertex3fSUN", out p_glColor4ubVertex3fSUN);
		LoadFunction("glColor4ubVertex3fvSUN", out p_glColor4ubVertex3fvSUN);
		LoadFunction("glColor3fVertex3fSUN", out p_glColor3fVertex3fSUN);
		LoadFunction("glColor3fVertex3fvSUN", out p_glColor3fVertex3fvSUN);
		LoadFunction("glNormal3fVertex3fSUN", out p_glNormal3fVertex3fSUN);
		LoadFunction("glNormal3fVertex3fvSUN", out p_glNormal3fVertex3fvSUN);
		LoadFunction("glColor4fNormal3fVertex3fSUN", out p_glColor4fNormal3fVertex3fSUN);
		LoadFunction("glColor4fNormal3fVertex3fvSUN", out p_glColor4fNormal3fVertex3fvSUN);
		LoadFunction("glTexCoord2fVertex3fSUN", out p_glTexCoord2fVertex3fSUN);
		LoadFunction("glTexCoord2fVertex3fvSUN", out p_glTexCoord2fVertex3fvSUN);
		LoadFunction("glTexCoord4fVertex4fSUN", out p_glTexCoord4fVertex4fSUN);
		LoadFunction("glTexCoord4fVertex4fvSUN", out p_glTexCoord4fVertex4fvSUN);
		LoadFunction("glTexCoord2fColor4ubVertex3fSUN", out p_glTexCoord2fColor4ubVertex3fSUN);
		LoadFunction("glTexCoord2fColor4ubVertex3fvSUN", out p_glTexCoord2fColor4ubVertex3fvSUN);
		LoadFunction("glTexCoord2fColor3fVertex3fSUN", out p_glTexCoord2fColor3fVertex3fSUN);
		LoadFunction("glTexCoord2fColor3fVertex3fvSUN", out p_glTexCoord2fColor3fVertex3fvSUN);
		LoadFunction("glTexCoord2fNormal3fVertex3fSUN", out p_glTexCoord2fNormal3fVertex3fSUN);
		LoadFunction("glTexCoord2fNormal3fVertex3fvSUN", out p_glTexCoord2fNormal3fVertex3fvSUN);
		LoadFunction("glTexCoord2fColor4fNormal3fVertex3fSUN", out p_glTexCoord2fColor4fNormal3fVertex3fSUN);
		LoadFunction("glTexCoord2fColor4fNormal3fVertex3fvSUN", out p_glTexCoord2fColor4fNormal3fVertex3fvSUN);
		LoadFunction("glTexCoord4fColor4fNormal3fVertex4fSUN", out p_glTexCoord4fColor4fNormal3fVertex4fSUN);
		LoadFunction("glTexCoord4fColor4fNormal3fVertex4fvSUN", out p_glTexCoord4fColor4fNormal3fVertex4fvSUN);
		LoadFunction("glReplacementCodeuiVertex3fSUN", out p_glReplacementCodeuiVertex3fSUN);
		LoadFunction("glReplacementCodeuiVertex3fvSUN", out p_glReplacementCodeuiVertex3fvSUN);
		LoadFunction("glReplacementCodeuiColor4ubVertex3fSUN", out p_glReplacementCodeuiColor4ubVertex3fSUN);
		LoadFunction("glReplacementCodeuiColor4ubVertex3fvSUN", out p_glReplacementCodeuiColor4ubVertex3fvSUN);
		LoadFunction("glReplacementCodeuiColor3fVertex3fSUN", out p_glReplacementCodeuiColor3fVertex3fSUN);
		LoadFunction("glReplacementCodeuiColor3fVertex3fvSUN", out p_glReplacementCodeuiColor3fVertex3fvSUN);
		LoadFunction("glReplacementCodeuiNormal3fVertex3fSUN", out p_glReplacementCodeuiNormal3fVertex3fSUN);
		LoadFunction("glReplacementCodeuiNormal3fVertex3fvSUN", out p_glReplacementCodeuiNormal3fVertex3fvSUN);
		LoadFunction("glReplacementCodeuiColor4fNormal3fVertex3fSUN", out p_glReplacementCodeuiColor4fNormal3fVertex3fSUN);
		LoadFunction("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", out p_glReplacementCodeuiColor4fNormal3fVertex3fvSUN);
		LoadFunction("glReplacementCodeuiTexCoord2fVertex3fSUN", out p_glReplacementCodeuiTexCoord2fVertex3fSUN);
		LoadFunction("glReplacementCodeuiTexCoord2fVertex3fvSUN", out p_glReplacementCodeuiTexCoord2fVertex3fvSUN);
		LoadFunction("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", out p_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
		LoadFunction("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", out p_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
		LoadFunction("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", out p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
		LoadFunction("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", out p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
	}

	private static void LoadFunction<T>(StringView name, out T field)
	{
		void* funcPtr = s_getProcAddress(name);
		if (funcPtr != null)
		{
			field = *(T*)(void*)&funcPtr;
		}
		else
		{
			field = default(T);
		}
	}
}
